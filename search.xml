<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CesiumJS 进阶</title>
      <link href="2020/10/04/cesium-advanced/cesium-advanced/"/>
      <url>2020/10/04/cesium-advanced/cesium-advanced/</url>
      
        <content type="html"><![CDATA[<h1 id="CesiumJS-进阶"><a href="#CesiumJS-进阶" class="headerlink" title="CesiumJS 进阶"></a><code>CesiumJS</code> 进阶</h1><blockquote><p>记录使用 <code>Cesium</code> 的实体（<code>Entity</code>）<code>API</code>绘制空间数据、使用 <code>Viewer</code> 为操作 <code>entities</code> 提供出来的功能函数、使用 <code>Primitive</code> <code>API</code> 的几何图形和外观系统、创建使用 <code>ParticleSystem</code> 粒子系统等。</p></blockquote><a id="more"></a><h2 id="空间数据可视化（Entity）"><a href="#空间数据可视化（Entity）" class="headerlink" title="空间数据可视化（Entity）"></a>空间数据可视化（<code>Entity</code>）</h2><blockquote><p>Cesium 具有丰富的用于空间数据的 API，可以分为两类：面向图形开发人员的低级API（通常称为原始(<code>Primitive</code>) <code>API</code>）和用于数据驱动的可视化的高级API（称为实体(<code>Entity</code>) <code>API</code>）。</p></blockquote><ul><li><code>Primitive API</code></li></ul><p><code>原始API</code> 的主要目标是暴露手头执行任务所需的最小抽象量。它希望我们像图形程序员一样思考，并使用图形术语。它的结构是为给定的可视化类型提供最有性能和灵活性的实现，而不是为了 <code>API</code> 的一致性。</p><p><code>原始API</code> 功能强大且灵活，但大多数应用程序都提供比 <code>Primitive API</code> 的抽象级别更高的服务接口。<code>Primitive API</code> 更面向于底层图形开发。</p><ul><li><code>Entity API</code></li></ul><p><code>实体API</code> 的目的是公开一组设计一致的高级对象，这些对象将相关的可视化和信息聚合到一个统一的数据结构中，我们称之为实体。它让我们专注于展示我们的数据，而不是担心可视化的潜在机制。它还提供了易于构建复杂的、时间动态可视化的构造，这种可视化方式与静态数据自然相适应。</p><p>虽然 <code>实体API</code> 实际上在背后使用了 <code>Primitive API</code>，但我们几乎永远不必关注实现细节。通过将各种启发式应用到我们提供的数据，<code>实体API</code> 能够提供灵活的、高性能的可视化，同时公开一致的、易于学习和易于使用的接口。</p><h3 id="管理-Entities"><a href="#管理-Entities" class="headerlink" title="管理 Entities"></a>管理 <code>Entities</code></h3><blockquote><p>每一个 <code>Entity</code> 对象都被添加到 <code>EntityCollection</code> 对象集合中，其中每个实体都有唯一的 <code>ID</code>。</p></blockquote><ul><li>添加</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> entity = <span class="keyword">new</span> Entity(&#123;</span><br><span class="line">    id : <span class="string">'uniqueId'</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.$viewer.entities.add(entity);</span><br></pre></td></tr></table></figure><p>所有实体实例都有一个唯一的 <code>id</code>，在创建或修改时可用于从集合中检索实体。我们可以为实体指定一个 <code>ID</code>，否则将自动生成一个 <code>ID</code>。</p><ul><li>隐藏</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entity.show = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><ul><li>获取</li></ul><blockquote><p>使用 <code>getByiId</code> 检索实体。如果不存在具有提供的 <code>ID</code> 的实体，则返回 <code>undefined</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> entity = <span class="keyword">this</span>.$viewer.entities.getById(<span class="string">'uniqueId'</span>)</span><br></pre></td></tr></table></figure><p>要获取实体或创建新实体（如果不存在），可以使用 <code>getOrCreateEntity</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> entity = <span class="keyword">this</span>.$viewer.entities.getOrCreateEntity(<span class="string">'uniqueId'</span>);</span><br></pre></td></tr></table></figure><ul><li>修改</li></ul><blockquote><p>可以在获取实体后对其属性进行修改。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> entity = <span class="keyword">this</span>.$viewer.entities.getById(<span class="string">'uniqueId'</span>)</span><br><span class="line">entity.label.text= <span class="string">"akashi"</span>;</span><br></pre></td></tr></table></figure><ul><li>移除</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先查后删</span></span><br><span class="line"><span class="keyword">let</span> entity = viewer.entities.getById(<span class="string">'uniqueId'</span>);</span><br><span class="line"><span class="keyword">this</span>.$viewer.entities.remove(entity);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接移除</span></span><br><span class="line"><span class="keyword">this</span>.$viewer.entities.removeById(<span class="string">'uniqueId'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除所有</span></span><br><span class="line"><span class="keyword">this</span>.$viewer.entities.removeAll();</span><br></pre></td></tr></table></figure><h3 id="点、图标和标签（Points-billboards-and-labels）"><a href="#点、图标和标签（Points-billboards-and-labels）" class="headerlink" title="点、图标和标签（Points, billboards, and labels）"></a>点、图标和标签（Points, billboards, and labels）</h3><blockquote><p>可以通过设置 <code>position</code>、<code>point</code> 和 <code>label</code> 来创建图形点或标签。</p></blockquote><ul><li>点 &amp;&amp; 文字标签</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> point = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"point"</span>,</span><br><span class="line">  position: Cesium.Cartesian3.fromDegrees(<span class="number">121.506377</span>, <span class="number">31.245105</span>),</span><br><span class="line">  point: &#123;</span><br><span class="line">    pixelSize: <span class="number">5</span>,</span><br><span class="line">    color: Cesium.Color.RED,</span><br><span class="line">    outlineColor: Cesium.Color.WHITE,</span><br><span class="line">    outlineWidth: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  label: &#123;</span><br><span class="line">    text: <span class="string">"Shanghai"</span>,</span><br><span class="line">    font: <span class="string">"14pt monospace"</span>,</span><br><span class="line">    style: Cesium.LabelStyle.FILL_AND_OUTLINE,</span><br><span class="line">    outlineWidth: <span class="number">2</span>,</span><br><span class="line">    verticalOrigin: Cesium.VerticalOrigin.BOTTOM,</span><br><span class="line">    pixelOffset: <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">0</span>, <span class="number">-9</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.$viewer.zoomTo(point);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> camera = <span class="keyword">new</span> Cesium.Camera(<span class="keyword">this</span>.$viewer.scene);</span><br><span class="line">camera.flyTo(&#123;</span><br><span class="line">  destination: Cesium.Cartesian3.fromDegrees(</span><br><span class="line">    <span class="number">121.506377</span>,</span><br><span class="line">    <span class="number">31.245105</span>,</span><br><span class="line">    <span class="number">1000000.0</span></span><br><span class="line">  ),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FkZUo19H2HVXmfrQ_6J5Lz1oa90A" alt="点"></p><ul><li>图标</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> logo = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  position: Cesium.Cartesian3.fromDegrees(<span class="number">139.46</span>, <span class="number">35.42</span>),</span><br><span class="line">  billboard: &#123;</span><br><span class="line">    image: <span class="string">"images/Nogizaka46_Logo.png"</span>,</span><br><span class="line">    width: <span class="number">128</span>,</span><br><span class="line">    height: <span class="number">128</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.$viewer.trackedEntity = logo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> camera = <span class="keyword">new</span> Cesium.Camera(<span class="keyword">this</span>.$viewer.scene);</span><br><span class="line">camera.flyTo(&#123;</span><br><span class="line">  destination: Cesium.Cartesian3.fromDegrees(</span><br><span class="line">    <span class="number">136</span>,</span><br><span class="line">    <span class="number">36</span>,</span><br><span class="line">    <span class="number">1000000</span></span><br><span class="line">  ),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FsRX4nF9mRyKiY0BPNSl40Ei4qOJ" alt="图标"></p><h3 id="Picking-拾取"><a href="#Picking-拾取" class="headerlink" title="Picking 拾取"></a><code>Picking</code> 拾取</h3><blockquote><p>在 <code>Cesium</code> 中，想获取不同的对象，需要通过 <code>pick</code> 方法来进行拾取。</p></blockquote><p>然而其中又有多种 <code>pick</code> 的方法，包括 <code>scene</code> 中的 <code>pick</code>、<code>pickPosition</code> 和 <code>drillPick</code>；<code>camera</code> 中的 <code>getPickRay</code> 和 <code>pickEllipsoid</code>；以及 <code>Globe</code> 中的 <code>pick</code>。</p><ol><li>屏幕坐标</li></ol><blockquote><p>通过 <code>movement.position</code> 获取。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 屏幕坐标</span></span><br><span class="line"><span class="keyword">let</span> handler = <span class="keyword">new</span> Cesium.ScreenSpaceEventHandler(</span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.canvas</span><br><span class="line">);</span><br><span class="line">handler.setInputAction(<span class="function">(<span class="params">movement</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(movement.position);</span><br><span class="line">&#125;, Cesium.ScreenSpaceEventType.LEFT_CLICK);</span><br></pre></td></tr></table></figure><ol start="2"><li>世界坐标</li></ol><blockquote><p>通过 <code>viewer.scene.camera.pickEllipsoid(movement.position, ellipsoid)</code> 获取，可以获取当前点击视线与椭球面相交处的坐标，其中 <code>ellipsoid</code> 是当前地球使用的椭球对象。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 世界坐标</span></span><br><span class="line"><span class="keyword">let</span> handler = <span class="keyword">new</span> Cesium.ScreenSpaceEventHandler(<span class="keyword">this</span>.$viewer.scene.canvas);</span><br><span class="line">handler.setInputAction(<span class="function">(<span class="params">movement</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> position = <span class="keyword">this</span>.$viewer.scene.camera.pickEllipsoid(</span><br><span class="line">    movement.position,</span><br><span class="line">    <span class="keyword">this</span>.$viewer.scene.globe.ellipsoid</span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">console</span>.log(position);</span><br><span class="line">&#125;, Cesium.ScreenSpaceEventType.LEFT_CLICK);</span><br></pre></td></tr></table></figure><ol start="3"><li>场景坐标</li></ol><blockquote><p>通过 <code>viewer.scene.pickPosition(movement.position)</code> 获取，根据窗口坐标，从场景的深度缓冲区中拾取相应的位置，返回笛卡尔坐标。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 场景坐标</span></span><br><span class="line"><span class="keyword">let</span> handler = <span class="keyword">new</span> Cesium.ScreenSpaceEventHandler(<span class="keyword">this</span>.$viewer.scene.canvas);</span><br><span class="line">handler.setInputAction(<span class="function">(<span class="params">movement</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> position = <span class="keyword">this</span>.$viewer.scene.pickPosition(movement.position);</span><br><span class="line">  <span class="built_in">console</span>.log(position);</span><br><span class="line">&#125;, Cesium.ScreenSpaceEventType.LEFT_CLICK);</span><br></pre></td></tr></table></figure><ol start="4"><li>地标坐标</li></ol><blockquote><p>通过 <code>viewer.scene.globe.pick(ray, scene)</code> 获取，可以获取点击处地球表面的世界坐标，不包括模型、倾斜摄影表面。其中 <code>ray=viewer.camera.getPickRay(movement.position)</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 地标坐标</span></span><br><span class="line"><span class="keyword">let</span> handler = <span class="keyword">new</span> Cesium.ScreenSpaceEventHandler(<span class="keyword">this</span>.$viewer.scene.canvas);</span><br><span class="line">handler.setInputAction(<span class="function">(<span class="params">movement</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> ray = <span class="keyword">this</span>.$viewer.camera.getPickRay(movement.position);</span><br><span class="line">  <span class="keyword">let</span> position = <span class="keyword">this</span>.$viewer.scene.globe.pick(ray, <span class="keyword">this</span>.$viewer.scene);</span><br><span class="line">  <span class="built_in">console</span>.log(position);</span><br><span class="line">&#125;, Cesium.ScreenSpaceEventType.LEFT_CLICK);</span><br></pre></td></tr></table></figure><h3 id="形状和体积（Shapes-and-Volumes）"><a href="#形状和体积（Shapes-and-Volumes）" class="headerlink" title="形状和体积（Shapes and Volumes）"></a>形状和体积（Shapes and Volumes）</h3><p>之前介绍过，<code>Cesium</code> 加载点线面矢量数据可以通过 <code>Entity API</code> 或 <code>Primitive API</code> 实现，而无论我们怎样定义实体实例和几何，所有形状和物体都有一组共同的属性来控制它们的外观。</p><ol><li><code>fill</code></li></ol><blockquote><p>布尔型，用于指定目标形状是否被填充，默认为 <code>true</code></p></blockquote><ol start="2"><li><code>outline</code></li></ol><blockquote><p>布尔型，用于指定是否绘制形状的边缘， 默认为 <code>false</code></p></blockquote><ol start="3"><li><code>material</code></li></ol><blockquote><p>如果 <code>fill</code> 为 <code>true</code>，该属性可以控制填充的材质类型，默认为 <code>Color.WHITE</code></p></blockquote><p>具体形状的外观属性可通过官方 <code>API</code> 中的 <code>Cesium.Entity</code> 下各形状的 <code>Type</code> 属性查看。</p><p><a href="http://cesium.xin/cesium/cn/Documentation1.62/Entity.html?classFilter=Entity" target="_blank" rel="noopener">Cesium.Entity API</a></p><p><img src="http://images.akashi.org.cn/FsJLRGzYgBQOTdEV7mZt8bGqnOBi" alt="Entity API"></p><h4 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h4><p>例如我们创建一个蓝色半透明的椭圆实例，默认 <code>fill</code> 为 <code>true</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> entity = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  position: Cesium.Cartesian3.fromDegrees(<span class="number">-103.0</span>, <span class="number">40.0</span>),</span><br><span class="line">  ellipse: &#123;</span><br><span class="line">    semiMinorAxis: <span class="number">250000.0</span>,</span><br><span class="line">    semiMajorAxis: <span class="number">400000.0</span>,</span><br><span class="line">    material: Cesium.Color.BLUE.withAlpha(<span class="number">0.5</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$viewer.zoomTo(entity);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FvOloMU9w5r4iBKF9i_HOovlLHjB" alt="半透明材质"></p><p>然后改变其材质属性，实现各种不同的效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 棋盘材质</span></span><br><span class="line">entity.ellipse.material = <span class="keyword">new</span> Cesium.CheckerboardMaterialProperty(&#123;</span><br><span class="line">  evenColor: Cesium.Color.WHITE,</span><br><span class="line">  oddColor: Cesium.Color.BLACK,</span><br><span class="line">  repeat: <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">4</span>, <span class="number">4</span>),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FupDZBF4Im7pkivmamfh7fHbIOlU" alt="棋盘材质"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条纹材质</span></span><br><span class="line">entity.ellipse.material = <span class="keyword">new</span> Cesium.StripeMaterialProperty(&#123;</span><br><span class="line">  evenColor: Cesium.Color.WHITE,</span><br><span class="line">  oddColor: Cesium.Color.BLACK,</span><br><span class="line">  repeat: <span class="number">32</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FkqWGGkd5WrgKfLwGGvCE60cjGny" alt="条纹材质"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 网格材质</span></span><br><span class="line">entity.ellipse.material = <span class="keyword">new</span> Cesium.GridMaterialProperty(&#123;</span><br><span class="line">  color: Cesium.Color.YELLOW,</span><br><span class="line">  cellAlpha: <span class="number">0.2</span>,</span><br><span class="line">  lineCount: <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">8</span>, <span class="number">8</span>),</span><br><span class="line">  lineThickness: <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">2.0</span>, <span class="number">2.0</span>),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fm4NviTfzBD-7c6X9EeO8_pKmxKz" alt="网络材质"></p><h4 id="轮廓"><a href="#轮廓" class="headerlink" title="轮廓"></a>轮廓</h4><p><code>outline</code> 没有相应的材料，而是依赖于两个独立的 <code>outlineColor</code> 和 <code>outlineWidth</code> 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entity.ellipse.fill = <span class="literal">false</span>;</span><br><span class="line">entity.ellipse.outline = <span class="literal">true</span>;</span><br><span class="line">entity.ellipse.outlineColor = Cesium.Color.YELLOW;</span><br><span class="line">entity.ellipse.outlineWidth = <span class="number">5.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$viewer.zoomTo(entity);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fko4Cy-WuQdrI7KhgXexPIflgt_e" alt="轮廓"></p><h4 id="高度与挤压"><a href="#高度与挤压" class="headerlink" title="高度与挤压"></a>高度与挤压</h4><blockquote><p>覆盖在地球上的所有形状，当前是圆、椭圆、多边形和矩形，也可以放置在海拔高度或挤压成一个物体。在这两种情况下，形状或物体仍然符合其下方的地球曲率。</p></blockquote><p>当需要物体距离地面一定高度的时候，可以在相应的图形对象上设置高度属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> polygon = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"正方形"</span>,</span><br><span class="line">  id: <span class="string">"square"</span>,</span><br><span class="line">  polygon: &#123;</span><br><span class="line">    hierarchy: Cesium.Cartesian3.fromDegreesArray([...]),</span><br><span class="line">    material: Cesium.Color.RED.withAlpha(<span class="number">0.5</span>),</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.BLACK,</span><br><span class="line">    height: <span class="number">250000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$viewer.zoomTo(polygon);</span><br></pre></td></tr></table></figure><p>在侧面可以看到物体就有了高度。</p><p><img src="http://images.akashi.org.cn/Fo0tcgymZDEO7Xcqj1TLzXwHI8bO" alt="设置高度"></p><p>将形状挤压成物体同样，需要设置 <code>extrudedHeight</code> 属性:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> polygon = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"正方形"</span>,</span><br><span class="line">  id: <span class="string">"square"</span>,</span><br><span class="line">  polygon: &#123;</span><br><span class="line">    hierarchy: Cesium.Cartesian3.fromDegreesArray([...]),</span><br><span class="line">    material: Cesium.Color.RED.withAlpha(<span class="number">0.5</span>),</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.BLACK,</span><br><span class="line">    height: <span class="number">200000</span>,</span><br><span class="line">    extrudedHeight: <span class="number">250000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FveQPouieVvc2NvX-6iQn6wohCss" alt="平面挤压为物体"></p><p>注意：意外发现当同时使用 <code>height</code> 与 <code>extrudedHeight</code> 并且值相同时，<code>extrudedHeight</code> 不会生效。</p><h3 id="三维图形（3D-models）"><a href="#三维图形（3D-models）" class="headerlink" title="三维图形（3D models）"></a>三维图形（3D models）</h3><blockquote><p><code>CesiumJS</code> 支持通过 <code>glTF</code>（运行时<code>asset format</code>）创建 <code>3D</code> 模型。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> position = Cesium.Cartesian3.fromDegrees(</span><br><span class="line">  <span class="number">-75.62808254394531</span>,</span><br><span class="line">  <span class="number">40.02824946899414</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">let</span> modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(position);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> heading = Cesium.Math.toRadians(<span class="number">10.0</span>);</span><br><span class="line"><span class="keyword">let</span> pitch = Cesium.Math.toRadians(<span class="number">-10.0</span>);</span><br><span class="line"><span class="keyword">let</span> roll = Cesium.Math.toRadians(<span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> headingPitchRoll = <span class="keyword">new</span> Cesium.HeadingPitchRoll(heading, pitch, roll);</span><br><span class="line"><span class="keyword">let</span> orientation = <span class="keyword">new</span> Cesium.Transforms.headingPitchRollQuaternion(</span><br><span class="line">  position,</span><br><span class="line">  headingPitchRoll</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> carModel = <span class="keyword">this</span>.$viewer.scene.primitives.add(</span><br><span class="line">  <span class="keyword">new</span> Cesium.Model.fromGltf(&#123;</span><br><span class="line">    <span class="comment">//异步的加载模型</span></span><br><span class="line">    url: <span class="string">"model3D/Truck.glb"</span>,</span><br><span class="line">    scale: <span class="number">3.0</span>, <span class="comment">//缩放</span></span><br><span class="line">    position: position,</span><br><span class="line">    orientation: orientation,</span><br><span class="line">    modelMatrix: modelMatrix, <span class="comment">//模型矩阵</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$viewer.scene.camera.setView(&#123;</span><br><span class="line">  destination: <span class="keyword">new</span> Cesium.Cartesian3.fromDegrees(</span><br><span class="line">    <span class="number">-75.62808254394531</span>,</span><br><span class="line">    <span class="number">40.02624946899414</span>,</span><br><span class="line">    <span class="number">50.0</span></span><br><span class="line">  ),</span><br><span class="line">  orientation: &#123;</span><br><span class="line">    heading,</span><br><span class="line">    pitch,</span><br><span class="line">    roll,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fqp5XCusD4NtgLzIJit1jPQZV0vl" alt="3D Model(Primitive)"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> position = Cesium.Cartesian3.fromDegrees(<span class="number">-123.0744619</span>, <span class="number">44.0503706</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> heading = Cesium.Math.toRadians(<span class="number">135</span>);</span><br><span class="line"><span class="keyword">let</span> pitch = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> roll = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> hpr = <span class="keyword">new</span> Cesium.HeadingPitchRoll(heading, pitch, roll);</span><br><span class="line"><span class="keyword">let</span> orientation = Cesium.Transforms.headingPitchRollQuaternion(</span><br><span class="line">  position,</span><br><span class="line">  hpr</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> entity = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"J15"</span>,</span><br><span class="line">  position: position,</span><br><span class="line">  orientation: orientation,</span><br><span class="line">  model: &#123;</span><br><span class="line">    uri: <span class="string">"model3D/J15.glb"</span>,</span><br><span class="line">    minimumPixelSize: <span class="number">128</span>,</span><br><span class="line">    maximumScale: <span class="number">20000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$viewer.trackedEntity = entity;</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fi4sUKzbxiqX7mEOMozvPmvXptgn" alt="3D models"></p><p>默认情况下，模型竖直放置、并且面向东面。可以指定四元组（<code>Quaternion</code>）给 <code>Entity.orientation</code> 属性，以改变放置的方向。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//位置</span></span><br><span class="line"><span class="keyword">let</span> position = Cesium.Cartesian3.fromDegrees(<span class="number">-123.0744619</span>, <span class="number">44.0503706</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绕垂直于地心的轴旋转</span></span><br><span class="line"><span class="keyword">let</span> heading = Cesium.Math.toRadians(<span class="number">45.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绕纬度线旋转</span></span><br><span class="line"><span class="keyword">let</span> pitch = Cesium.Math.toRadians(<span class="number">15.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绕经度线旋转</span></span><br><span class="line"><span class="keyword">let</span> roll = Cesium.Math.toRadians(<span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> orientation = Cesium.Transforms.headingPitchRollQuaternion(position, heading, pitch, roll);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fjz0QFcnruF5ldtVBQ-vQQGqjQMt" alt="HeadingPitchRoll"></p><p><code>heading</code>（<code>yaw</code>）、<code>pitch</code>、<code>roll</code> 对应了绕 <code>Z</code>（垂直轴）、<code>Y</code>（维度方向）、<code>X</code>（经度方向）进行旋转，正数表示顺时针旋转（由于相对运动，在浏览器上看起来是地球在逆时针旋转），可以参考下图理解（人面向北面，摇头<code>heading</code>、点头<code>pitch</code>、歪头<code>roll</code>）。</p><h3 id="Entity-API"><a href="#Entity-API" class="headerlink" title="Entity API"></a>Entity API</h3><blockquote><p>Entity 实例将多种形式的可视化聚集到单个高级对象中。通过手动创建并将实体添加到 <code>Viewer.entities</code> 中。</p></blockquote><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>box</td><td>BoxGraphics</td><td>与该实体关联的框。</td></tr><tr><td>corridor</td><td>CorridorGraphics</td><td>与该实体关联的走廊。</td></tr><tr><td>cylinder</td><td>CylinderGraphics</td><td>与该实体关联的圆柱体。</td></tr><tr><td>ellipse</td><td>EllipseGraphics</td><td>与该实体关联的椭圆。</td></tr><tr><td>ellipsoid</td><td>EllipsoidGraphics</td><td>与该实体关联的椭球。</td></tr><tr><td>label</td><td>LabelGraphics</td><td>与该实体关联的options.label。</td></tr><tr><td>model</td><td>ModelGraphics</td><td>与该实体关联的模型。</td></tr><tr><td>path</td><td>PathGraphics</td><td>与该实体关联的路径。</td></tr><tr><td>plane</td><td>PlaneGraphics</td><td>与该实体关联的平面。</td></tr><tr><td>point</td><td>PointGraphics</td><td>与该实体关联的点。</td></tr><tr><td>polygon</td><td>PolygonGraphics</td><td>与该实体关联的多边形。</td></tr><tr><td>polyline</td><td>PolylineGraphics</td><td>与该实体关联的折线。</td></tr><tr><td>rectangle</td><td>RectangleGraphics</td><td>与该实体关联的矩形。</td></tr><tr><td>wall</td><td>WallGraphics</td><td>与该实体关联的墙。</td></tr></tbody></table><h4 id="Box"><a href="#Box" class="headerlink" title="Box"></a><code>Box</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 立方体</span></span><br><span class="line"><span class="keyword">let</span> blueBox = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Blue box"</span>,</span><br><span class="line">  <span class="comment">//中心的位置</span></span><br><span class="line">  position: Cesium.Cartesian3.fromDegrees(<span class="number">-114.0</span>, <span class="number">40.0</span>, <span class="number">300000.0</span>),</span><br><span class="line">  box: &#123;</span><br><span class="line">    <span class="comment">//长宽高</span></span><br><span class="line">    dimensions: <span class="keyword">new</span> Cesium.Cartesian3(<span class="number">400000.0</span>, <span class="number">300000.0</span>, <span class="number">500000.0</span>),</span><br><span class="line">    material: Cesium.Color.BLUE.withAlpha(<span class="number">0.5</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> redBox = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Red box with black outline"</span>,</span><br><span class="line">  position: Cesium.Cartesian3.fromDegrees(<span class="number">-107.0</span>, <span class="number">40.0</span>, <span class="number">300000.0</span>),</span><br><span class="line">  box: &#123;</span><br><span class="line">    dimensions: <span class="keyword">new</span> Cesium.Cartesian3(<span class="number">400000.0</span>, <span class="number">300000.0</span>, <span class="number">500000.0</span>),</span><br><span class="line">    material: Cesium.Color.RED,</span><br><span class="line">    outline: <span class="literal">true</span>,  <span class="comment">//显示轮廓</span></span><br><span class="line">    outlineColor: Cesium.Color.BLACK,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> outlineOnly = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Yellow box outline"</span>,</span><br><span class="line">  position: Cesium.Cartesian3.fromDegrees(<span class="number">-100.0</span>, <span class="number">40.0</span>, <span class="number">300000.0</span>),</span><br><span class="line">  box: &#123;</span><br><span class="line">    dimensions: <span class="keyword">new</span> Cesium.Cartesian3(<span class="number">400000.0</span>, <span class="number">300000.0</span>, <span class="number">500000.0</span>),</span><br><span class="line">    fill: <span class="literal">false</span>, <span class="comment">//不显示填充</span></span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.YELLOW,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$viewer.zoomTo(<span class="keyword">this</span>.$viewer.entities);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fp1om-38SxhZuc0M7iQzzeWeMvBP" alt="box"></p><h4 id="Ellipse"><a href="#Ellipse" class="headerlink" title="Ellipse"></a><code>Ellipse</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 椭圆</span></span><br><span class="line"><span class="comment">// 浮空的绿色圆形</span></span><br><span class="line"><span class="keyword">let</span> greenCircle = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  position: Cesium.Cartesian3.fromDegrees(<span class="number">-111.0</span>, <span class="number">40.0</span>, <span class="number">150000.0</span>),</span><br><span class="line">  name: <span class="string">"Green circle at height"</span>,</span><br><span class="line">  ellipse: &#123;</span><br><span class="line">    semiMinorAxis: <span class="number">300000.0</span>,</span><br><span class="line">    semiMajorAxis: <span class="number">300000.0</span>,</span><br><span class="line">    height: <span class="number">200000.0</span>, <span class="comment">//浮空</span></span><br><span class="line">    material: Cesium.Color.GREEN,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红色椭圆形，位于地表，带轮廓</span></span><br><span class="line"><span class="keyword">let</span> redEllipse = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  <span class="comment">//不带高度</span></span><br><span class="line">  position: Cesium.Cartesian3.fromDegrees(<span class="number">-103.0</span>, <span class="number">40.0</span>),</span><br><span class="line">  name: <span class="string">"Red ellipse on surface with outline"</span>,</span><br><span class="line">  ellipse: &#123;</span><br><span class="line">    semiMinorAxis: <span class="number">250000.0</span>,</span><br><span class="line">    semiMajorAxis: <span class="number">400000.0</span>,</span><br><span class="line">    material: Cesium.Color.RED.withAlpha(<span class="number">0.5</span>),</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.RED,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//蓝色椭圆柱，旋转了角度</span></span><br><span class="line"><span class="keyword">let</span> blueEllipse = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  position: Cesium.Cartesian3.fromDegrees(<span class="number">-95.0</span>, <span class="number">40.0</span>, <span class="number">100000.0</span>),</span><br><span class="line">  name: <span class="string">"Blue translucent, rotated, and extruded ellipse"</span>,</span><br><span class="line">  ellipse: &#123;</span><br><span class="line">    semiMinorAxis: <span class="number">150000.0</span>,</span><br><span class="line">    semiMajorAxis: <span class="number">300000.0</span>,</span><br><span class="line">    extrudedHeight: <span class="number">200000.0</span>, <span class="comment">//拉伸</span></span><br><span class="line">    rotation: Cesium.Math.toRadians(<span class="number">45</span>), <span class="comment">//旋转</span></span><br><span class="line">    material: Cesium.Color.BLUE.withAlpha(<span class="number">0.7</span>),</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$viewer.zoomTo(<span class="keyword">this</span>.$viewer.entities);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fv_7mzukP8t8Oq2Nuc2R5yNoBpBm" alt="ellipse"></p><h4 id="Corridor"><a href="#Corridor" class="headerlink" title="Corridor"></a><code>Corridor</code></h4><blockquote><p>走廊。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// Corridor</span></span><br><span class="line"><span class="keyword">let</span> redCorridor = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Red corridor on surface with rounded corners and outline"</span>,</span><br><span class="line">  corridor: &#123;</span><br><span class="line">    positions: Cesium.Cartesian3.fromDegreesArray([</span><br><span class="line">      <span class="number">-100.0</span>,</span><br><span class="line">      <span class="number">40.0</span>,</span><br><span class="line">      <span class="number">-105.0</span>,</span><br><span class="line">      <span class="number">40.0</span>,</span><br><span class="line">      <span class="number">-105.0</span>,</span><br><span class="line">      <span class="number">35.0</span>,</span><br><span class="line">    ]),</span><br><span class="line">    width: <span class="number">200000.0</span>,</span><br><span class="line">    material: Cesium.Color.RED.withAlpha(<span class="number">0.5</span>),</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.RED,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greenCorridor = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Green corridor at height with mitered corners"</span>,</span><br><span class="line">  corridor: &#123;</span><br><span class="line">    positions: Cesium.Cartesian3.fromDegreesArray([</span><br><span class="line">      <span class="number">-90.0</span>,</span><br><span class="line">      <span class="number">40.0</span>,</span><br><span class="line">      <span class="number">-95.0</span>,</span><br><span class="line">      <span class="number">40.0</span>,</span><br><span class="line">      <span class="number">-95.0</span>,</span><br><span class="line">      <span class="number">35.0</span>,</span><br><span class="line">    ]),</span><br><span class="line">    height: <span class="number">100000.0</span>,</span><br><span class="line">    width: <span class="number">200000.0</span>,</span><br><span class="line">    cornerType: Cesium.CornerType.MITERED,</span><br><span class="line">    material: Cesium.Color.GREEN,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> blueCorridor = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Blue extruded corridor with beveled corners and outline"</span>,</span><br><span class="line">  corridor: &#123;</span><br><span class="line">    positions: Cesium.Cartesian3.fromDegreesArray([</span><br><span class="line">      <span class="number">-80.0</span>,</span><br><span class="line">      <span class="number">40.0</span>,</span><br><span class="line">      <span class="number">-85.0</span>,</span><br><span class="line">      <span class="number">40.0</span>,</span><br><span class="line">      <span class="number">-85.0</span>,</span><br><span class="line">      <span class="number">35.0</span>,</span><br><span class="line">    ]),</span><br><span class="line">    height: <span class="number">200000.0</span>,</span><br><span class="line">    extrudedHeight: <span class="number">100000.0</span>,</span><br><span class="line">    width: <span class="number">200000.0</span>,</span><br><span class="line">    cornerType: Cesium.CornerType.BEVELED,</span><br><span class="line">    material: Cesium.Color.BLUE.withAlpha(<span class="number">0.5</span>),</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.BLUE,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$viewer.zoomTo(<span class="keyword">this</span>.$viewer.entities);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fku5Q4eKL8DmJmECTp490UWNel-B" alt="corridor"></p><h4 id="Cylinder"><a href="#Cylinder" class="headerlink" title="Cylinder"></a><code>Cylinder</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//圆柱和圆锥 Cylinder Cones</span></span><br><span class="line"><span class="keyword">let</span> greenCylinder = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Green cylinder with black outline"</span>,</span><br><span class="line">  position: Cesium.Cartesian3.fromDegrees(<span class="number">-100.0</span>, <span class="number">40.0</span>, <span class="number">200000.0</span>),</span><br><span class="line">  cylinder: &#123;</span><br><span class="line">    <span class="comment">//圆柱</span></span><br><span class="line">    length: <span class="number">400000.0</span>,</span><br><span class="line">    topRadius: <span class="number">200000.0</span>,</span><br><span class="line">    bottomRadius: <span class="number">200000.0</span>,</span><br><span class="line">    material: Cesium.Color.GREEN,</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.DARK_GREEN,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> redCone = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Red cone"</span>,</span><br><span class="line">  position: Cesium.Cartesian3.fromDegrees(<span class="number">-105.0</span>, <span class="number">40.0</span>, <span class="number">200000.0</span>),</span><br><span class="line">  cylinder: &#123;</span><br><span class="line">    <span class="comment">//圆锥</span></span><br><span class="line">    length: <span class="number">400000.0</span>,</span><br><span class="line">    topRadius: <span class="number">0.0</span>,</span><br><span class="line">    bottomRadius: <span class="number">200000.0</span>,</span><br><span class="line">    material: Cesium.Color.RED,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$viewer.zoomTo(<span class="keyword">this</span>.$viewer.entities);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FtSOiWZUrIRaqzWZWAOyaPHme4Yd" alt="cylinder"></p><h4 id="Polygon"><a href="#Polygon" class="headerlink" title="Polygon"></a><code>Polygon</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多边形 Polygon</span></span><br><span class="line"><span class="keyword">let</span> redPolygon = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"贴着地表的多边形"</span>,</span><br><span class="line">  polygon: &#123;</span><br><span class="line">    hierarchy: Cesium.Cartesian3.fromDegreesArray([</span><br><span class="line">      <span class="number">-115.0</span>,</span><br><span class="line">      <span class="number">37.0</span>,</span><br><span class="line">      <span class="number">-115.0</span>,</span><br><span class="line">      <span class="number">32.0</span>,</span><br><span class="line">      <span class="number">-107.0</span>,</span><br><span class="line">      <span class="number">33.0</span>,</span><br><span class="line">      <span class="number">-102.0</span>,</span><br><span class="line">      <span class="number">31.0</span>,</span><br><span class="line">      <span class="number">-102.0</span>,</span><br><span class="line">      <span class="number">35.0</span>,</span><br><span class="line">    ]),</span><br><span class="line">    material: Cesium.Color.RED,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greenPolygon = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"绿色拉伸多边形"</span>,</span><br><span class="line">  polygon: &#123;</span><br><span class="line">    hierarchy: Cesium.Cartesian3.fromDegreesArray([</span><br><span class="line">      <span class="number">-108.0</span>,</span><br><span class="line">      <span class="number">42.0</span>,</span><br><span class="line">      <span class="number">-100.0</span>,</span><br><span class="line">      <span class="number">42.0</span>,</span><br><span class="line">      <span class="number">-104.0</span>,</span><br><span class="line">      <span class="number">40.0</span>,</span><br><span class="line">    ]),</span><br><span class="line">    extrudedHeight: <span class="number">500000.0</span>,</span><br><span class="line">    material: Cesium.Color.GREEN,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> orangePolygon = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"每个顶点具有不同拉伸高度的橘色多边形"</span>,</span><br><span class="line">  polygon: &#123;</span><br><span class="line">    hierarchy: Cesium.Cartesian3.fromDegreesArrayHeights([</span><br><span class="line">      <span class="number">-108.0</span>,</span><br><span class="line">      <span class="number">25.0</span>,</span><br><span class="line">      <span class="number">100000</span>,</span><br><span class="line">      <span class="number">-100.0</span>,</span><br><span class="line">      <span class="number">25.0</span>,</span><br><span class="line">      <span class="number">100000</span>,</span><br><span class="line">      <span class="number">-100.0</span>,</span><br><span class="line">      <span class="number">30.0</span>,</span><br><span class="line">      <span class="number">100000</span>,</span><br><span class="line">      <span class="number">-108.0</span>,</span><br><span class="line">      <span class="number">30.0</span>,</span><br><span class="line">      <span class="number">300000</span>,</span><br><span class="line">    ]),</span><br><span class="line">    extrudedHeight: <span class="number">0</span>,</span><br><span class="line">    perPositionHeight: <span class="literal">true</span>,</span><br><span class="line">    material: Cesium.Color.ORANGE,</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.BLACK,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bluePolygon = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"具有挖空效果的蓝色多边形"</span>,</span><br><span class="line">  polygon: &#123;</span><br><span class="line">    hierarchy: &#123;</span><br><span class="line">      positions: Cesium.Cartesian3.fromDegreesArray([</span><br><span class="line">        <span class="number">-99.0</span>,</span><br><span class="line">        <span class="number">30.0</span>,</span><br><span class="line">        <span class="number">-85.0</span>,</span><br><span class="line">        <span class="number">30.0</span>,</span><br><span class="line">        <span class="number">-85.0</span>,</span><br><span class="line">        <span class="number">40.0</span>,</span><br><span class="line">        <span class="number">-99.0</span>,</span><br><span class="line">        <span class="number">40.0</span>,</span><br><span class="line">      ]),</span><br><span class="line">      holes: [</span><br><span class="line">        &#123;</span><br><span class="line">          positions: Cesium.Cartesian3.fromDegreesArray([</span><br><span class="line">            <span class="number">-97.0</span>,</span><br><span class="line">            <span class="number">31.0</span>,</span><br><span class="line">            <span class="number">-97.0</span>,</span><br><span class="line">            <span class="number">39.0</span>,</span><br><span class="line">            <span class="number">-87.0</span>,</span><br><span class="line">            <span class="number">39.0</span>,</span><br><span class="line">            <span class="number">-87.0</span>,</span><br><span class="line">            <span class="number">31.0</span>,</span><br><span class="line">          ]),</span><br><span class="line">          holes: [</span><br><span class="line">            &#123;</span><br><span class="line">              positions: Cesium.Cartesian3.fromDegreesArray([</span><br><span class="line">                <span class="number">-95.0</span>,</span><br><span class="line">                <span class="number">33.0</span>,</span><br><span class="line">                <span class="number">-89.0</span>,</span><br><span class="line">                <span class="number">33.0</span>,</span><br><span class="line">                <span class="number">-89.0</span>,</span><br><span class="line">                <span class="number">37.0</span>,</span><br><span class="line">                <span class="number">-95.0</span>,</span><br><span class="line">                <span class="number">37.0</span>,</span><br><span class="line">              ]),</span><br><span class="line">              holes: [</span><br><span class="line">                &#123;</span><br><span class="line">                  positions: Cesium.Cartesian3.fromDegreesArray([</span><br><span class="line">                    <span class="number">-93.0</span>,</span><br><span class="line">                    <span class="number">34.0</span>,</span><br><span class="line">                    <span class="number">-91.0</span>,</span><br><span class="line">                    <span class="number">34.0</span>,</span><br><span class="line">                    <span class="number">-91.0</span>,</span><br><span class="line">                    <span class="number">36.0</span>,</span><br><span class="line">                    <span class="number">-93.0</span>,</span><br><span class="line">                    <span class="number">36.0</span>,</span><br><span class="line">                  ]),</span><br><span class="line">                &#125;,</span><br><span class="line">              ],</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    material: Cesium.Color.BLUE,</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.BLACK,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$viewer.zoomTo(<span class="keyword">this</span>.$viewer.entities);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fh4fh6BUEKFuiqVsckdzc1mS0ITG" alt="polygon"></p><h4 id="Polylines"><a href="#Polylines" class="headerlink" title="Polylines"></a><code>Polylines</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Polylines</span></span><br><span class="line"><span class="keyword">let</span> redLine = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Red line on terrain"</span>,</span><br><span class="line">  polyline: &#123;</span><br><span class="line">    positions: Cesium.Cartesian3.fromDegreesArray([<span class="number">-75</span>, <span class="number">35</span>, <span class="number">-125</span>, <span class="number">35</span>]),</span><br><span class="line">    width: <span class="number">5</span>,</span><br><span class="line">    material: Cesium.Color.RED,</span><br><span class="line">    clampToGround: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">redLine.show = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greenRhumbLine = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Green rhumb line"</span>,</span><br><span class="line">  polyline: &#123;</span><br><span class="line">    positions: Cesium.Cartesian3.fromDegreesArray([<span class="number">-75</span>, <span class="number">35</span>, <span class="number">-125</span>, <span class="number">35</span>]),</span><br><span class="line">    width: <span class="number">5</span>,</span><br><span class="line">    arcType: Cesium.ArcType.RHUMB,</span><br><span class="line">    material: Cesium.Color.GREEN,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">greenRhumbLine.show = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> glowingLine = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Glowing blue line on the surface"</span>,</span><br><span class="line">  polyline: &#123;</span><br><span class="line">    positions: Cesium.Cartesian3.fromDegreesArray([<span class="number">-75</span>, <span class="number">37</span>, <span class="number">-125</span>, <span class="number">37</span>]),</span><br><span class="line">    width: <span class="number">10</span>,</span><br><span class="line">    material: <span class="keyword">new</span> Cesium.PolylineGlowMaterialProperty(&#123;</span><br><span class="line">      glowPower: <span class="number">0.2</span>,</span><br><span class="line">      taperPower: <span class="number">0.5</span>,</span><br><span class="line">      color: Cesium.Color.CORNFLOWERBLUE,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">glowingLine.show = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> orangeOutlined = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name:</span><br><span class="line">    <span class="string">"Orange line with black outline at height and following the surface"</span>,</span><br><span class="line">  polyline: &#123;</span><br><span class="line">    positions: Cesium.Cartesian3.fromDegreesArrayHeights([</span><br><span class="line">      <span class="number">-75</span>,</span><br><span class="line">      <span class="number">39</span>,</span><br><span class="line">      <span class="number">250000</span>,</span><br><span class="line">      <span class="number">-125</span>,</span><br><span class="line">      <span class="number">39</span>,</span><br><span class="line">      <span class="number">250000</span>,</span><br><span class="line">    ]),</span><br><span class="line">    width: <span class="number">5</span>,</span><br><span class="line">    material: <span class="keyword">new</span> Cesium.PolylineOutlineMaterialProperty(&#123;</span><br><span class="line">      color: Cesium.Color.ORANGE,</span><br><span class="line">      outlineWidth: <span class="number">2</span>,</span><br><span class="line">      outlineColor: Cesium.Color.BLACK,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">orangeOutlined.show = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> purpleArrow = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Purple straight arrow at height"</span>,</span><br><span class="line">  polyline: &#123;</span><br><span class="line">    positions: Cesium.Cartesian3.fromDegreesArrayHeights([</span><br><span class="line">      <span class="number">-75</span>,</span><br><span class="line">      <span class="number">43</span>,</span><br><span class="line">      <span class="number">500000</span>,</span><br><span class="line">      <span class="number">-125</span>,</span><br><span class="line">      <span class="number">43</span>,</span><br><span class="line">      <span class="number">500000</span>,</span><br><span class="line">    ]),</span><br><span class="line">    width: <span class="number">10</span>,</span><br><span class="line">    arcType: Cesium.ArcType.NONE,</span><br><span class="line">    material: <span class="keyword">new</span> Cesium.PolylineArrowMaterialProperty(</span><br><span class="line">      Cesium.Color.PURPLE</span><br><span class="line">    ),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">purpleArrow.show = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dashedLine = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Blue dashed line"</span>,</span><br><span class="line">  polyline: &#123;</span><br><span class="line">    positions: Cesium.Cartesian3.fromDegreesArrayHeights([</span><br><span class="line">      <span class="number">-75</span>,</span><br><span class="line">      <span class="number">45</span>,</span><br><span class="line">      <span class="number">500000</span>,</span><br><span class="line">      <span class="number">-125</span>,</span><br><span class="line">      <span class="number">45</span>,</span><br><span class="line">      <span class="number">500000</span>,</span><br><span class="line">    ]),</span><br><span class="line">    width: <span class="number">4</span>,</span><br><span class="line">    material: <span class="keyword">new</span> Cesium.PolylineDashMaterialProperty(&#123;</span><br><span class="line">      color: Cesium.Color.CYAN,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">dashedLine.show = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$viewer.zoomTo(<span class="keyword">this</span>.$viewer.entities);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FtMPTHJ2AW7aa8qyYSCmHs4t2lNr" alt="polyline"></p><h4 id="Polyline-Volumes"><a href="#Polyline-Volumes" class="headerlink" title="Polyline Volumes"></a><code>Polyline Volumes</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Polyline Volumes</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeCircle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> positions = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">360</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> radians = Cesium.Math.toRadians(i);</span><br><span class="line">    positions.push(</span><br><span class="line">      <span class="keyword">new</span> Cesium.Cartesian2(</span><br><span class="line">        radius * <span class="built_in">Math</span>.cos(radians),</span><br><span class="line">        radius * <span class="built_in">Math</span>.sin(radians)</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> positions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeStar</span>(<span class="params">arms, rOuter, rInner</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> angle = <span class="built_in">Math</span>.PI / arms;</span><br><span class="line">  <span class="keyword">var</span> length = <span class="number">2</span> * arms;</span><br><span class="line">  <span class="keyword">var</span> positions = <span class="keyword">new</span> <span class="built_in">Array</span>(length);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> r = i % <span class="number">2</span> === <span class="number">0</span> ? rOuter : rInner;</span><br><span class="line">    positions[i] = <span class="keyword">new</span> Cesium.Cartesian2(</span><br><span class="line">      <span class="built_in">Math</span>.cos(i * angle) * r,</span><br><span class="line">      <span class="built_in">Math</span>.sin(i * angle) * r</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> positions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> redTube = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Red tube with rounded corners"</span>,</span><br><span class="line">  polylineVolume: &#123;</span><br><span class="line">    positions: Cesium.Cartesian3.fromDegreesArray([</span><br><span class="line">      <span class="number">-85.0</span>,</span><br><span class="line">      <span class="number">32.0</span>,</span><br><span class="line">      <span class="number">-85.0</span>,</span><br><span class="line">      <span class="number">36.0</span>,</span><br><span class="line">      <span class="number">-89.0</span>,</span><br><span class="line">      <span class="number">36.0</span>,</span><br><span class="line">    ]),</span><br><span class="line">    shape: computeCircle(<span class="number">60000.0</span>),</span><br><span class="line">    material: Cesium.Color.RED,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greenBox = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Green box with beveled corners and outline"</span>,</span><br><span class="line">  polylineVolume: &#123;</span><br><span class="line">    positions: Cesium.Cartesian3.fromDegreesArrayHeights([</span><br><span class="line">      <span class="number">-90.0</span>,</span><br><span class="line">      <span class="number">32.0</span>,</span><br><span class="line">      <span class="number">0.0</span>,</span><br><span class="line">      <span class="number">-90.0</span>,</span><br><span class="line">      <span class="number">36.0</span>,</span><br><span class="line">      <span class="number">100000.0</span>,</span><br><span class="line">      <span class="number">-94.0</span>,</span><br><span class="line">      <span class="number">36.0</span>,</span><br><span class="line">      <span class="number">0.0</span>,</span><br><span class="line">    ]),</span><br><span class="line">    shape: [</span><br><span class="line">      <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">-50000</span>, <span class="number">-50000</span>),</span><br><span class="line">      <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">50000</span>, <span class="number">-50000</span>),</span><br><span class="line">      <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">50000</span>, <span class="number">50000</span>),</span><br><span class="line">      <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">-50000</span>, <span class="number">50000</span>),</span><br><span class="line">    ],</span><br><span class="line">    cornerType: Cesium.CornerType.BEVELED,</span><br><span class="line">    material: Cesium.Color.GREEN,</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.BLACK,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> blueStar = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Blue star with mitered corners and outline"</span>,</span><br><span class="line">  polylineVolume: &#123;</span><br><span class="line">    positions: Cesium.Cartesian3.fromDegreesArrayHeights([</span><br><span class="line">      <span class="number">-95.0</span>,</span><br><span class="line">      <span class="number">32.0</span>,</span><br><span class="line">      <span class="number">0.0</span>,</span><br><span class="line">      <span class="number">-95.0</span>,</span><br><span class="line">      <span class="number">36.0</span>,</span><br><span class="line">      <span class="number">100000.0</span>,</span><br><span class="line">      <span class="number">-99.0</span>,</span><br><span class="line">      <span class="number">36.0</span>,</span><br><span class="line">      <span class="number">200000.0</span>,</span><br><span class="line">    ]),</span><br><span class="line">    shape: computeStar(<span class="number">7</span>, <span class="number">70000</span>, <span class="number">50000</span>),</span><br><span class="line">    cornerType: Cesium.CornerType.MITERED,</span><br><span class="line">    material: Cesium.Color.BLUE,</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.BLACK,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$viewer.zoomTo(<span class="keyword">this</span>.$viewer.entities);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FpHyXntnj1RkRexHNbFKapzgYxFi" alt="Polyline Volumes"></p><h4 id="Rectangle"><a href="#Rectangle" class="headerlink" title="Rectangle"></a><code>Rectangle</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rectangle</span></span><br><span class="line"><span class="comment">//红色矩形</span></span><br><span class="line"><span class="keyword">let</span> redRectangle = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Red translucent rectangle with outline"</span>,</span><br><span class="line">  rectangle: &#123;</span><br><span class="line">    coordinates: Cesium.Rectangle.fromDegrees(<span class="number">-110.0</span>, <span class="number">20.0</span>, <span class="number">-80.0</span>, <span class="number">25.0</span>),</span><br><span class="line">    material: Cesium.Color.RED.withAlpha(<span class="number">0.5</span>),</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.RED,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绿色旋转、拉伸的矩形</span></span><br><span class="line"><span class="keyword">let</span> greenRectangle = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Green translucent, rotated, and extruded rectangle"</span>,</span><br><span class="line">  rectangle: &#123;</span><br><span class="line">    coordinates: Cesium.Rectangle.fromDegrees(<span class="number">-100.0</span>, <span class="number">30.0</span>, <span class="number">-90.0</span>, <span class="number">40.0</span>),</span><br><span class="line">    material: Cesium.Color.GREEN.withAlpha(<span class="number">0.5</span>),</span><br><span class="line">    rotation: Cesium.Math.toRadians(<span class="number">45</span>),</span><br><span class="line">    extrudedHeight: <span class="number">300000.0</span>,</span><br><span class="line">    height: <span class="number">100000.0</span>,</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.GREEN,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$viewer.zoomTo(<span class="keyword">this</span>.$viewer.entities);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FjvCfNNzuasoWcdAYz775CO9-5R6" alt="rectangle"></p><h4 id="Sphere-Ellipsoid"><a href="#Sphere-Ellipsoid" class="headerlink" title="Sphere Ellipsoid"></a><code>Sphere Ellipsoid</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sphere Ellipsoid</span></span><br><span class="line"><span class="keyword">let</span> blueEllipsoid = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Blue ellipsoid"</span>,</span><br><span class="line">  position: Cesium.Cartesian3.fromDegrees(<span class="number">-114.0</span>, <span class="number">40.0</span>, <span class="number">300000.0</span>),</span><br><span class="line">  ellipsoid: &#123;</span><br><span class="line">    <span class="comment">//可以指定三个轴的半径</span></span><br><span class="line">    radii: <span class="keyword">new</span> Cesium.Cartesian3(<span class="number">200000.0</span>, <span class="number">200000.0</span>, <span class="number">300000.0</span>),</span><br><span class="line">    material: Cesium.Color.BLUE,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> redSphere = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Red sphere with black outline"</span>,</span><br><span class="line">  position: Cesium.Cartesian3.fromDegrees(<span class="number">-107.0</span>, <span class="number">40.0</span>, <span class="number">300000.0</span>),</span><br><span class="line">  ellipsoid: &#123;</span><br><span class="line">    <span class="comment">//正球体</span></span><br><span class="line">    radii: <span class="keyword">new</span> Cesium.Cartesian3(<span class="number">300000.0</span>, <span class="number">300000.0</span>, <span class="number">300000.0</span>),</span><br><span class="line">    material: Cesium.Color.RED,</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.BLACK,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ellipsoidOutlineOnly = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Yellow ellipsoid outline"</span>,</span><br><span class="line">  position: Cesium.Cartesian3.fromDegrees(<span class="number">-100.0</span>, <span class="number">40.0</span>, <span class="number">300000.0</span>),</span><br><span class="line">  ellipsoid: &#123;</span><br><span class="line">    radii: <span class="keyword">new</span> Cesium.Cartesian3(<span class="number">200000.0</span>, <span class="number">200000.0</span>, <span class="number">300000.0</span>),</span><br><span class="line">    fill: <span class="literal">false</span>,</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.YELLOW,</span><br><span class="line">    slicePartitions: <span class="number">24</span>, <span class="comment">//横向切割线</span></span><br><span class="line">    stackPartitions: <span class="number">36</span>, <span class="comment">//纵向切割线</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$viewer.zoomTo(<span class="keyword">this</span>.$viewer.entities);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FhOvzmTscLb5bg112xAMAR5k_1pI" alt="sphere"></p><h4 id="Wall"><a href="#Wall" class="headerlink" title="Wall"></a><code>Wall</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wall</span></span><br><span class="line"><span class="comment">//东西方向的横墙</span></span><br><span class="line"><span class="keyword">let</span> redWall = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Red wall at height"</span>,</span><br><span class="line">  wall: &#123;</span><br><span class="line">    positions: Cesium.Cartesian3.fromDegreesArrayHeights([</span><br><span class="line">      <span class="number">-115.0</span>,</span><br><span class="line">      <span class="number">44.0</span>,</span><br><span class="line">      <span class="number">200000.0</span>, <span class="comment">//坐标点</span></span><br><span class="line">      <span class="number">-90.0</span>,</span><br><span class="line">      <span class="number">44.0</span>,</span><br><span class="line">      <span class="number">200000.0</span>,</span><br><span class="line">    ]),</span><br><span class="line">    minimumHeights: [<span class="number">100000.0</span>, <span class="number">100000.0</span>], <span class="comment">//按坐标点的最小高度数组</span></span><br><span class="line">    material: Cesium.Color.RED,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//四边围墙</span></span><br><span class="line"><span class="keyword">let</span> greenWall = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Green wall from surface with outline"</span>,</span><br><span class="line">  wall: &#123;</span><br><span class="line">    positions: Cesium.Cartesian3.fromDegreesArrayHeights([</span><br><span class="line">      <span class="number">-107.0</span>,</span><br><span class="line">      <span class="number">43.0</span>,</span><br><span class="line">      <span class="number">100000.0</span>,</span><br><span class="line">      <span class="number">-97.0</span>,</span><br><span class="line">      <span class="number">43.0</span>,</span><br><span class="line">      <span class="number">100000.0</span>,</span><br><span class="line">      <span class="number">-97.0</span>,</span><br><span class="line">      <span class="number">40.0</span>,</span><br><span class="line">      <span class="number">100000.0</span>,</span><br><span class="line">      <span class="number">-107.0</span>,</span><br><span class="line">      <span class="number">40.0</span>,</span><br><span class="line">      <span class="number">100000.0</span>,</span><br><span class="line">      <span class="number">-107.0</span>,</span><br><span class="line">      <span class="number">43.0</span>,</span><br><span class="line">      <span class="number">100000.0</span>,</span><br><span class="line">    ]),</span><br><span class="line">    material: Cesium.Color.GREEN,</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.BLACK,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//曲折的墙</span></span><br><span class="line"><span class="keyword">let</span> blueWall = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">  name: <span class="string">"Blue wall with sawtooth heights and outline"</span>,</span><br><span class="line">  wall: &#123;</span><br><span class="line">    <span class="comment">//坐标点，不指定高度</span></span><br><span class="line">    positions: Cesium.Cartesian3.fromDegreesArray([</span><br><span class="line">      <span class="number">-115.0</span>,</span><br><span class="line">      <span class="number">50.0</span>,</span><br><span class="line">      <span class="number">-112.5</span>,</span><br><span class="line">      <span class="number">50.0</span>,</span><br><span class="line">      <span class="number">-110.0</span>,</span><br><span class="line">      <span class="number">50.0</span>,</span><br><span class="line">      <span class="number">-107.5</span>,</span><br><span class="line">      <span class="number">50.0</span>,</span><br><span class="line">      <span class="number">-105.0</span>,</span><br><span class="line">      <span class="number">50.0</span>,</span><br><span class="line">      <span class="number">-102.5</span>,</span><br><span class="line">      <span class="number">50.0</span>,</span><br><span class="line">      <span class="number">-100.0</span>,</span><br><span class="line">      <span class="number">50.0</span>,</span><br><span class="line">      <span class="number">-97.5</span>,</span><br><span class="line">      <span class="number">50.0</span>,</span><br><span class="line">      <span class="number">-95.0</span>,</span><br><span class="line">      <span class="number">50.0</span>,</span><br><span class="line">      <span class="number">-92.5</span>,</span><br><span class="line">      <span class="number">50.0</span>,</span><br><span class="line">      <span class="number">-90.0</span>,</span><br><span class="line">      <span class="number">50.0</span>,</span><br><span class="line">    ]),</span><br><span class="line">    maximumHeights: [</span><br><span class="line">      <span class="comment">//上高</span></span><br><span class="line">      <span class="number">100000</span>,</span><br><span class="line">      <span class="number">200000</span>,</span><br><span class="line">      <span class="number">100000</span>,</span><br><span class="line">      <span class="number">200000</span>,</span><br><span class="line">      <span class="number">100000</span>,</span><br><span class="line">      <span class="number">200000</span>,</span><br><span class="line">      <span class="number">100000</span>,</span><br><span class="line">      <span class="number">200000</span>,</span><br><span class="line">      <span class="number">100000</span>,</span><br><span class="line">      <span class="number">200000</span>,</span><br><span class="line">      <span class="number">100000</span>,</span><br><span class="line">    ],</span><br><span class="line">    minimumHeights: [</span><br><span class="line">      <span class="comment">//下高</span></span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">100000</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">100000</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">100000</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">100000</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">100000</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">    ],</span><br><span class="line">    material: Cesium.Color.BLUE,</span><br><span class="line">    outline: <span class="literal">true</span>,</span><br><span class="line">    outlineColor: Cesium.Color.BLACK,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$viewer.zoomTo(<span class="keyword">this</span>.$viewer.entities);</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FpaX3ZzEX_zLSF-8mEBllXk3rFW3" alt="wall"></p><h2 id="几何图形和外观（Geometry-and-Appearances）"><a href="#几何图形和外观（Geometry-and-Appearances）" class="headerlink" title="几何图形和外观（Geometry and Appearances）"></a>几何图形和外观（<code>Geometry and Appearances</code>）</h2><p>我们可以通过 <code>Primitive</code> <code>API</code>来操控几何图形及其外观，或者绘制各种特殊的形状。需要先得到 <code>Scene</code> 对象，然后在其上添加 <code>Primitive</code> 对象：</p><p><code>Primitive</code> 由两个部分组成：</p><p><img src="http://images.akashi.org.cn/FltZn-Or6Xd8d3DTSuMEBO8JEv90" alt="Primitive"></p><ul><li><p>几何形状（<code>Geometry</code>）：定义了 <code>Primitive</code> 的结构，例如三角形、线条、点等</p></li><li><p>外观（<code>Appearance</code>）：定义 <code>Primitive</code> 的着色（Sharding），包括GLSL（OpenGL着色语言，OpenGL Shading Language）顶点着色器和片段着色器（ vertex and fragment shaders），以及渲染状态（render state）</p></li></ul><h3 id="Primitive-API"><a href="#Primitive-API" class="headerlink" title="Primitive API"></a>Primitive API</h3><p>Cesium支持以下几何图形：</p><table><thead><tr><th>几何图形</th><th>说明</th></tr></thead><tbody><tr><td>BoxGeometry</td><td>立方体</td></tr><tr><td>BoxOutlineGeometry</td><td>仅有轮廓的立方体</td></tr><tr><td>CircleGeometry</td><td>圆形或者拉伸的圆形</td></tr><tr><td>CircleOutlineGeometry</td><td>只有轮廓的圆形</td></tr><tr><td>CorridorGeometry</td><td>走廊：沿着地表的多段线，且具有一定的宽度，可以拉伸到一定的高度</td></tr><tr><td>CorridorOutlineGeometry</td><td>只有轮廓的走廊</td></tr><tr><td>CylinderGeometry</td><td>圆柱、圆锥或者截断的圆锥</td></tr><tr><td>CylinderOutlineGeometry</td><td>只有轮廓的圆柱、圆锥或者截断的圆锥</td></tr><tr><td>EllipseGeometry</td><td>椭圆或者拉伸的椭圆</td></tr><tr><td>EllipseOutlineGeometry</td><td>只有轮廓的椭圆或者拉伸的椭圆</td></tr><tr><td>EllipsoidGeometry</td><td>椭球体</td></tr><tr><td>EllipsoidOutlineGeometry</td><td>只有轮廓的椭球体</td></tr><tr><td>RectangleGeometry</td><td>矩形或者拉伸的矩形</td></tr><tr><td>RectangleOutlineGeometry</td><td>只有轮廓的矩形或者拉伸的矩形</td></tr><tr><td>PolygonGeometry</td><td>多边形，可以具有空洞或者拉伸一定的高度</td></tr><tr><td>PolygonOutlineGeometry</td><td>只有轮廓的多边形</td></tr><tr><td>PolylineGeometry</td><td>多段线，可以具有一定的宽度</td></tr><tr><td>SimplePolylineGeometry</td><td>简单的多段线</td></tr><tr><td>PolylineVolumeGeometry</td><td>多段线柱体</td></tr><tr><td>PolylineVolumeOutlineGeometry</td><td>只有轮廓的多段线柱体</td></tr><tr><td>SphereGeometry</td><td>球体</td></tr><tr><td>SphereOutlineGeometry</td><td>只有轮廓的球体</td></tr><tr><td>WallGeometry</td><td>墙</td></tr><tr><td>WallOutlineGeometry</td><td>只有轮廓的墙</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 盒子 box</span></span><br><span class="line"><span class="keyword">this</span>.$viewer.scene.primitives.add(</span><br><span class="line">  <span class="keyword">new</span> Cesium.Primitive(&#123;</span><br><span class="line">    geometryInstances: <span class="keyword">new</span> Cesium.GeometryInstance(&#123;</span><br><span class="line">      geometry: Cesium.BoxGeometry.fromDimensions(&#123;</span><br><span class="line">        vertexFormat: Cesium.PerInstanceColorAppearance.VERTEX_FORMAT,</span><br><span class="line">        dimensions: <span class="keyword">new</span> Cesium.Cartesian3(<span class="number">400000.0</span>, <span class="number">300000.0</span>, <span class="number">500000.0</span>),</span><br><span class="line">      &#125;),</span><br><span class="line">      modelMatrix: Cesium.Matrix4.multiplyByTranslation(</span><br><span class="line">        Cesium.Transforms.eastNorthUpToFixedFrame(</span><br><span class="line">          Cesium.Cartesian3.fromDegrees(<span class="number">-105.0</span>, <span class="number">45.0</span>)</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> Cesium.Cartesian3(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">250000</span>),</span><br><span class="line">        <span class="keyword">new</span> Cesium.Matrix4()</span><br><span class="line">      ),</span><br><span class="line">      id: <span class="string">"boxid"</span>,</span><br><span class="line">      attributes: &#123;</span><br><span class="line">        color: Cesium.ColorGeometryInstanceAttribute.fromColor(</span><br><span class="line">          Cesium.Color.RED.withAlpha(<span class="number">0.5</span>)</span><br><span class="line">        ),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    appearance: <span class="keyword">new</span> Cesium.PerInstanceColorAppearance(&#123;</span><br><span class="line">      closed: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆 circle</span></span><br><span class="line"><span class="keyword">this</span>.$viewer.scene.primitives.add(</span><br><span class="line">  <span class="keyword">new</span> Cesium.Primitive(&#123;</span><br><span class="line">    geometryInstances: <span class="keyword">new</span> Cesium.GeometryInstance(&#123;</span><br><span class="line">      geometry: <span class="keyword">new</span> Cesium.CircleGeometry(&#123;</span><br><span class="line">        center: Cesium.Cartesian3.fromDegrees(<span class="number">-75.59777</span>, <span class="number">40.03883</span>),</span><br><span class="line">        radius: <span class="number">200000.0</span>,</span><br><span class="line">        <span class="comment">// height: 300000,</span></span><br><span class="line">        <span class="comment">// extrudedHeight: 0</span></span><br><span class="line">      &#125;),</span><br><span class="line">      attributes: &#123;</span><br><span class="line">        color: Cesium.ColorGeometryInstanceAttribute.fromColor(</span><br><span class="line">          Cesium.Color.PINK</span><br><span class="line">        ),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    appearance: <span class="keyword">new</span> Cesium.PerInstanceColorAppearance(),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 走廊 corridor</span></span><br><span class="line"><span class="keyword">this</span>.$viewer.scene.primitives.add(</span><br><span class="line">  <span class="keyword">new</span> Cesium.Primitive(&#123;</span><br><span class="line">    geometryInstances: <span class="keyword">new</span> Cesium.GeometryInstance(&#123;</span><br><span class="line">      geometry: <span class="keyword">new</span> Cesium.CorridorGeometry(&#123;</span><br><span class="line">        positions: Cesium.Cartesian3.fromDegreesArray([</span><br><span class="line">          <span class="number">-90.0</span>,</span><br><span class="line">          <span class="number">40.0</span>,</span><br><span class="line">          <span class="number">-70.0</span>,</span><br><span class="line">          <span class="number">35.0</span>,</span><br><span class="line">          <span class="number">-70.0</span>,</span><br><span class="line">          <span class="number">30.0</span>,</span><br><span class="line">        ]),</span><br><span class="line">        width: <span class="number">60000</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      attributes: &#123;</span><br><span class="line">        color: Cesium.ColorGeometryInstanceAttribute.fromColor(</span><br><span class="line">          Cesium.Color.RED.withAlpha(<span class="number">0.5</span>)</span><br><span class="line">        ),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    appearance: <span class="keyword">new</span> Cesium.PerInstanceColorAppearance(),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 共面多边几何 Coplanar</span></span><br><span class="line"><span class="keyword">this</span>.$viewer.scene.primitives.add(</span><br><span class="line">  <span class="keyword">new</span> Cesium.Primitive(&#123;</span><br><span class="line">    geometryInstances: <span class="keyword">new</span> Cesium.GeometryInstance(&#123;</span><br><span class="line">      geometry: <span class="keyword">new</span> Cesium.CoplanarPolygonGeometry(&#123;</span><br><span class="line">        polygonHierarchy: <span class="keyword">new</span> Cesium.PolygonHierarchy(</span><br><span class="line">          Cesium.Cartesian3.fromDegreesArrayHeights([</span><br><span class="line">            <span class="number">-110.0</span>,</span><br><span class="line">            <span class="number">65.0</span>,</span><br><span class="line">            <span class="number">100000</span>,</span><br><span class="line">            <span class="number">-100.0</span>,</span><br><span class="line">            <span class="number">65.0</span>,</span><br><span class="line">            <span class="number">100000</span>,</span><br><span class="line">            <span class="number">-100.0</span>,</span><br><span class="line">            <span class="number">70.0</span>,</span><br><span class="line">            <span class="number">100000</span>,</span><br><span class="line">            <span class="number">-110.0</span>,</span><br><span class="line">            <span class="number">70.0</span>,</span><br><span class="line">            <span class="number">300000</span>,</span><br><span class="line">          ])</span><br><span class="line">        ),</span><br><span class="line">      &#125;),</span><br><span class="line">      attributes: &#123;</span><br><span class="line">        color: Cesium.ColorGeometryInstanceAttribute.fromColor(</span><br><span class="line">          Cesium.Color.GREEN</span><br><span class="line">        ),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    appearance: <span class="keyword">new</span> Cesium.PerInstanceColorAppearance(),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆柱 Cylinder</span></span><br><span class="line"><span class="keyword">this</span>.$viewer.scene.primitives.add(</span><br><span class="line">  <span class="keyword">new</span> Cesium.Primitive(&#123;</span><br><span class="line">    geometryInstances: <span class="keyword">new</span> Cesium.GeometryInstance(&#123;</span><br><span class="line">      geometry: <span class="keyword">new</span> Cesium.CylinderGeometry(&#123;</span><br><span class="line">        length: <span class="number">400000</span>,</span><br><span class="line">        topRadius: <span class="number">200000</span>,</span><br><span class="line">        bottomRadius: <span class="number">200000</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      modelMatrix: Cesium.Matrix4.multiplyByTranslation(</span><br><span class="line">        Cesium.Transforms.eastNorthUpToFixedFrame(</span><br><span class="line">          Cesium.Cartesian3.fromDegrees(<span class="number">-100</span>, <span class="number">60</span>)</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> Cesium.Cartesian3(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">100000.0</span>),</span><br><span class="line">        <span class="keyword">new</span> Cesium.Matrix4()</span><br><span class="line">      ),</span><br><span class="line">      attributes: &#123;</span><br><span class="line">        color: Cesium.ColorGeometryInstanceAttribute.fromColor(</span><br><span class="line">          Cesium.Color.GREEN</span><br><span class="line">        ),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    appearance: <span class="keyword">new</span> Cesium.PerInstanceColorAppearance(),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 椭圆 ellipse</span></span><br><span class="line"><span class="keyword">this</span>.$viewer.scene.primitives.add(</span><br><span class="line">  <span class="keyword">new</span> Cesium.Primitive(&#123;</span><br><span class="line">    geometryInstances: <span class="keyword">new</span> Cesium.GeometryInstance(&#123;</span><br><span class="line">      geometry: <span class="keyword">new</span> Cesium.EllipseGeometry(&#123;</span><br><span class="line">        center: Cesium.Cartesian3.fromDegrees(<span class="number">-100.0</span>, <span class="number">20.0</span>),</span><br><span class="line">        semiMinorAxis: <span class="number">200000.0</span>,</span><br><span class="line">        semiMajorAxis: <span class="number">300000.0</span>,</span><br><span class="line">        <span class="comment">// 回转</span></span><br><span class="line">        rotation: Cesium.Math.PI_OVER_FOUR,</span><br><span class="line">        vertexFormat: Cesium.VertexFormat.POSITION_AND_ST,</span><br><span class="line">        height: <span class="number">300000</span>,</span><br><span class="line">        extrudedHeight: <span class="number">0</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">    appearance: <span class="keyword">new</span> Cesium.EllipsoidSurfaceAppearance(&#123;</span><br><span class="line">      material: Cesium.Material.fromType(<span class="string">"Checkerboard"</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 椭球 ellipsoid</span></span><br><span class="line"><span class="keyword">this</span>.$viewer.scene.primitives.add(</span><br><span class="line">  <span class="keyword">new</span> Cesium.Primitive(&#123;</span><br><span class="line">    geometryInstances: <span class="keyword">new</span> Cesium.GeometryInstance(&#123;</span><br><span class="line">      geometry: <span class="keyword">new</span> Cesium.EllipsoidGeometry(&#123;</span><br><span class="line">        radii: <span class="keyword">new</span> Cesium.Cartesian3(<span class="number">500000.0</span>, <span class="number">500000.0</span>, <span class="number">1000000.0</span>),</span><br><span class="line">        vertexFormat: Cesium.VertexFormat.POSITION_AND_NORMAL,</span><br><span class="line">      &#125;),</span><br><span class="line">      modelMatrix: Cesium.Matrix4.multiplyByTranslation(</span><br><span class="line">        Cesium.Transforms.eastNorthUpToFixedFrame(</span><br><span class="line">          Cesium.Cartesian3.fromDegrees(<span class="number">-95</span>, <span class="number">35</span>)</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> Cesium.Cartesian3(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">500000.0</span>),</span><br><span class="line">        <span class="keyword">new</span> Cesium.Matrix4()</span><br><span class="line">      ),</span><br><span class="line">      id: <span class="string">"ellipsoid"</span>,</span><br><span class="line">      attributes: &#123;</span><br><span class="line">        color: Cesium.ColorGeometryInstanceAttribute.fromColor(</span><br><span class="line">          Cesium.Color.AQUA</span><br><span class="line">        ),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    appearance: <span class="keyword">new</span> Cesium.PerInstanceColorAppearance(),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多边形 polygon 三角形</span></span><br><span class="line"><span class="keyword">this</span>.$viewer.scene.primitives.add(</span><br><span class="line">  <span class="keyword">new</span> Cesium.Primitive(&#123;</span><br><span class="line">    geometryInstances: <span class="keyword">new</span> Cesium.GeometryInstance(&#123;</span><br><span class="line">      geometry: <span class="keyword">new</span> Cesium.PolygonGeometry(&#123;</span><br><span class="line">        polygonHierarchy: &#123;</span><br><span class="line">          positions: Cesium.Cartesian3.fromDegreesArray([</span><br><span class="line">            <span class="number">-80.0</span>,</span><br><span class="line">            <span class="number">45.0</span>,</span><br><span class="line">            <span class="number">-80.0</span>,</span><br><span class="line">            <span class="number">40.0</span>,</span><br><span class="line">            <span class="number">-85.0</span>,</span><br><span class="line">            <span class="number">40.0</span>,</span><br><span class="line">          ]),</span><br><span class="line">        &#125;,</span><br><span class="line">        height: <span class="number">300000</span>,</span><br><span class="line">        vertexFormat: Cesium.PerInstanceColorAppearance.VERTEX_FORMAT,</span><br><span class="line">      &#125;),</span><br><span class="line">      attributes: &#123;</span><br><span class="line">        color: Cesium.ColorGeometryInstanceAttribute.fromColor(</span><br><span class="line">          Cesium.Color.PURPLE.withAlpha(<span class="number">0.5</span>)</span><br><span class="line">        ),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    appearance: <span class="keyword">new</span> Cesium.PerInstanceColorAppearance(),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩形 rectangle</span></span><br><span class="line"><span class="keyword">this</span>.$viewer.scene.primitives.add(</span><br><span class="line">  <span class="keyword">new</span> Cesium.Primitive(&#123;</span><br><span class="line">    geometryInstances: <span class="keyword">new</span> Cesium.GeometryInstance(&#123;</span><br><span class="line">      geometry: <span class="keyword">new</span> Cesium.RectangleGeometry(&#123;</span><br><span class="line">        rectangle: Cesium.Rectangle.fromDegrees(</span><br><span class="line">          <span class="number">-140.0</span>,</span><br><span class="line">          <span class="number">30.0</span>,</span><br><span class="line">          <span class="number">-110.0</span>,</span><br><span class="line">          <span class="number">40.0</span></span><br><span class="line">        ),</span><br><span class="line">        vertexFormat: Cesium.PerInstanceColorAppearance.VERTEX_FORMAT,</span><br><span class="line">      &#125;),</span><br><span class="line">      id: <span class="string">"rectangle"</span>,</span><br><span class="line">      attributes: &#123;</span><br><span class="line">        color: <span class="keyword">new</span> Cesium.ColorGeometryInstanceAttribute(</span><br><span class="line">          <span class="number">0.0</span>,</span><br><span class="line">          <span class="number">1.0</span>,</span><br><span class="line">          <span class="number">1.0</span>,</span><br><span class="line">          <span class="number">0.5</span></span><br><span class="line">        ),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    appearance: <span class="keyword">new</span> Cesium.PerInstanceColorAppearance(),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 球体 Sphere(can't shown)</span></span><br><span class="line"><span class="keyword">this</span>.$viewer.scene.primitives.add(</span><br><span class="line">  <span class="keyword">new</span> Cesium.Primitive(&#123;</span><br><span class="line">    geometryInstances: <span class="keyword">new</span> Cesium.GeometryInstance(&#123;</span><br><span class="line">      geometry: <span class="keyword">new</span> Cesium.SphereGeometry(&#123;</span><br><span class="line">        radius: <span class="number">10000.0</span>,</span><br><span class="line">        <span class="comment">// vertexFormat : Cesium.VertexFormat.POSITION_ONLY</span></span><br><span class="line">      &#125;),</span><br><span class="line">      modelMatrix: Cesium.Matrix4.multiplyByTranslation(</span><br><span class="line">        Cesium.Transforms.eastNorthUpToFixedFrame(</span><br><span class="line">          Cesium.Cartesian3.fromDegrees(<span class="number">-140</span>, <span class="number">40</span>)</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> Cesium.Cartesian3(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">100000.0</span>),</span><br><span class="line">        <span class="keyword">new</span> Cesium.Matrix4()</span><br><span class="line">      ),</span><br><span class="line">      attributes: &#123;</span><br><span class="line">        color: Cesium.ColorGeometryInstanceAttribute.fromColor(</span><br><span class="line">          Cesium.Color.YELLOW.withAlpha(<span class="number">0.5</span>)</span><br><span class="line">        ),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    appearance: <span class="keyword">new</span> Cesium.PerInstanceColorAppearance(),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 墙体 Wall</span></span><br><span class="line"><span class="keyword">this</span>.$viewer.scene.primitives.add(</span><br><span class="line">  <span class="keyword">new</span> Cesium.Primitive(&#123;</span><br><span class="line">    geometryInstances: <span class="keyword">new</span> Cesium.GeometryInstance(&#123;</span><br><span class="line">      geometry: <span class="keyword">new</span> Cesium.WallGeometry(&#123;</span><br><span class="line">        positions: Cesium.Cartesian3.fromDegreesArrayHeights([</span><br><span class="line">          <span class="number">-115.0</span>,</span><br><span class="line">          <span class="number">45.0</span>,</span><br><span class="line">          <span class="number">300000.0</span>,</span><br><span class="line">          <span class="number">-115.0</span>,</span><br><span class="line">          <span class="number">50.0</span>,</span><br><span class="line">          <span class="number">300000.0</span>,</span><br><span class="line">          <span class="number">-120.0</span>,</span><br><span class="line">          <span class="number">50.0</span>,</span><br><span class="line">          <span class="number">300000.0</span>,</span><br><span class="line">          <span class="number">-120.0</span>,</span><br><span class="line">          <span class="number">45.0</span>,</span><br><span class="line">          <span class="number">300000.0</span>,</span><br><span class="line">          <span class="number">-115.0</span>,</span><br><span class="line">          <span class="number">45.0</span>,</span><br><span class="line">          <span class="number">300000.0</span>,</span><br><span class="line">        ]),</span><br><span class="line">      &#125;),</span><br><span class="line">      attributes: &#123;</span><br><span class="line">        color: Cesium.ColorGeometryInstanceAttribute.fromColor(</span><br><span class="line">          Cesium.Color.BLUE.withAlpha(<span class="number">0.5</span>)</span><br><span class="line">        ),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    appearance: <span class="keyword">new</span> Cesium.PerInstanceColorAppearance(),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多边形实现箭头</span></span><br><span class="line"><span class="keyword">this</span>.$viewer.scene.primitives.add(</span><br><span class="line">  <span class="keyword">new</span> Cesium.Primitive(&#123;</span><br><span class="line">    geometryInstances: <span class="keyword">new</span> Cesium.GeometryInstance(&#123;</span><br><span class="line">      geometry: <span class="keyword">new</span> Cesium.PolygonGeometry(&#123;</span><br><span class="line">        polygonHierarchy: <span class="keyword">new</span> Cesium.PolygonHierarchy(</span><br><span class="line">          Cesium.Cartesian3.fromDegreesArray([</span><br><span class="line">            <span class="number">-105</span>,</span><br><span class="line">            <span class="number">55</span>,</span><br><span class="line">            <span class="number">-110</span>,</span><br><span class="line">            <span class="number">60</span>,</span><br><span class="line">            <span class="number">-115</span>,</span><br><span class="line">            <span class="number">55</span>,</span><br><span class="line">            <span class="number">-113</span>,</span><br><span class="line">            <span class="number">55</span>,</span><br><span class="line">            <span class="number">-113</span>,</span><br><span class="line">            <span class="number">50</span>,</span><br><span class="line">            <span class="number">-107</span>,</span><br><span class="line">            <span class="number">50</span>,</span><br><span class="line">            <span class="number">-107</span>,</span><br><span class="line">            <span class="number">55</span>,</span><br><span class="line">          ])</span><br><span class="line">        ),</span><br><span class="line">        height: <span class="number">300000.0</span>,</span><br><span class="line">        <span class="comment">// perPositionHeight: true,</span></span><br><span class="line">        extrudedHeight: <span class="number">10</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      attributes: &#123;</span><br><span class="line">        color: Cesium.ColorGeometryInstanceAttribute.fromColor(</span><br><span class="line">          Cesium.Color.RED.withAlpha(<span class="number">0.5</span>)</span><br><span class="line">        ),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    appearance: <span class="keyword">new</span> Cesium.PerInstanceColorAppearance(),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Appearance"><a href="#Appearance" class="headerlink" title="Appearance"></a><code>Appearance</code></h3><blockquote><p><code>primitive</code> 的属性除了 <code>Geometry</code>，还有另一个关键属性就是 <code>Appearance</code>。它定义了 <code>primitive</code> <code>的纹理，即单个像素的颜色。primitive</code> 可以有多个几何实例，但只能有一个外观。</p></blockquote><p>外观定义了绘制 <code>Primitive</code> 时在GPU上执行的完整 <code>GLSL</code> 顶点和面片着色器。外观还定义了完整的渲染状态，它控制绘制 <code>primitvie</code> 时 <code>GPU</code> 的状态。</p><p>我们可以直接定义渲染状态，也可以使用更高级的属性，如“闭合(<code>closed</code>)”和“半透明(<code>translucent</code>)”，外观将转换为渲染状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> appearance  = <span class="keyword">new</span> Cesium.PerInstanceColorAppearance(&#123;</span><br><span class="line">  translucent : <span class="literal">false</span>,</span><br><span class="line">  closed : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="粒子系统-Introduction-to-Particle-Systems"><a href="#粒子系统-Introduction-to-Particle-Systems" class="headerlink" title="粒子系统(Introduction to Particle Systems)"></a>粒子系统(<code>Introduction to Particle Systems</code>)</h2><blockquote><p>粒子系统是一种图形技术，可以模拟复杂的物理效果。粒子系统是小图像的集合，当它们一起观看时，会形成一个更复杂的“模糊”物体，如火、烟、天气或烟花等效果。</p></blockquote><p>通过使用诸如初始位置、速度和生命周期等属性指定单个粒子的行为，可以控制这些复杂的效果。</p><h3 id="Particle-system-basics"><a href="#Particle-system-basics" class="headerlink" title="Particle system basics"></a><code>Particle system basics</code></h3><blockquote><p>基础粒子效果</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> model = <span class="keyword">this</span>.$viewer.entities.getById(<span class="string">"Truck"</span>);</span><br><span class="line"><span class="keyword">let</span> particleSystem = <span class="keyword">this</span>.$viewer.scene.primitives.add(</span><br><span class="line">  <span class="keyword">new</span> Cesium.ParticleSystem(&#123;</span><br><span class="line">    image: <span class="string">"images/smoke.png"</span>,</span><br><span class="line">    imageSize: <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">20</span>, <span class="number">20</span>),</span><br><span class="line">    startScale: <span class="number">1.0</span>,</span><br><span class="line">    endScale: <span class="number">4.0</span>,</span><br><span class="line">    particleLife: <span class="number">1.0</span>,</span><br><span class="line">    speed: <span class="number">5.0</span>,</span><br><span class="line">    emitter: <span class="keyword">new</span> Cesium.CircleEmitter(<span class="number">0.5</span>),</span><br><span class="line">    emissionRate: <span class="number">5.0</span>,</span><br><span class="line">    modelMatrix: model.computeModelMatrix(</span><br><span class="line">      Cesium.JulianDate.now(),</span><br><span class="line">      <span class="keyword">new</span> Cesium.Matrix4()</span><br><span class="line">    ),</span><br><span class="line">    lifetime: <span class="number">16.0</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>ParticleSystem</code> 一个参数化的对象，用于控制单个粒子对象 <code>Particle</code> 随时间的外观和行为。粒子由粒子发射器产生，有一个位置和类型，存活一段时间，然后消亡。</p><p>其中一些属性是动态的，如 <code>startScale</code> 和 <code>endScale</code>、<code>startColor</code>和<code>endColor</code>。</p><p>对于具有最大和最小输入的每个变量，粒子上该变量的实际值将随机分配到最大和最小输入之间，并在粒子的整个生命周期内静态保持该值。允许像这样更改的属性包括<code>imageSize</code>、<code>speed</code>、<code>life</code>和<code>particleLife</code>。</p><h3 id="Emitters-发射器"><a href="#Emitters-发射器" class="headerlink" title="Emitters 发射器"></a><code>Emitters</code> 发射器</h3><blockquote><p>当粒子诞生时，其初始位置和速度矢量由 <code>ParticleEmitter</code> 控制。发射器将每秒生成一些粒子，由 <code>emissionRate</code> 参数指定，根据发射器类型用随机速度初始化。</p></blockquote><h4 id="BoxEmitter-盒形发射器"><a href="#BoxEmitter-盒形发射器" class="headerlink" title="BoxEmitter 盒形发射器"></a><code>BoxEmitter</code> 盒形发射器</h4><blockquote><p><code>BoxEmitter</code> 在一个盒子内随机取样的位置初始化粒子，并将它们从六个盒子表面中的一个引导出来。它接收 <code>Cartesian3</code> 参数，该参数指定框的宽度、高度和深度尺寸。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> particleSystem = scene.primitives.add(<span class="keyword">new</span> Cesium.ParticleSystem(&#123;</span><br><span class="line">  image: <span class="string">"images/smoke.png"</span>,</span><br><span class="line">  color: Cesium.Color.MAGENTA,</span><br><span class="line">  emissionRate: <span class="number">5.0</span>,</span><br><span class="line">  emitter: <span class="keyword">new</span> Cesium.BoxEmitter(<span class="keyword">new</span> Cesium.Cartesian3(<span class="number">5.0</span>, <span class="number">5.0</span>, <span class="number">5.0</span>)),</span><br><span class="line">  imageSize : <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">25.0</span>, <span class="number">25.0</span>),</span><br><span class="line">  modelMatrix : entity.computeModelMatrix(viewer.clock.startTime, <span class="keyword">new</span> Cesium.Matrix4()),</span><br><span class="line">  lifetime : <span class="number">16.0</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h4 id="CircleEmitter-圆形发射器"><a href="#CircleEmitter-圆形发射器" class="headerlink" title="CircleEmitter 圆形发射器"></a><code>CircleEmitter</code> 圆形发射器</h4><blockquote><p><code>CircleEmitter</code> 在发射器上轴线方向上的圆形内的随机采样位置初始化粒子。它接收一个指定圆半径的浮点参数。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> particleSystem = scene.primitives.add(<span class="keyword">new</span> Cesium.ParticleSystem(&#123;</span><br><span class="line">  image : <span class="string">'../../SampleData/smoke.png'</span>,</span><br><span class="line">  color: Cesium.Color.MAGENTA,</span><br><span class="line">  emissionRate: <span class="number">5.0</span>,</span><br><span class="line">  emitter: <span class="keyword">new</span> Cesium.CircleEmitter(<span class="number">5.0</span>),</span><br><span class="line">  imageSize : <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">25.0</span>, <span class="number">25.0</span>),</span><br><span class="line">  modelMatrix : entity.computeModelMatrix(viewer.clock.startTime, <span class="keyword">new</span> Cesium.Matrix4()),</span><br><span class="line">  lifetime : <span class="number">16.0</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h4 id="ConeEmitter-锥形发射器"><a href="#ConeEmitter-锥形发射器" class="headerlink" title="ConeEmitter 锥形发射器"></a><code>ConeEmitter</code> 锥形发射器</h4><blockquote><p><code>ConeEmitter</code> 在圆锥体的顶端初始化粒子，并以随机的角度引导它们离开圆锥体。它使用一个指定圆锥体角度的浮点参数。圆锥体沿发射器的上轴定向。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> particleSystem = scene.primitives.add(<span class="keyword">new</span> Cesium.ParticleSystem(&#123;</span><br><span class="line">  image : <span class="string">'../../SampleData/smoke.png'</span>,</span><br><span class="line">  color: Cesium.Color.MAGENTA,</span><br><span class="line">  emissionRate: <span class="number">5.0</span>,</span><br><span class="line">  emitter: <span class="keyword">new</span> Cesium.ConeEmitter(Cesium.Math.toRadians(<span class="number">30.0</span>)),</span><br><span class="line">  imageSize : <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">25.0</span>, <span class="number">25.0</span>),</span><br><span class="line">  modelMatrix : entity.computeModelMatrix(viewer.clock.startTime, <span class="keyword">new</span> Cesium.Matrix4()),</span><br><span class="line">  lifetime : <span class="number">16.0</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h4 id="SphereEmitter-球形发射器"><a href="#SphereEmitter-球形发射器" class="headerlink" title="SphereEmitter 球形发射器"></a><code>SphereEmitter</code> 球形发射器</h4><blockquote><p><code>SphereEmitter</code> 在球体内随机取样的位置初始化粒子，并将它们从球体中心向外引导。它使用一个指定球体半径的浮点参数。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> particleSystem = scene.primitives.add(<span class="keyword">new</span> Cesium.ParticleSystem(&#123;</span><br><span class="line">  image : <span class="string">'../../SampleData/smoke.png'</span>,</span><br><span class="line">  color: Cesium.Color.MAGENTA,</span><br><span class="line">  emissionRate: <span class="number">5.0</span>,</span><br><span class="line">  emitter: <span class="keyword">new</span> Cesium.SphereEmitter(<span class="number">5.0</span>),</span><br><span class="line">  imageSize : <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">25.0</span>, <span class="number">25.0</span>),</span><br><span class="line">  modelMatrix : entity.computeModelMatrix(viewer.clock.startTime, <span class="keyword">new</span> Cesium.Matrix4()),</span><br><span class="line">  lifetime : <span class="number">16.0</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h3 id="配置粒子系统"><a href="#配置粒子系统" class="headerlink" title="配置粒子系统"></a>配置粒子系统</h3><h4 id="粒子发射率"><a href="#粒子发射率" class="headerlink" title="粒子发射率"></a>粒子发射率</h4><blockquote><p><code>emissionRate</code> 控制每秒发射多少粒子，可以改变系统中粒子的密度。</p></blockquote><p>指定一组 <code>burst</code> 在一定时间发射粒子，可以增加粒子系统的多样性或爆炸性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bursts : [</span><br><span class="line">  <span class="keyword">new</span> Cesium.ParticleBurst(&#123;<span class="attr">time</span> : <span class="number">5.0</span>, <span class="attr">minimum</span> : <span class="number">300</span>, <span class="attr">maximum</span> : <span class="number">500</span>&#125;),</span><br><span class="line">  <span class="keyword">new</span> Cesium.ParticleBurst(&#123;<span class="attr">time</span> : <span class="number">10.0</span>, <span class="attr">minimum</span> : <span class="number">50</span>, <span class="attr">maximum</span> : <span class="number">100</span>&#125;),</span><br><span class="line">  <span class="keyword">new</span> Cesium.ParticleBurst(&#123;<span class="attr">time</span> : <span class="number">15.0</span>, <span class="attr">minimum</span> : <span class="number">200</span>, <span class="attr">maximum</span> : <span class="number">300</span>&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在给定的时间，粒子会在最大和最小之间进行发射。</p><h4 id="粒子生命周期和系统生命周期"><a href="#粒子生命周期和系统生命周期" class="headerlink" title="粒子生命周期和系统生命周期"></a>粒子生命周期和系统生命周期</h4><p>默认情况下，粒子系统将永远运行。要使粒子系统以设定的持续时间运行，可以使用 <code>lifetime</code> 以秒为单位指定持续时间，并将 <code>loop</code> 设置为 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lifetime : <span class="number">16.0</span>,</span><br><span class="line">loop: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>要随机化每个粒子的输出，可以使用变量 <code>minimumParticleLife</code> 和 <code>maximumArticleLife</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minimumParticleLife: <span class="number">5.0</span>,</span><br><span class="line">maximumParticleLife: <span class="number">10.0</span></span><br></pre></td></tr></table></figure><h4 id="样式化粒子"><a href="#样式化粒子" class="headerlink" title="样式化粒子"></a>样式化粒子</h4><ul><li>颜色</li></ul><p>粒子的样式是使用 <code>image</code> 和 <code>color</code> 指定的纹理，这些纹理可以在粒子的生命周期中更改以创建动态效果。 下面的代码使烟雾粒子从绿色过渡到白色。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startColor : Cesium.Color.LIGHTSEAGREEN.withAlpha(<span class="number">0.7</span>),</span><br><span class="line">endColor : Cesium.Color.WHITE.withAlpha(<span class="number">0.0</span>),</span><br></pre></td></tr></table></figure><ul><li>大小</li></ul><p>粒子的大小由 <code>imageSize</code> 控制。要随机化大小，可以使用<code>minimumImageSize.x</code>和<code>maximumImageSize.x</code>控制宽度（以像素为单位），并使用<code>minimumImageSize.y</code>和<code>maximumImageSize.y</code>控制高度（以像素为单位）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minimumImageSize : <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">30.0</span>, <span class="number">30.0</span>),</span><br><span class="line">maximumImageSize : <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">60.0</span>, <span class="number">60.0</span>)</span><br></pre></td></tr></table></figure><p>粒子的大小可以通过 <code>startScale</code> 和 <code>endscale</code> 属性在其生命周期中进行调整，以使粒子随时间增长或收缩。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startScale: <span class="number">1.0</span>,</span><br><span class="line">endScale: <span class="number">4.0</span></span><br></pre></td></tr></table></figure><ul><li>速度</li></ul><p>速度由 <code>speed</code> 或 <code>minimumSpeed</code> 和 <code>maximumSpeed</code> 控制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minimumSpeed: <span class="number">5.0</span>,</span><br><span class="line">maximumSpeed: <span class="number">10.0</span></span><br></pre></td></tr></table></figure><h4 id="UpdateCallback-更新回调"><a href="#UpdateCallback-更新回调" class="headerlink" title="UpdateCallback 更新回调"></a><code>UpdateCallback</code> 更新回调</h4><p>通过应用更新函数，可以进一步自定义粒子系统。对于重力、风或颜色更改等效果，它可以动态更新每个粒子。</p><p>一个让粒子对重力作出反应的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gravityVector = <span class="keyword">new</span> Cesium.Cartesian3();</span><br><span class="line"><span class="keyword">let</span> gravity = -(<span class="number">9.8</span> * <span class="number">9.8</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyGravity</span>(<span class="params">p, dt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> position = p.position;</span><br><span class="line"></span><br><span class="line">  Cesium.Cartesian3.normalize(position, gravityVector);</span><br><span class="line">  Cesium.Cartesian3.multiplyByScalar(gravityVector, gravity * dt, gravityVector);</span><br><span class="line"></span><br><span class="line">  p.velocity = Cesium.Cartesian3.add(p.velocity, gravityVector, p.velocity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数计算重力矢量，并使用重力加速度来改变粒子的速度。 将重力设置为粒子系统的 <code>updateFunction</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updateCallback : applyGravity</span><br></pre></td></tr></table></figure><h4 id="Positioning-定位"><a href="#Positioning-定位" class="headerlink" title="Positioning 定位"></a><code>Positioning</code> 定位</h4><p>使用两个Matrix4变换矩阵定位粒子系统：</p><ul><li><code>modelMatrix</code></li></ul><p>将粒子系统从模型转换为世界坐标。</p><ul><li><code>emitterModelMatrix</code></li></ul><p>在粒子系统的局部坐标系中变换粒子系统发射器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> model = <span class="keyword">this</span>.$viewer.entities.getById(<span class="string">"Truck"</span>);</span><br><span class="line"><span class="keyword">let</span> particleSystem = <span class="keyword">this</span>.$viewer.scene.primitives.add(</span><br><span class="line">  <span class="keyword">new</span> Cesium.ParticleSystem(&#123;</span><br><span class="line">    image: <span class="string">"images/smoke.png"</span>,</span><br><span class="line"></span><br><span class="line">    startColor: Cesium.Color.LIGHTSEAGREEN.withAlpha(<span class="number">0.7</span>),</span><br><span class="line">    endColor: Cesium.Color.WHITE.withAlpha(<span class="number">0.0</span>),</span><br><span class="line"></span><br><span class="line">    startScale: <span class="number">1.0</span>,</span><br><span class="line">    endScale: <span class="number">4.0</span>,</span><br><span class="line"></span><br><span class="line">    particleLife: <span class="number">1.0</span>,</span><br><span class="line"></span><br><span class="line">    minimumSpeed: <span class="number">1.0</span>,</span><br><span class="line">    maximumSpeed: <span class="number">4.0</span>,</span><br><span class="line"></span><br><span class="line">    imageSize: <span class="keyword">new</span> Cesium.Cartesian2(<span class="number">25</span>, <span class="number">25</span>),</span><br><span class="line">    emissionRate: <span class="number">5.0</span>,</span><br><span class="line">    lifetime: <span class="number">16.0</span>,</span><br><span class="line"></span><br><span class="line">    emitter: <span class="keyword">new</span> Cesium.CircleEmitter(<span class="number">0.5</span>),</span><br><span class="line"></span><br><span class="line">    modelMatrix: model.computeModelMatrix(</span><br><span class="line">      Cesium.JulianDate.now(),</span><br><span class="line">      <span class="keyword">new</span> Cesium.Matrix4()</span><br><span class="line">    ),</span><br><span class="line">    emitterModelMatrix: <span class="keyword">new</span> Cesium.Matrix4.fromTranslationQuaternionRotationScale(</span><br><span class="line">      <span class="keyword">new</span> Cesium.Cartesian3(<span class="number">-4.0</span>, <span class="number">0.0</span>, <span class="number">2.0</span>),</span><br><span class="line">      <span class="keyword">new</span> Cesium.Quaternion(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">      <span class="keyword">new</span> Cesium.Cartesian3(<span class="number">7.0</span>, <span class="number">6.0</span>, <span class="number">5.0</span>),</span><br><span class="line">      <span class="keyword">new</span> Cesium.Matrix4()</span><br><span class="line">    ),</span><br><span class="line">    bursts: [</span><br><span class="line">      <span class="keyword">new</span> Cesium.ParticleBurst(&#123;</span><br><span class="line">        time: <span class="number">5.0</span>,</span><br><span class="line">        minimum: <span class="number">10</span>,</span><br><span class="line">        maximum: <span class="number">100</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> Cesium.ParticleBurst(&#123;</span><br><span class="line">        time: <span class="number">10.0</span>,</span><br><span class="line">        minimum: <span class="number">50</span>,</span><br><span class="line">        maximum: <span class="number">100</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> Cesium.ParticleBurst(&#123;</span><br><span class="line">        time: <span class="number">15.0</span>,</span><br><span class="line">        minimum: <span class="number">200</span>,</span><br><span class="line">        maximum: <span class="number">300</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="高级粒子系统效应-Advanced-Particle-System-Effects"><a href="#高级粒子系统效应-Advanced-Particle-System-Effects" class="headerlink" title="高级粒子系统效应(Advanced Particle System Effects)"></a>高级粒子系统效应(<code>Advanced Particle System Effects</code>)</h2><blockquote><p>一些动态更新粒子的行为，需要在 <code>updateParticle</code> 函数中定义粒子的移动行为和其他动态元素。</p></blockquote><p>以雪粒子更新函数为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> snowUpdate = <span class="function"><span class="keyword">function</span> (<span class="params">particle, dt</span>) </span>&#123;</span><br><span class="line">  dt;</span><br><span class="line">  Cesium.Cartesian3.normalize(particle.position, snowGravityVector);</span><br><span class="line">  Cesium.Cartesian3.multiplyByScalar(</span><br><span class="line">    snowGravityVector,</span><br><span class="line">    Cesium.Math.randomBetween(<span class="number">-30.0</span>, <span class="number">-300.0</span>),</span><br><span class="line">    snowGravityVector</span><br><span class="line">  );</span><br><span class="line">  particle.velocity = Cesium.Cartesian3.add(</span><br><span class="line">    particle.velocity,</span><br><span class="line">    snowGravityVector,</span><br><span class="line">    particle.velocity</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> distance = Cesium.Cartesian3.distance(</span><br><span class="line">    vm.$viewer.scene.camera.position,</span><br><span class="line">    particle.position</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (distance &gt; snowRadius) &#123;</span><br><span class="line">    particle.endColor.alpha = <span class="number">0.0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    particle.endColor.alpha =</span><br><span class="line">      snowSystem.endColor.alpha / (distance / snowRadius + <span class="number">0.1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>更新函数用于定义粒子的移动、排列和可视化。修改粒子的color颜色、imageSize图像大小和particleLife粒子生命周期。我们甚至可以基于到相机距离定义粒子、导入模型或到地球本身的距离等。</p><ul><li>额外的天气效应</li></ul><p>使用雾和大气效果来增强可视化效果，并匹配我们试图复制的天气类型。</p><p>hueshift沿着颜色光谱改变颜色，saturationShift改变了视觉实际需要的颜色与黑白的对比程度，brightnessShift改变了颜色的生动程度。</p><p>雾密度改变了地球上覆盖物与雾的颜色之间的不透明程度。雾的minimumBrightness用来使雾变暗。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// snow</span></span><br><span class="line">scene.skyAtmosphere.hueShift = <span class="number">-0.8</span>;</span><br><span class="line">scene.skyAtmosphere.saturationShift = <span class="number">-0.7</span>;</span><br><span class="line">scene.skyAtmosphere.brightnessShift = <span class="number">-0.33</span>;</span><br><span class="line"></span><br><span class="line">scene.fog.density = <span class="number">0.001</span>;</span><br><span class="line">scene.fog.minimumBrightness = <span class="number">0.8</span>;</span><br></pre></td></tr></table></figure><h3 id="Snow"><a href="#Snow" class="headerlink" title="Snow"></a><code>Snow</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 雪景</span></span><br><span class="line">snow() &#123;</span><br><span class="line">  <span class="keyword">let</span> vm = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>.$viewer.terrainProvider = Cesium.createWorldTerrain();</span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.globe.depthTestAgainstTerrain = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.camera.setView(&#123;</span><br><span class="line">    destination: <span class="keyword">new</span> Cesium.Cartesian3(</span><br><span class="line">      <span class="number">277096.634865404</span>,</span><br><span class="line">      <span class="number">5647834.481964232</span>,</span><br><span class="line">      <span class="number">2985563.7039122293</span></span><br><span class="line">    ),</span><br><span class="line">    orientation: &#123;</span><br><span class="line">      heading: <span class="number">4.731089976107251</span>,</span><br><span class="line">      pitch: <span class="number">-0.32003481981370063</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> snowGravityVector = <span class="keyword">new</span> Cesium.Cartesian3();</span><br><span class="line">  <span class="keyword">let</span> snowUpdate = <span class="function"><span class="keyword">function</span> (<span class="params">particle, dt</span>) </span>&#123;</span><br><span class="line">    dt;</span><br><span class="line">    Cesium.Cartesian3.normalize(particle.position, snowGravityVector);</span><br><span class="line">    Cesium.Cartesian3.multiplyByScalar(</span><br><span class="line">      snowGravityVector,</span><br><span class="line">      Cesium.Math.randomBetween(<span class="number">-30.0</span>, <span class="number">-300.0</span>),</span><br><span class="line">      snowGravityVector</span><br><span class="line">    );</span><br><span class="line">    particle.velocity = Cesium.Cartesian3.add(</span><br><span class="line">      particle.velocity,</span><br><span class="line">      snowGravityVector,</span><br><span class="line">      particle.velocity</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> distance = Cesium.Cartesian3.distance(</span><br><span class="line">      vm.$viewer.scene.camera.position,</span><br><span class="line">      particle.position</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (distance &gt; snowRadius) &#123;</span><br><span class="line">      particle.endColor.alpha = <span class="number">0.0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      particle.endColor.alpha =</span><br><span class="line">        snowSystem.endColor.alpha / (distance / snowRadius + <span class="number">0.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 雾与大气效果</span></span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.skyAtmosphere.hueShift = <span class="number">-0.8</span>;</span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.skyAtmosphere.saturationShift = <span class="number">-0.7</span>;</span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.skyAtmosphere.brightnessShift = <span class="number">-0.33</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.fog.density = <span class="number">0.001</span>;</span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.fog.minimumBrightness = <span class="number">0.8</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> snowParticleSize = <span class="keyword">this</span>.$viewer.scene.drawingBufferWidth / <span class="number">100.0</span>;</span><br><span class="line">  <span class="keyword">let</span> snowRadius = <span class="number">100000.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> snowSystem = <span class="keyword">new</span> Cesium.ParticleSystem(&#123;</span><br><span class="line">    modelMatrix: <span class="keyword">new</span> Cesium.Matrix4.fromTranslation(</span><br><span class="line">      <span class="keyword">this</span>.$viewer.scene.camera.position</span><br><span class="line">    ),</span><br><span class="line">    minimumSpeed: <span class="number">-1.0</span>,</span><br><span class="line">    maximumSpeed: <span class="number">0.0</span>,</span><br><span class="line">    lifetime: <span class="number">15.0</span>,</span><br><span class="line">    emitter: <span class="keyword">new</span> Cesium.SphereEmitter(snowRadius),</span><br><span class="line">    startScale: <span class="number">0.5</span>,</span><br><span class="line">    endScale: <span class="number">1.0</span>,</span><br><span class="line">    image: <span class="string">"images/snow.png"</span>,</span><br><span class="line">    emissionRate: <span class="number">700.0</span>,</span><br><span class="line">    startColor: Cesium.Color.WHITE.withAlpha(<span class="number">0.0</span>),</span><br><span class="line">    endColor: Cesium.Color.WHITE.withAlpha(<span class="number">1.0</span>),</span><br><span class="line">    minimumImageSize: <span class="keyword">new</span> Cesium.Cartesian2(</span><br><span class="line">      snowParticleSize,</span><br><span class="line">      snowParticleSize</span><br><span class="line">    ),</span><br><span class="line">    maximumImageSize: <span class="keyword">new</span> Cesium.Cartesian2(</span><br><span class="line">      snowParticleSize,</span><br><span class="line">      snowParticleSize</span><br><span class="line">    ),</span><br><span class="line">    updateCallback: snowUpdate,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.primitives.add(snowSystem);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><iframe height="500" width="100%" src="http://images.akashi.org.cn/cesium-vue%20-%20Google%20Chrome%202020-09-27%2017-13-48.mp4" frameborder="0" allowfullscreen></iframe><h3 id="Rain"><a href="#Rain" class="headerlink" title="Rain"></a><code>Rain</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 雨景</span></span><br><span class="line">rain() &#123;</span><br><span class="line">  <span class="keyword">let</span> vm = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>.$viewer.terrainProvider = Cesium.createWorldTerrain();</span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.globe.depthTestAgainstTerrain = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.camera.setView(&#123;</span><br><span class="line">    destination: <span class="keyword">new</span> Cesium.Cartesian3(</span><br><span class="line">      <span class="number">277096.634865404</span>,</span><br><span class="line">      <span class="number">5647834.481964232</span>,</span><br><span class="line">      <span class="number">2985563.7039122293</span></span><br><span class="line">    ),</span><br><span class="line">    orientation: &#123;</span><br><span class="line">      heading: <span class="number">4.731089976107251</span>,</span><br><span class="line">      pitch: <span class="number">-0.32003481981370063</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// rain</span></span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.skyAtmosphere.hueShift = <span class="number">-0.97</span>;</span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.skyAtmosphere.saturationShift = <span class="number">0.25</span>;</span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.skyAtmosphere.brightnessShift = <span class="number">-0.4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.fog.density = <span class="number">0.00025</span>;</span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.fog.minimumBrightness = <span class="number">0.01</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> rainParticleSize = <span class="keyword">this</span>.$viewer.scene.drawingBufferWidth / <span class="number">100.0</span>;</span><br><span class="line">  <span class="keyword">let</span> rainRadius = <span class="number">100000.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> rainGravityScratch = <span class="keyword">new</span> Cesium.Cartesian3();</span><br><span class="line">  <span class="keyword">let</span> rainUpdate = <span class="function"><span class="keyword">function</span> (<span class="params">particle, dt</span>) </span>&#123;</span><br><span class="line">    dt;</span><br><span class="line">    rainGravityScratch = Cesium.Cartesian3.normalize(</span><br><span class="line">      particle.position,</span><br><span class="line">      rainGravityScratch</span><br><span class="line">    );</span><br><span class="line">    rainGravityScratch = Cesium.Cartesian3.multiplyByScalar(</span><br><span class="line">      rainGravityScratch,</span><br><span class="line">      <span class="number">-1050.0</span>,</span><br><span class="line">      rainGravityScratch</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    particle.position = Cesium.Cartesian3.add(</span><br><span class="line">      particle.position,</span><br><span class="line">      rainGravityScratch,</span><br><span class="line">      particle.position</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> distance = Cesium.Cartesian3.distance(</span><br><span class="line">      vm.$viewer.scene.camera.position,</span><br><span class="line">      particle.position</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (distance &gt; rainRadius) &#123;</span><br><span class="line">      particle.endColor.alpha = <span class="number">0.0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      particle.endColor.alpha =</span><br><span class="line">        rainSystem.endColor.alpha / (distance / rainRadius + <span class="number">0.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> rainSystem = <span class="keyword">new</span> Cesium.ParticleSystem(&#123;</span><br><span class="line">    modelMatrix: <span class="keyword">new</span> Cesium.Matrix4.fromTranslation(</span><br><span class="line">      <span class="keyword">this</span>.$viewer.scene.camera.position</span><br><span class="line">    ),</span><br><span class="line">    speed: <span class="number">-1.0</span>,</span><br><span class="line">    lifetime: <span class="number">15.0</span>,</span><br><span class="line">    emitter: <span class="keyword">new</span> Cesium.SphereEmitter(rainRadius),</span><br><span class="line">    startScale: <span class="number">1.0</span>,</span><br><span class="line">    endScale: <span class="number">0.0</span>,</span><br><span class="line">    image: <span class="string">"images/rain.png"</span>,</span><br><span class="line">    emissionRate: <span class="number">900.0</span>,</span><br><span class="line">    startColor: <span class="keyword">new</span> Cesium.Color(<span class="number">0.27</span>, <span class="number">0.4</span>, <span class="number">0.6</span>, <span class="number">0.0</span>),</span><br><span class="line">    endColor: <span class="keyword">new</span> Cesium.Color(<span class="number">0.27</span>, <span class="number">0.4</span>, <span class="number">0.6</span>, <span class="number">0.98</span>),</span><br><span class="line">    imageSize: <span class="keyword">new</span> Cesium.Cartesian2(</span><br><span class="line">      rainParticleSize,</span><br><span class="line">      rainParticleSize * <span class="number">2</span></span><br><span class="line">    ),</span><br><span class="line">    updateCallback: rainUpdate,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.$viewer.scene.primitives.add(rainSystem);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><iframe height="500" width="100%" src="http://images.akashi.org.cn/cesium-vue%20-%20Google%20Chrome%202020-09-27%2017-16-49.mp4" frameborder="0" allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Cesium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解 Vue.js（一）</title>
      <link href="2020/09/26/vuejs-repeat-1/repeat-vuejs/"/>
      <url>2020/09/26/vuejs-repeat-1/repeat-vuejs/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解-Vue-js（一）"><a href="#深入理解-Vue-js（一）" class="headerlink" title="深入理解 Vue.js（一）"></a>深入理解 <code>Vue.js</code>（一）</h1><blockquote><p>重读文档，同时也是对自己的积累的又一次推倒重建。</p></blockquote><a id="more"></a><h2 id="什么是-Vue-js"><a href="#什么是-Vue-js" class="headerlink" title="什么是 Vue.js"></a>什么是 <code>Vue.js</code></h2><blockquote><p><code>Vue</code> 是一个渐进式前端框架，其核心概念是数据的双向绑定、组件化、单向数据流、可复用等。既然是重新阅读官方文档，那我们从一个工程化项目开始。</p></blockquote><h3 id="Vue-工程化项目"><a href="#Vue-工程化项目" class="headerlink" title="Vue 工程化项目"></a><code>Vue</code> 工程化项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">vue -V</span><br><span class="line">vue create vue-demo</span><br><span class="line">cd vue-demo</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>这时，我们得到了一个这样的文件结构：</p><p><img src="http://images.akashi.org.cn/FsjFES612aObJu33MW5FV1OcoLCJ" alt="tree"></p><p>首先我们来关注 <code>src/main.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>可见，这里引入了 <code>vue</code> 与 <code>App.vue</code> 文件，同时 <code>new</code> 了一个 <code>Vue</code> 实例并做了节点渲染。</p><p>现在我们先封装一个组件 <code>ComponentItem</code> 并抛出。在 <code>component</code> 文件夹下新建 <code>ComponentItem.vue</code> 文件:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个Vue子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"ComponentItem"</span>,</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个 <code>vue</code> 文件由模板 <code>template</code>、脚本 <code>script</code> 和样式 <code>style</code>三部分构成。</p><p>进入 <code>App.vue</code> 在 <code>script</code> 中导入(<code>import</code>) <code>components</code> 中被抛出的组件 <code>ComponentItem</code> 并在 <code>components</code> 中声明使用，最终在 <code>template</code> 中渲染到浏览器显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ComponentItem</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> ComponentItem <span class="keyword">from</span> <span class="string">'./components/ComponentItem'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentItem</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：这里删除掉自动生成的 <code>HelloWorld.vue</code> 文件以及引入的相关多余内容。</p><p>这时我们可以在浏览器看到子组件便被渲染到了页面上。</p><h3 id="数据与方法"><a href="#数据与方法" class="headerlink" title="数据与方法"></a>数据与方法</h3><blockquote><p>熟悉了基本的组件创建，我们先回顾一下 <code>Vue</code> 的数据与方法。</p></blockquote><p><code>Vue</code> 的初始数据声明在 <code>data</code> 中。当一个实例被创建时，它将 <code>data</code> 对象(组件中为<code>data</code>函数)中的所有属性(<code>property</code>)加入到 <code>Vue</code> 的响应式系统中，通过属性值的变化，自动绑定到视图，称为数据的双向绑定。</p><p>注意：在组件中，<code>data</code> 是一个函数而不是对象，这样每个实例便可以维护一份被返回对象的独立的拷贝。</p><p>比如在我们新建的 <code>ComponentItem</code> 组件中，我们这样使用 <code>data</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"ComponentItem"</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意：只有当实例被创建时就已经存在于 <code>data</code> 中的属性(<code>property</code>)才是 <code>响应式</code> 的。所以如果我们在后续会需要一些属性，但是一开始它为空或不存在，那么需要在 <code>data</code> 中设置一些初始值。</p><p><code>Vue</code> 以自身的 <code>diff</code> 算法遍历计算 <code>Virtual DOM</code>，找到最小差异 <code>DOM</code> 更新，避免了真实的 <code>DOM</code> 渲染引起的整个 <code>DOM</code> 树的重排重绘，减小浏览器消耗。</p><p><code>Vue</code> 自定义实例属性带有 <code>$</code> 前缀，与用户定义的 <code>property</code> 进行区分，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.$data === data <span class="comment">// =&gt; true</span></span><br><span class="line">vm.$el === <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>) <span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $watch 是一个实例方法</span></span><br><span class="line">vm.$watch(<span class="string">'a'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newValue, oldValue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这个回调将在 `vm.a` 改变后调用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更多 <code>API</code> 查找参照 <a href="https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B-property" target="_blank" rel="noopener">官网文档</a></p><p>常用的如：<code>vm.$data</code>、<code>vm.$el</code>、<code>vm.$props</code>、<code>vm.$options</code>、<code>vm.$refs</code>、<code>vm.$watch</code>、<code>vm.$set</code>、<code>vm.$on</code>、<code>vm.$emit</code>、<code>vm.$attrs</code> 等。</p><h3 id="钩子函数与生命周期"><a href="#钩子函数与生命周期" class="headerlink" title="钩子函数与生命周期"></a>钩子函数与生命周期</h3><p>每个 <code>Vue</code> 实例在被创建时都要经过一系列的初始化过程，如设置数据监听、编译模板、挂载实例到 <code>DOM</code>、数据变化更新 <code>DOM</code> 等。在整个过程中，会运行一些生命周期钩子的函数，允许用户在不同阶段添加自己的代码进行处理。</p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;&#125;,</span><br><span class="line">mounted() &#123;&#125;,</span><br><span class="line">updated() &#123;&#125;,</span><br><span class="line">destroyed() &#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fl6bx36VFinnwpDPz25fF_XcpTcl" alt="生命周期"></p><p>注意：不要在选项 <code>property</code> 或回调上使用箭头函数，因为箭头函数并没有 <code>this</code>，<code>this</code> 会作为变量一直向上级词法作用域查找，直至找到为止，会导致出现属性未定义、方法不存在的错误。</p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><blockquote><p>在 <code>Vue.js</code> 的使用上，框架提供了基于 <code>HTML</code> 的 <code>模板语法</code> 和 <code>渲染函数(render) &amp; JSX</code>。</p></blockquote><p><code>模板语法</code> 允许开发者声明式地将 <code>DOM</code> 绑定至底层 <code>Vue</code> 实例的数据。然后 <code>Vue</code> 将模板编译成虚拟 <code>DOM</code> 渲染函数。结合响应系统，<code>Vue</code> 能够智能地计算出最少需要重新渲染多少组件，并把 <code>DOM</code> 操作次数减到最少。</p><p>如果熟悉虚拟 <code>DOM</code> 并偏爱原生的 <code>JavaScript</code>，可使用 <code>渲染函数(render)+JSX语法</code>。</p><p>这里介绍模板语法的使用方法。</p><h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><h4 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h4><p>数据绑定最常见的形式就是使用双大括号进行文本插值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"ComponentItem"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      msg: <span class="string">"This is a message"</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="原始-HTML"><a href="#原始-HTML" class="headerlink" title="原始 HTML"></a>原始 HTML</h4><p>双大括号会将数据解释为普通文本，而非 <code>HTML</code> 代码。使用 <code>v-html</code> 可以输出 <code>HTML</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"html"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"ComponentItem"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      msg: <span class="string">"This is a message"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">      html: "<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">'color:red'</span>&gt;</span>This should bu red<span class="tag">&lt;/<span class="name">span</span>&gt;</span>"</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：动态渲染的任意 <code>HTML</code> 可能会非常危险，因为它很容易导致 <code>XSS</code> 攻击。只对可信内容使用 <code>HTML</code> 插值，绝不要对用户提供的内容使用插值。</p><h4 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a><code>Attribute</code></h4><p>使用 <code>v-bind</code> 指令动态绑定到 <code>HTML attribute</code> 上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"ComponentItem"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      id: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用-JavaScript-表达式"><a href="#使用-JavaScript-表达式" class="headerlink" title="使用 JavaScript 表达式"></a>使用 <code>JavaScript</code> 表达式</h4><p>同时，所有的数据绑定 <code>Vue.js</code> 还提供了完全的 <code>JavaScript</code> 表达式支持:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"'list-' + id"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"ComponentItem"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      id: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><blockquote><p>指令(<code>Directives</code>) 是带有 <code>v-</code> 前缀的特殊 <code>attribute</code>。</p></blockquote><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。如，<code>v-bind</code> 指令可以用于响应式地绑定更新 <code>HTML attribute</code>、<code>v-on</code> 指令可以用于绑定事件监听器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>URL<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"handleClick"</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"ComponentItem"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      url: <span class="string">"https://akashi_sai.gitee.io"</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"clicked!"</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里 <code>v-bind</code> 指令将该元素的 <code>href</code> <code>attribute</code> 与表达式 <code>url</code> 的值绑定，<code>v-on</code> 指令将该元素的 <code>click</code> 事件与 <code>handleClick</code> 方法进行绑定。</p><h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><p>可以用方括号括起来的 <code>JavaScript</code> 表达式作为一个指令的参数，将上面的例子修改一下就可写为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">href</span>]=<span class="string">"url"</span>&gt;</span>URL<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"ComponentItem"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      href: <span class="string">'href'</span>,</span></span><br><span class="line"><span class="actionscript">      url: <span class="string">"https://akashi_sai.gitee.io"</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虽然效果上好像没有什么不同，但好处是这个参数可以是动态计算出来的，方便后续修改和提供了更多操作的可能。</p><ul><li>对动态参数的值的约束</li></ul><ol><li><p>动态参数预期会求出一个 <code>字符串</code>，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p></li><li><p>语法上的约束，如空格和引号放在 <code>HTML attribute</code> 名里是无效的。</p></li></ol><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>修饰符(<code>modifier</code>)是以半角句号 <code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修饰符可以分类为事件修饰符、按键修饰符、系统修饰符和自定义修饰符。</p><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><p>简写是 <code>Vue</code> 提供的一种可选的合法字符，用于会频繁使用的两个特定的 <code>attribute</code>，<code>v-bind</code> 和 <code>v-on</code>。</p><h4 id="v-bind-缩写"><a href="#v-bind-缩写" class="headerlink" title="v-bind 缩写"></a><code>v-bind</code> 缩写</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">"url"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-on-缩写"><a href="#v-on-缩写" class="headerlink" title="v-on 缩写"></a><code>v-on</code> 缩写</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">event</span>]=<span class="string">"doSomething"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h2><h3 id="计算属性-Computed"><a href="#计算属性-Computed" class="headerlink" title="计算属性(Computed)"></a>计算属性(<code>Computed</code>)</h3><blockquote><p>用于解耦模板内的复杂逻辑，达到方便维护和简洁清晰的效果。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"ComponentItem"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      message: <span class="string">"This is a message!"</span>,</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    msg() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.message</span></span><br><span class="line"><span class="actionscript">        .split(<span class="string">""</span>)</span></span><br><span class="line">        .reverse()</span><br><span class="line"><span class="actionscript">        .join(<span class="string">""</span>);</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="计算属性缓存-computed-vs-方法-methods"><a href="#计算属性缓存-computed-vs-方法-methods" class="headerlink" title="计算属性缓存(computed) vs 方法(methods)"></a>计算属性缓存(<code>computed</code>) <code>vs</code> 方法(<code>methods</code>)</h4><p>我们发现调用方法也可以实现同样的效果，区别在于 <code>计算属性</code> 是基于它们的响应式依赖进行缓存的，只在相关响应式依赖发生改变时它们才会重新求值。</p><p>而方法每当重新渲染时，都会再次执行函数。如果不希望一个值每次渲染都重新计算，那么使用方法在性能上是比较浪费的。</p><h4 id="计算属性-vs-监听属性"><a href="#计算属性-vs-监听属性" class="headerlink" title="计算属性 vs 监听属性"></a>计算属性 <code>vs</code> 监听属性</h4><p>侦听属性是一个更通用的方式来观察和响应 <code>vue</code> 实例上的数据变动。但 <code>Vue</code> 官方建议，不要滥用 <code>watch</code>，通常更好的做法是使用计算属性。</p><h4 id="计算属性的-setter"><a href="#计算属性的-setter" class="headerlink" title="计算属性的 setter"></a>计算属性的 <code>setter</code></h4><p>计算属性默认只有 <code>getter</code>，不过在需要时也可以提供一个 <code>setter</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    <span class="keyword">set</span>: function (newValue) &#123;</span><br><span class="line">      <span class="keyword">let</span> names = newValue.split(<span class="string">' '</span>)</span><br><span class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="侦听器-Watch"><a href="#侦听器-Watch" class="headerlink" title="侦听器(Watch)"></a>侦听器(<code>Watch</code>)</h3><p>虽然计算属性在大多数情况下更合适，但有时也需要一个 <code>自定义的侦听器</code>。这就是为什么 <code>Vue</code> 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行 <code>异步</code> 或 <code>开销较大</code> 的操作时，这个方式是最有用的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>FullName: &#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>FirstName: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"firstName"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"ComponentItem"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      firstName: <span class="string">"Akashi"</span>,</span></span><br><span class="line"><span class="actionscript">      lastName: <span class="string">"Sai"</span>,</span></span><br><span class="line"><span class="actionscript">      fullName: <span class="string">""</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName(newName, oldName) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.fullName = newName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="handler-和-immediate"><a href="#handler-和-immediate" class="headerlink" title="handler 和 immediate"></a><code>handler</code> 和 <code>immediate</code></h4><p>以上是变化之后，<code>wath</code> 才执行，需要在最初时候 <code>watch</code> 就执行用到 ·、<code>handler</code> 和 <code>immediate</code> 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  firstName: &#123;</span><br><span class="line">    handler(newName, oldName) &#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = newName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">    &#125;,</span><br><span class="line">    immediate: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深度监听-deep"><a href="#深度监听-deep" class="headerlink" title="深度监听 deep"></a>深度监听 <code>deep</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; obj.a &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>obj.a <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"obj.a"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"ComponentItem"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      obj: &#123;</span><br><span class="line"><span class="actionscript">        a: <span class="string">"123"</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">      handler(val) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'obj.a'</span>, val);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      deep: <span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时，官网也给出了监听不同层级的对应方法，效果与上述相同：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">'obj.a'</span>: &#123;</span><br><span class="line">    handler(val) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'obj.a'</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听同时也可以通过方法的形式写在 <code>methods</code> 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">"obj.a"</span>: <span class="string">"watchMethods"</span> <span class="comment">// 方法名</span></span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  watchMethods(val) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'val'</span>, val);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a><code>Class</code> 与 <code>Style</code> 绑定</h2><blockquote><p>操作元素的 <code>class</code> 列表和内联样式是数据绑定的一个常见需求。一般操作是通过 <code>v-bind</code> 绑定后处理。</p></blockquote><p>而将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，<code>Vue.js</code> 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。</p><h3 id="绑定-HTML-Class"><a href="#绑定-HTML-Class" class="headerlink" title="绑定 HTML Class"></a>绑定 <code>HTML Class</code></h3><h4 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    isActive: <span class="literal">true</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"active"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>同时，也可以绑定在一个返回的计算属性中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    isActive: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">computed: &#123;</span><br><span class="line">  classObject() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      active: <span class="keyword">this</span>.isActive</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上效果是相同的。</p><h4 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    classObject: [<span class="string">'active'</span>, <span class="string">'text'</span>]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"active text"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h3><h4 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"styles"</span>&gt;</span>Akashi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    styles: &#123;</span><br><span class="line">      color: <span class="string">'red'</span>,</span><br><span class="line">      fontSize: <span class="string">'13px'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，对象语法常常结合返回对象的计算属性使用。</p><h4 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span>Akashi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    baseStyles: &#123;</span><br><span class="line">      color: <span class="string">'red'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    overridingStyles: &#123;</span><br><span class="line">      fontSize: <span class="string">'13px'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 亲测这样声明并不会生效，数组必须直接声明在内联样式中</span></span><br><span class="line">    <span class="comment">// styles: [this.baseStyles, this.overridingStyles]</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><blockquote><p><code>v-if</code> 指令用于条件性地渲染一块内容。当返回的值为真的时候被渲染。</p></blockquote><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a><code>v-if</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type === 'a'"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'b'"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>Not A/B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: <span class="string">'c'</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Not A/B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="用-key-管理可复用元素"><a href="#用-key-管理可复用元素" class="headerlink" title="用 key 管理可复用元素"></a>用 <code>key</code> 管理可复用元素</h4><p>默认 <code>Vue</code> 元素是复用的，这样可以高效的渲染元素，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"loginType === 'username'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your email address"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码中切换 <code>loginType</code> 将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，<code>&lt;input&gt;</code> 不会被替换掉——仅仅是替换了它的 <code>placeholder</code>。</p><p>当需求是不需要复用，使用完全独立的两个元素时，可以添加具有唯一值的 <code>key</code> 属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"loginType === 'username'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your username"</span> <span class="attr">key</span>=<span class="string">"username-input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your email address"</span> <span class="attr">key</span>=<span class="string">"email-input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><code>v-show</code></h3><blockquote><p>与 <code>v-if</code> 相似，根据条件展示元素。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"true"</span>&gt;</span>Show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 <code>DOM</code> 中。<code>v-show</code> 只是简单地切换元素的 <code>CSS</code> <code>property</code> <code>display</code>。</p><h3 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a><code>v-if</code> vs <code>v-show</code></h3><p><code>v-if</code> 会动态的渲染和重建节点元素，是属于真正的条件渲染，同时它也是惰性的，只有条件为真时才会渲染。</p><p><code>v-show</code> 无论条件真假都会渲染，只是动态对 <code>CSS</code> 进行切换进而实现显隐。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><p>同时，不推荐同时使用 <code>v-if</code> 和 <code>v-for</code>。当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级，即在每次重新渲染的时候都会遍历整个列表，即使 <code>v-if</code> 为 <code>false</code>。</p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><blockquote><p><code>v-for</code> 指令基于一个数组来渲染一个列表。</p></blockquote><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a><code>v-for</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">      &#123;&#123; index &#125;&#125; - &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    items: [<span class="string">"akashi"</span>, <span class="string">"asuka"</span>, <span class="string">"agkki"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意参数顺序，第一个参数为值，第二个参数为当前项的索引（可省略）。</p><p>为了 <code>Vue</code> 能跟踪每个节点的身份，从而重用和重新排序现有元素，需要为每项提供一个唯一的 <code>key</code> 属性。</p><h4 id="使用对象"><a href="#使用对象" class="headerlink" title="使用对象"></a>使用对象</h4><p>同时 <code>v-for</code> 也支持使用对象进行迭代：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) of items"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">      &#123;&#123; index &#125;&#125; - &#123;&#123; key &#125;&#125; - &#123;&#123; value &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    items: &#123;</span><br><span class="line">      name: <span class="string">"akashi"</span>,</span><br><span class="line">      age: <span class="number">23</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：这时，参数顺序变为了键值、键名、索引。</p><p>同时，也可以用 <code>of</code> 替代 <code>in</code> 作为分隔符，它更接近 <code>JavaScript</code> 迭代器的语法。</p><p>而我们在实际中的开发中，更多的是使用数组对象的情况：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span> <span class="attr">:key</span>=<span class="string">"item.name"</span>&gt;</span></span><br><span class="line">      &#123;&#123; index &#125;&#125; - &#123;&#123; item.name &#125;&#125; - &#123;&#123; item.age &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    items: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"akashi"</span>,</span><br><span class="line">        age: <span class="number">23</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"asuka"</span>,</span><br><span class="line">        age: <span class="number">22</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"gakki"</span>,</span><br><span class="line">        age: <span class="number">31</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h4><p><code>Vue</code> 将 <code>JS</code> 的数组方法进行了侦听，数组方法的触发也会动态的更新到视图。</p><p>其中包括：</p><ul><li><p>变更方法</p><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li><li><code>join()</code></li></ul></li></ul><p>注：此类方法对原数组进行了修改。</p><ul><li><p>替换数组</p><ul><li><code>filter()</code></li><li><code>concat()</code></li><li><code>slice()</code></li><li><code>map()</code></li></ul></li></ul><p>注：此类方法会返回一个新的数组，而不会改变原始数组。</p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="监听事件及处理方法"><a href="#监听事件及处理方法" class="headerlink" title="监听事件及处理方法"></a>监听事件及处理方法</h3><p>可以用 <code>v-on</code> 指令监听 <code>DOM</code> 事件（简写为 <code>@</code>），并在触发时运行一些 <code>JavaScript</code> 代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Counter: &#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.counter += <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>访问原始的 <code>DOM</code> 事件。可以使用特殊变量 <code>$event</code>，将其传入方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleClick($event)"</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleClick(e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'$event'</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：如果函数不需要多余参数值，默认定义的参数同样可以获取 <code>DOM</code> 事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleClick(e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'$event'</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><blockquote><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 <code>DOM</code> 事件细节。</p></blockquote><p>为此，<code>Vue.js</code> 为 <code>v-on</code> 提供了事件修饰符：</p><ul><li><code>.stop</code></li><li><code>.prevent</code></li><li><code>.capture</code></li><li><code>.self</code></li><li><code>.once</code></li><li><code>.passive</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:scroll.passive</span>=<span class="string">"onScroll"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"onEnter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onEnter(e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了在必要的情况下支持旧浏览器，<code>Vue</code> 提供了绝大多数常用的按键码的别名：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“删除”和“退格”键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><p>还可以通过全局 <code>config.keyCodes</code> 对象自定义按键修饰符别名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以使用 `v-on:keyup.f1`</span></span><br><span class="line">Vue.config.keyCodes.f1 = <span class="number">112</span></span><br></pre></td></tr></table></figure><h3 id="系统修饰符"><a href="#系统修饰符" class="headerlink" title="系统修饰符"></a>系统修饰符</h3><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p><ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul><p>注：在 <code>Mac</code> 系统键盘上，<code>meta</code> 对应 <code>command</code> 键 (<code>⌘</code>)。在 <code>Windows</code> 系统键盘 <code>meta</code> 对应 <code>Windows</code> 徽标键 (<code>⊞</code>)。在 <code>Sun</code> 操作系统键盘上，<code>meta</code> 对应实心宝石键 (<code>◆</code>)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Alt + C --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.alt.67</span>=<span class="string">"clear"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="exact-修饰符"><a href="#exact-修饰符" class="headerlink" title=".exact 修饰符"></a><code>.exact</code> 修饰符</h4><p><code>.exact</code> 修饰符允许你控制由精确的系统修饰符组合触发的事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.ctrl</span>=<span class="string">"onClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.ctrl.exact</span>=<span class="string">"onCtrlClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.exact</span>=<span class="string">"onClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h4><ul><li><code>.left</code></li><li><code>.right</code></li><li><code>.middle</code></li></ul><p>这些修饰符会限制处理函数仅响应特定的鼠标按钮。</p><h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><blockquote><p>使用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。</p></blockquote><p>v-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p><ul><li>text 和 textarea 元素使用 value property 和 input 事件；</li><li>checkbox 和 radio 使用 checked property 和 change 事件；</li><li>select 字段将 value 作为 prop 并将 change 作为事件</li></ul><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    message: <span class="string">""</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"edit..."</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    message: <span class="string">""</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    checked: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>多个复选框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"akashi"</span>&gt;</span>Akashi<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"checkbox"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">"akashi"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">value</span>=<span class="string">"akashi"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"checkedNames"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"asuka"</span>&gt;</span>Asuka<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"checkbox"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">"asuka"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">value</span>=<span class="string">"asuka"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"checkedNames"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"gakki"</span>&gt;</span>Gakki<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"checkbox"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">"gakki"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">value</span>=<span class="string">"gakki"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"checkedNames"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>CheckedNames: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    checkedNames: [],</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"akashi"</span>&gt;</span>Akashi<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"akashi"</span> <span class="attr">value</span>=<span class="string">"akashi"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"asuka"</span>&gt;</span>Asuka<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"asuka"</span> <span class="attr">value</span>=<span class="string">"asuka"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"gakki"</span>&gt;</span>Gakki<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"gakki"</span> <span class="attr">value</span>=<span class="string">"gakki"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    picked: <span class="string">""</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span> <span class="attr">style</span>=<span class="string">"width:60px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"akashi"</span>&gt;</span>Akashi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"asuka"</span>&gt;</span>Asuka<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"gakki"</span>&gt;</span>Gakki<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    selected: <span class="string">""</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定值"><a href="#绑定值" class="headerlink" title="绑定值"></a>绑定值</h3><p>即单选框、复选框、选择框的 <code>value</code> 的绑定。各组件 <code>v-model</code> 绑定状态下会修改 <code>vlue</code> 的值。</p><h3 id="修饰符-1"><a href="#修饰符-1" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li><code>.lazy</code></li></ul><p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步。通过添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件 <code>之后</code> 进行同步。</p><ul><li><code>.number</code></li></ul><p>如果想自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符。</p><ul><li><code>.trim</code></li></ul><p>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符。</p><h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><p>基本使用：</p><blockquote><p><code>ButtonCounter.vue</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"onClick"</span>&gt;</span>clicked &#123;&#123; count &#125;&#125; times<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"ButtonCounter"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      count: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onClick() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.count++;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>App.vue</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ButtonCounter</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> ButtonCounter <span class="keyword">from</span> <span class="string">"./components/ButtonCounter"</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"App"</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    ButtonCounter</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h3><blockquote><p>组件可以被多次复用，但每个组件都会维护一个独立的 <code>data</code>。</p></blockquote><p>一个组件的 <code>data</code> 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。</p><blockquote><p><code>App.vue</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ButtonCounter</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ButtonCounter</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ButtonCounter</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> ButtonCounter <span class="keyword">from</span> <span class="string">"./components/ButtonCounter"</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"App"</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    ButtonCounter</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Prop-向子组件传递数据"><a href="#Prop-向子组件传递数据" class="headerlink" title="Prop 向子组件传递数据"></a><code>Prop</code> 向子组件传递数据</h3><blockquote><p><code>Prop</code> 允许我们在组件上注册一些自定义属性，子组件 <code>prop</code> 属性通过接收父组件传递过来的值实现数据传递。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">:title</span>=<span class="string">"title"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> BlogPost <span class="keyword">from</span> <span class="string">"./components/BolgPost"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"App"</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    BlogPost,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      title: <span class="string">"Blog"</span>,</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>BlogPost.vue</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"BlogPost"</span>,</span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">"title"</span>],</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单个根元素"><a href="#单个根元素" class="headerlink" title="单个根元素"></a>单个根元素</h3><blockquote><p>值得注意的是，每个组件必须只有一个 <code>根元素</code>。在开发时，可以使用一个父元素统一将模板内容包裹。<code>prop</code> 太多也需要对数据进行重构，以保证内容的清晰和易维护。</p></blockquote><p>一个好的例子：</p><blockquote><p><code>BlogPost.vue</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blog-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; params.title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; params.author &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"BlogPost"</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="actionscript">      required: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;&#125;),</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>App.vue</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">:params</span>=<span class="string">"paramsData"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> BlogPost <span class="keyword">from</span> <span class="string">"./components/BolgPost"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"App"</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    BlogPost,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      paramsData: &#123;</span><br><span class="line"><span class="actionscript">        title: <span class="string">"Blog"</span>,</span></span><br><span class="line"><span class="actionscript">        author: <span class="string">"Akashi"</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="监听子组件事件"><a href="#监听子组件事件" class="headerlink" title="监听子组件事件"></a>监听子组件事件</h3><blockquote><p>在开发中，不仅仅需要自上而下从父组件向子组件传递数据，同时也会有子组件向父组件进行沟通的需求。</p></blockquote><p>为保证单向数据流，自然是不允许子组件直接修改父组件的数据，造成数据的维护困难。这里就要引出自定义事件对子组件进行监听：</p><p>父级组件可以像处理 <code>native</code> <code>DOM</code> 事件一样通过 <code>v-on</code> 监听子组件实例的任意事件：</p><blockquote><p><code>App.vue</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">:params</span>=<span class="string">"paramsData"</span> @<span class="attr">enlarge-text</span>=<span class="string">"enlargeText"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> BlogPost <span class="keyword">from</span> <span class="string">"./components/BolgPost"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"App"</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    BlogPost,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      paramsData: &#123;</span><br><span class="line"><span class="actionscript">        title: <span class="string">"Blog"</span>,</span></span><br><span class="line"><span class="actionscript">        author: <span class="string">"Akashi"</span>,</span></span><br><span class="line">        style: &#123;</span><br><span class="line">          fontSize: 1,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    enlargeText() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.paramsData.style.fontSize += <span class="number">0.1</span>;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时子组件可以通过调用内建的 <code>$emit</code> 方法并传入事件名称来触发一个事件：</p><blockquote><p><code>BlogPost.vue</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"styles"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; params.title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; params.author &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"onClick"</span>&gt;</span>Enlarge text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"BlogPost"</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="actionscript">      required: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;&#125;),</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    styles() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        fontSize: <span class="keyword">this</span>.params.style.fontSize + <span class="string">"em"</span>,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onClick() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">"enlarge-text"</span>);</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用事件抛出一个值"><a href="#使用事件抛出一个值" class="headerlink" title="使用事件抛出一个值"></a>使用事件抛出一个值</h4><p>有时候需要向上传递一个特殊的值，这时可以使用 <code>$emit</code> 的第二个参数来提供这个值：</p><blockquote><p><code>BlogPost.vue</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"styles"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; params.title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; params.author &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"onClick"</span>&gt;</span>Enlarge text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"BlogPost"</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="actionscript">      required: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;&#125;),</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    styles() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        fontSize: <span class="keyword">this</span>.params.style.fontSize + <span class="string">"em"</span>,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      count: 0.1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onClick() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">"enlarge-text"</span>, <span class="keyword">this</span>.count++);</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时，父组件在监听这个事件的时候，可以通过 <code>$event</code> 访问到被抛出的这个值：</p><blockquote><p><code>App.vue</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">:params</span>=<span class="string">"paramsData"</span> @<span class="attr">enlarge-text</span>=<span class="string">"enlargeText"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> BlogPost <span class="keyword">from</span> <span class="string">"./components/BolgPost"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"App"</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    BlogPost,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      paramsData: &#123;</span><br><span class="line"><span class="actionscript">        title: <span class="string">"Blog"</span>,</span></span><br><span class="line"><span class="actionscript">        author: <span class="string">"Akashi"</span>,</span></span><br><span class="line">        style: &#123;</span><br><span class="line">          fontSize: 1,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    enlargeText(e) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.paramsData.style.fontSize += e;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在组件上使用-v-model"><a href="#在组件上使用-v-model" class="headerlink" title="在组件上使用 v-model"></a>在组件上使用 <code>v-model</code></h4><blockquote><p>自定义事件也可以用于创建支持 v-model 的自定义输入组件。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"App"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      text: <span class="string">""</span>,</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:value</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">input</span>=<span class="string">"onInput"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"App"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      text: <span class="string">""</span>,</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onInput(e) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.text = e.target.value;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了让组件正常工作，这个组件内的 <code>&lt;input&gt;</code> 必须：</p><ul><li>将其 <code>value</code> <code>attribute</code> 绑定到一个名叫 <code>value</code> 的 <code>prop</code> 上</li><li>在其 <code>input</code> 事件被触发时，将新的值通过自定义的 <code>input</code> 事件抛出</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:value</span>=<span class="string">"value"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">input</span>=<span class="string">"onInput($event)"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"CustomInput"</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">default</span>: <span class="string">""</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onInput(e) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">"input"</span>, e.target.value);</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就可以在组件上使用 <code>v-model</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CustomInput</span> <span class="attr">v-model</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> CustomInput <span class="keyword">from</span> <span class="string">"./components/CustomInput"</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"App"</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    CustomInput,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      text: <span class="string">""</span>,</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过插槽分发内容"><a href="#通过插槽分发内容" class="headerlink" title="通过插槽分发内容"></a>通过插槽分发内容</h3><p>有时父组件需要动态的向一个子组件传递内容。</p><p>这时可以使用 <code>slot</code> 插槽在子组件中进行占位：</p><blockquote><p><code>ContextBox.vue</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Error!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"ContextBox"</span>,</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在父组件中可以直接将节点内容传递过去：</p><blockquote><p><code>App.vue</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ContextBox</span>&gt;</span>Something bad happened.<span class="tag">&lt;/<span class="name">ContextBox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> ContextBox <span class="keyword">from</span> <span class="string">"./components/ContextBox"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"App"</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    ContextBox,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际上插槽还有具名插槽和作用域插槽等，这里暂时先只介绍一般插槽的使用。</p><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>在一个需求中，需要在不同的组件之间动态的进行切换，这时可以通过 <code>Vue</code> 的 <code>&lt;component&gt;</code> 元素加一个特殊的 <code>is</code> <code>attribute</code> 来实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"tab in tabs"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"tab.name"</span> </span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"onClick(tab.component)"</span></span></span><br><span class="line"><span class="tag">    &gt;</span>&#123;&#123; tab.name &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"currentTab"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"./components/Home"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">"./components/About"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"App"</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    Home,</span><br><span class="line">    About,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      tabs: [</span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">          name: <span class="string">"Home"</span>,</span></span><br><span class="line">          component: Home,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">          name: <span class="string">"About"</span>,</span></span><br><span class="line">          component: About,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line"><span class="actionscript">      currentTab: <span class="string">"Home"</span>,</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onClick(tab) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.currentTab = tab;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>is</code> 属性指明了被绑定的组件，这个 <code>attribute</code> 可以用于常规 <code>HTML</code> 元素，但这些元素也将被视为组件，这意味着所有的 <code>attribute</code> 都会作为 <code>DOM</code> <code>attribute</code> 被绑定。</p><p>以上就是 <code>Vue</code> 官方文档中使用 <code>vue</code> 的基础介绍梳理。在重看整理的同时也加入了一些笔者常用内容的记录、对官方的例子进行了具体实现。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cesium 上手不完全指北</title>
      <link href="2020/08/01/cesium/cesium/"/>
      <url>2020/08/01/cesium/cesium/</url>
      
        <content type="html"><![CDATA[<h1 id="Cesium-上手不完全指北"><a href="#Cesium-上手不完全指北" class="headerlink" title="Cesium 上手不完全指北"></a>Cesium 上手不完全指北</h1><blockquote><p>将最近学习的 <code>CesiumJS</code> 做一个系统梳理，从项目配置开始，记录常用 <code>API</code> 的使用。</p></blockquote><a id="more"></a><h2 id="环境搭建与安装"><a href="#环境搭建与安装" class="headerlink" title="环境搭建与安装"></a>环境搭建与安装</h2><p>首先，什么是 <code>Cesium</code>，<code>Cesium</code> 是一款开源的基于 <code>JavaScript</code> 的 <code>3D</code> 地图框架，即地图可视化框架。产品基于 <code>WebGL</code> 技术，我们可以使用 <code>CesiumJS</code> 创建虚拟场景的 <code>3D</code> 地理信息平台。其目标是用于创建以基于 <code>Web</code> 的地图动态数据可视化。在提升平台的性能、准确率、虚拟化能力、易用性方面提供各种支持。</p><p>更多介绍和信息可通过<a href="https://cesium.com/" target="_blank" rel="noopener">官网</a>进行学习。</p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p><code>Cesium ion</code> 是一个提供瓦片图和 <code>3D</code> 地理空间数据的平台，<code>Cesium ion</code> 支持把数据添加到用户自己的 <code>CesiumJS</code> 应用中。使用二三维贴图和世界地形都需要 <code>ion</code> 的支持，如果没有自己的数据源需要 <code>cesium</code> 提供的数据源就需要申请 <code>ion</code> 的 <code>token</code>，具体可以通过以下链接申请 <a href="https://cesium.com/ion/" target="_blank" rel="noopener">access token</a>。</p><p>在创建 <code>Cesium Viewer</code> 的时候，将 <code>access token</code> 填为自己的 <code>access token</code> 即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cesium.Ion.defaultAccessToken = <span class="string">'&lt;YOUR ACCESS TOKEN HERE&gt;'</span>;</span><br></pre></td></tr></table></figure><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p>进入项目搭建过程，项目选择在 <code>Vue</code> 平台上进行实现，首先创建项目安装 <code>cesium</code> 库：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue create cesium-vue</span><br><span class="line">cd cesium-vue</span><br><span class="line">npm i cesium@<span class="number">1.61</span> --save</span><br></pre></td></tr></table></figure><p>注意：目前使用 <code>webpack</code> 进行配置引用最新版本(1.71) <code>cesium</code> 暂时不能导入，实测 <a href="mailto:`cesium@1.61" target="_blank" rel="noopener">`cesium@1.61</a><code>版本可以进行</code>import` 导入。</p><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>根目录下新建 <code>vue.config.js</code> 配置文件，对项目进行基本配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"><span class="keyword">let</span> cesiumSource = <span class="string">'./node_modules/cesium/Source'</span></span><br><span class="line"><span class="keyword">let</span> cesiumWorkers = <span class="string">'../Build/Cesium/Workers'</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    publicPath: <span class="string">''</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">9999</span></span><br><span class="line">    &#125;,</span><br><span class="line">    configureWebpack: &#123;</span><br><span class="line">        output: &#123;</span><br><span class="line">            sourcePrefix: <span class="string">' '</span></span><br><span class="line">        &#125;,</span><br><span class="line">        amd: &#123;</span><br><span class="line">            toUrlUndefined: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        resolve: &#123;</span><br><span class="line">            alias: &#123;</span><br><span class="line">                <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">                <span class="string">'@'</span>: path.resolve(<span class="string">'src'</span>),</span><br><span class="line">                <span class="string">'cesium'</span>: path.resolve(__dirname, cesiumSource)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        plugins: [</span><br><span class="line">            <span class="keyword">new</span> CopyWebpackPlugin([&#123; <span class="attr">from</span>: path.join(cesiumSource, cesiumWorkers), <span class="attr">to</span>: <span class="string">'Workers'</span>&#125;]),</span><br><span class="line">            <span class="keyword">new</span> CopyWebpackPlugin([&#123; <span class="attr">from</span>: path.join(cesiumSource, <span class="string">'Assets'</span>), <span class="attr">to</span>: <span class="string">'Assets'</span>&#125;]),</span><br><span class="line">            <span class="keyword">new</span> CopyWebpackPlugin([&#123; <span class="attr">from</span>: path.join(cesiumSource, <span class="string">'Widgets'</span>), <span class="attr">to</span>: <span class="string">'Widgets'</span>&#125;]),</span><br><span class="line">            <span class="keyword">new</span> CopyWebpackPlugin([&#123; <span class="attr">from</span>: path.join(cesiumSource, <span class="string">'ThirdParty/Workers'</span>), <span class="attr">to</span>: <span class="string">'ThirdParty/Workers'</span>&#125;]),</span><br><span class="line">            <span class="keyword">new</span> webpack.DefinePlugin(&#123; <span class="attr">CESIUM_BASE_URL</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'./'</span>) &#125;),</span><br><span class="line">            <span class="keyword">new</span> CopyWebpackPlugin([&#123; <span class="attr">from</span>: path.join(<span class="string">'./static'</span>, <span class="string">'model'</span>), <span class="attr">to</span>: <span class="string">'model3D'</span> &#125;]),</span><br><span class="line">            <span class="keyword">new</span> CopyWebpackPlugin([&#123; <span class="attr">from</span>: path.join(<span class="string">'./static'</span>, <span class="string">'images'</span>), <span class="attr">to</span>: <span class="string">'images'</span> &#125;])</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在根目录下创建 <code>static</code> 文件夹用于后续 <code>model</code> 和 <code>images</code> 的存放。</p><h3 id="组件实现"><a href="#组件实现" class="headerlink" title="组件实现"></a>组件实现</h3><p>在 <code>src/components/</code> 下新建 <code>CesiumViewer.vue</code> 进行组件实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"cesiumContainer"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Cesium <span class="keyword">from</span> <span class="string">'cesium/Cesium'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'cesium/Widgets/widgets.css'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'CesiumViewer'</span>,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">        <span class="comment">// token</span></span><br><span class="line">        Cesium.Ion.defaultAccessToken = <span class="string">'your token'</span>;</span><br><span class="line">        <span class="keyword">let</span> viewer = <span class="keyword">new</span> Cesium.Viewer(<span class="string">'cesiumContainer'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">#cesiumContainer &#123;</span></span><br><span class="line"><span class="regexp">    display: block;</span></span><br><span class="line"><span class="regexp">    position: absolute;</span></span><br><span class="line"><span class="regexp">    top: 0;</span></span><br><span class="line"><span class="regexp">    left: 0;</span></span><br><span class="line"><span class="regexp">    border: none;</span></span><br><span class="line"><span class="regexp">    width: 100%;</span></span><br><span class="line"><span class="regexp">    height: 100%;</span></span><br><span class="line"><span class="regexp">    margin: 0;</span></span><br><span class="line"><span class="regexp">    padding: 0;</span></span><br><span class="line"><span class="regexp">    overflow: hidden;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>可以看到地图在调用 <code>Cesium</code> 的 <code>Viewer</code> 时开始构建。<code>Viewer</code> 是 <code>Cesium</code> <code>API</code> 的起点，<code>new Viewer</code> 后便可以看见地球对象。</p><h3 id="组件声明"><a href="#组件声明" class="headerlink" title="组件声明"></a>组件声明</h3><p>在 <code>App.vue</code> 中引用组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;CesiumViewer&gt;&lt;<span class="regexp">/CesiumViewer&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import CesiumViewer from './</span>components/CesiumViewer<span class="string">'</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  name: '</span>App<span class="string">',</span></span><br><span class="line"><span class="string">  components: &#123;</span></span><br><span class="line"><span class="string">    CesiumViewer</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>运行查看效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FruwP2PUmpBWS6DUgt7BP3uSwttg" alt="运行效果"></p><p>此时，已经可以看见最开始的地球🌏效果，我们进行一些简单配置和调整：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Cesium <span class="keyword">from</span> <span class="string">'cesium/Cesium'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'cesium/Widgets/widgets.css'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'CesiumViewer'</span>,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        init () &#123;</span><br><span class="line">            <span class="keyword">let</span> viewerOption = &#123;</span><br><span class="line">                geocoder: <span class="literal">false</span>,                <span class="comment">// 地理位置搜索控件</span></span><br><span class="line">                homeButton: <span class="literal">false</span>,              <span class="comment">// 首页跳转控件</span></span><br><span class="line">                sceneModePicker: <span class="literal">false</span>,         <span class="comment">// 2D,3D和Columbus View切换控件</span></span><br><span class="line">                baseLayerPicker: <span class="literal">false</span>,         <span class="comment">// 三维地图底图切换控件</span></span><br><span class="line">                navigationHelpButton: <span class="literal">false</span>,    <span class="comment">// 帮助提示控件</span></span><br><span class="line">                animation: <span class="literal">false</span>,               <span class="comment">// 视图动画播放速度控件</span></span><br><span class="line">                timeline: <span class="literal">false</span>,                <span class="comment">// 时间轴控件</span></span><br><span class="line">                fullscreenButton: <span class="literal">false</span>,        <span class="comment">// 全屏控件</span></span><br><span class="line">                infoBox: <span class="literal">false</span>,                 <span class="comment">// 点击显示窗口控件</span></span><br><span class="line">                selectionIndicator: <span class="literal">false</span>,      <span class="comment">// 实体对象选择框控件</span></span><br><span class="line">                scene3DOnly: <span class="literal">true</span>               <span class="comment">// 仅3D渲染，节省GPU内存</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// token</span></span><br><span class="line">            Cesium.Ion.defaultAccessToken = <span class="string">'your token'</span>;</span><br><span class="line">            <span class="keyword">let</span> viewer = <span class="keyword">new</span> Cesium.Viewer(<span class="string">'cesiumContainer'</span>, viewerOption);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 隐藏Logo</span></span><br><span class="line">            viewer.cesiumWidget.creditContainer.style.display = <span class="string">"none"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>最终效果如下：</p><p><img src="http://images.akashi.org.cn/FvBmVIrV92DLI6lIOhq4QO1yO49H" alt="最终效果"></p><p>至此，最开始的构建运行就已经完成了，下面对具体 <code>API</code> 进行学习。</p><h2 id="Imagery-图层"><a href="#Imagery-图层" class="headerlink" title="Imagery 图层"></a><code>Imagery</code> 图层</h2><p>开始 <code>API</code> 学习之前，为了方便方法实现，使用 <code>ref</code> 在元素上注册一个引用信息，方便通过 <code>ID</code> 直接访问一个子组件实例。</p><p>修改如下，引用信息将会注册在父组件的 <code>$refs</code> 对象上，子组件通过 <code>this.$viewer</code> 进行访问。</p><p>这里引入图层的概念(<code>Imagery</code>)，瓦片图集合根据不同的投影方式映射到虚拟的三维数字地球表面。依赖于相机指向地表的方向和距离，<code>Cesium</code> 会去请求和渲染不同层级的图层详细信息。</p><p>详细代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"cesiumContainer"</span> ref=<span class="string">"viewer"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Cesium <span class="keyword">from</span> <span class="string">'cesium/Cesium'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'cesium/Widgets/widgets.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'CesiumViewer'</span>,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加图层</span></span><br><span class="line">        <span class="keyword">this</span>.addLayers();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        init () &#123;</span><br><span class="line">            <span class="keyword">let</span> viewerOption = &#123;...&#125;</span><br><span class="line">            <span class="comment">// token</span></span><br><span class="line">            Cesium.Ion.defaultAccessToken = <span class="string">'your token'</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.$viewer = <span class="keyword">new</span> Cesium.Viewer(<span class="keyword">this</span>.$refs.viewer, viewerOption);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.$viewer.cesiumWidget.creditContainer.style.display = <span class="string">"none"</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 添加 `Imagery` (图层)</span></span><br><span class="line">        addLayers () &#123;</span><br><span class="line">            <span class="comment">// Remove default base layer</span></span><br><span class="line">            <span class="comment">// this.$viewer.imageryLayers.remove(this.$viewer.imageryLayers.get(0));</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Add grid imagery</span></span><br><span class="line">            <span class="keyword">this</span>.$viewer.imageryLayers.addImageryProvider(<span class="keyword">new</span> Cesium.GridImageryProvider());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FtYoEALUkR0l494wyk7ziUA3rOg_" alt="图层效果"></p><p>原理上和 <code>PS</code> 的图层一致，多个图层可以添加、移除和排序，渲染并适应到 <code>Cesium</code> 中。</p><h2 id="Terrain-地形"><a href="#Terrain-地形" class="headerlink" title="Terrain 地形"></a><code>Terrain</code> 地形</h2><p><code>Cesium</code> 的地形图层支持渐进式加载和渲染全球高精度地图，并且包括地形地势、水形数据，包括海洋、湖泊、河流、山峰、峡谷等效果。</p><p>为了添加地形数据，我们需要创建一个 <code>CesiumTerrainProvider</code>，通过 <code>createWorldTerrain</code> 函数创建一个由 <code>Cesium ion</code> 提供服务的 <code>Cesium WorldTerrian</code>，同时可提供配置项，请求额外的水和光数据，最终我们通过 <code>camera</code> 下的函数定位到创建的位置进行查看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"CesiumViewer"</span>,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加图层</span></span><br><span class="line">    <span class="comment">// this.addLayers();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加地形</span></span><br><span class="line">    <span class="keyword">this</span>.addTerrain();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    init() &#123;...&#125;,</span><br><span class="line">    <span class="comment">// 添加图层</span></span><br><span class="line">    addLayers() &#123;...&#125;,</span><br><span class="line">    <span class="comment">// 添加地形</span></span><br><span class="line">    addTerrain() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$viewer.terrainProvider = Cesium.createWorldTerrain(&#123;</span><br><span class="line">        requestWaterMask: <span class="literal">true</span>, <span class="comment">// required for water effects</span></span><br><span class="line">        requestVertexNormals: <span class="literal">true</span>, <span class="comment">// required for terrain lighting</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Enable depth testing so things behind the terrain disappear.</span></span><br><span class="line">      <span class="keyword">this</span>.$viewer.scene.globe.depthTestAgainstTerrain = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.$viewer.scene.camera.flyTo(&#123;</span><br><span class="line">        destination: Cesium.Cartesian3.fromRadians(</span><br><span class="line">          <span class="number">-2.6399828792482234</span>,</span><br><span class="line">          <span class="number">1.0993550795541742</span>,</span><br><span class="line">          <span class="number">5795</span></span><br><span class="line">        ),</span><br><span class="line">        orientation: &#123;</span><br><span class="line">          heading: <span class="number">3.8455</span>,</span><br><span class="line">          pitch: <span class="number">-0.4535</span>,</span><br><span class="line">          roll: <span class="number">0.0</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fr6_tW4VZX0PXlcKIoM7AKZ2Rtkx" alt="地形效果"></p><h2 id="Viewer-控件"><a href="#Viewer-控件" class="headerlink" title="Viewer 控件"></a><code>Viewer</code> 控件</h2><p>回到最开始的调整配置上，我们在 <code>viewerOption</code> 中对 <code>Viewer</code> 声明的一系列基本小控件做了移除和优化操作，具体 <code>API</code> 官方给出了如下描述：</p><p><img src="http://images.akashi.org.cn/Fh2xA_7j8gnzhM2IDfkYjyspi8q9" alt="viewer"></p><ol><li>Geocoder : A location search tool that flies the camera to queried location. Uses Bing Maps data by default.</li><li>HomeButton : Flies the viewer back to a default view.</li><li>SceneModePicker : Switches between 3D, 2D and Columbus View (CV) modes.</li><li>BaseLayerPicker : Chooses the imagery and terrain to display on the globe.</li><li>NavigationHelpButton : Displays the default camera controls.</li><li>Animation : Controls the play speed for view animation.</li><li>CreditsDisplay : Displays data attributions. Almost always required!</li><li>Timeline : Indicates current time and allows users to jump to a specific time using the scrubber.</li><li>FullscreenButton : Makes the Viewer fullscreen.</li></ol><p>我们可以根据自身需求选择是否启用。</p><p><a href="https://cesium.com/docs/tutorials/cesium-workshop/" target="_blank" rel="noopener">官方描述地址</a></p><p>同时我们还可以对视窗进行配置，到达自己期望的效果，如开启根据动态时间激活太阳位置的光照，对真实地球进行模拟：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"CesiumViewer"</span>,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加图层</span></span><br><span class="line">    <span class="comment">// this.addLayers();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加地形</span></span><br><span class="line">    <span class="comment">// this.addTerrain();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置视窗</span></span><br><span class="line">    <span class="keyword">this</span>.configScene();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    init() &#123;...&#125;,</span><br><span class="line">    <span class="comment">// 配置视窗</span></span><br><span class="line">    configScene() &#123;</span><br><span class="line">      <span class="comment">// Enable lighting based on sun/moon positions(激活基于太阳位置的光照)</span></span><br><span class="line">      <span class="keyword">this</span>.$viewer.scene.globe.enableLighting = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FrVKxw5lUOiT9qHIlPPnnrTPz4i1" alt="光照效果"></p><p>更近一步，可以利用上一小节使用的 <code>camera</code> 实现主视窗的定位：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置视窗</span></span><br><span class="line">configScene() &#123;</span><br><span class="line">    <span class="comment">// Enable lighting based on sun/moon positions(激活基于太阳位置的光照)</span></span><br><span class="line">    <span class="keyword">this</span>.$viewer.scene.globe.enableLighting = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create an initial camera view</span></span><br><span class="line">    <span class="keyword">let</span> initialPosition = <span class="keyword">new</span> Cesium.Cartesian3.fromDegrees(</span><br><span class="line">        <span class="number">-73.998114468289017509</span>,</span><br><span class="line">        <span class="number">40.674512895646692812</span>,</span><br><span class="line">        <span class="number">2631.082799425431</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">let</span> initialOrientation = <span class="keyword">new</span> Cesium.HeadingPitchRoll.fromDegrees(</span><br><span class="line">        <span class="number">7.1077496389876024807</span>,</span><br><span class="line">        <span class="number">-31.987223091598949054</span>,</span><br><span class="line">        <span class="number">0.025883251314954971306</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">let</span> homeCameraView = &#123;</span><br><span class="line">        destination: initialPosition,</span><br><span class="line">        orientation: &#123;</span><br><span class="line">            heading: initialOrientation.heading,</span><br><span class="line">            pitch: initialOrientation.pitch,</span><br><span class="line">            roll: initialOrientation.roll,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// Set the initial view</span></span><br><span class="line">    <span class="keyword">this</span>.$viewer.scene.camera.setView(homeCameraView);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fg65ZbEMNBXNiZoc6Y0RSAmtY1Ak" alt="主视窗效果"></p><p>这里需要介绍的是 <code>Scene</code> 的概念，<code>Scence</code> 虚拟场景是所有<code>3D</code> 图形对象和状态的容器，通常不是由开发者直接创建，而是在 <code>Viewer</code> 或者 <code>CesiumWidget</code> 内部隐式创建的。</p><p>通过 <code>Scene</code> 场景，我们可以控制 <code>Globe</code> 地球(包括地形和图层)、<code>Camera</code> 相机、<code>Primitives</code> (默认矢量数据层)和 <code>PostProcessStage</code> (后期处理效果)等。</p><p>除了以上配置，现在我们需要了解的有以下 <code>Cesium</code> 基本类型的 <code>API</code>:</p><ol><li><p><a href="https://cesium.com/docs/cesiumjs-ref-doc/Cartesian3.html?classFilter=Cartesian3" target="_blank" rel="noopener">Cartesian3</a> : 一个三维笛卡尔坐标——当它被用作相对于地球中心的位置时，使用地球固定框架（<code>ECEF</code>）。</p></li><li><p><a href="https://cesium.com/docs/cesiumjs-ref-doc/Cartographic.html?classFilter=Cartographic" target="_blank" rel="noopener">Cartographic</a> : 由经度、纬度（弧度）和 <code>WGS84</code> 椭球面高度确定的位置。</p></li><li><p><a href="https://cesium.com/docs/cesiumjs-ref-doc/HeadingPitchRoll.html?classFilter=HeadingPitchRoll" target="_blank" rel="noopener">HeadingPitchRoll</a> : 在东北向上的框架中关于局部轴的旋转（弧度）。航向是围绕负 <code>Z</code> 轴的旋转。俯仰是围绕负 <code>Y</code> 轴的旋转。滚动是关于正 <code>X</code> 轴的旋转。</p></li><li><p><a href="https://cesium.com/docs/cesiumjs-ref-doc/Quaternion.html?classFilter=Quaternion" target="_blank" rel="noopener">Quaternion</a> :以 <code>4D</code> 坐标表示的 <code>3D</code> 旋转。</p></li></ol><h2 id="Camera-相机"><a href="#Camera-相机" class="headerlink" title="Camera 相机"></a><code>Camera</code> 相机</h2><p><code>Camera</code> 是 <code>Cesium</code> 中常用的 <code>API</code>，属于 <code>viewer.scene</code> 中的属性，用来控制当前可见的域。可以控制场景的观察视角，例如旋转、缩放、平移以及飞行定位。</p><p>一些最常用的方法如下：</p><ul><li><p><a href="https://cesium.com/docs/cesiumjs-ref-doc/Camera.html#setView" target="_blank" rel="noopener">Camera.setView(options)</a>: 在特定位置和方向立即设置相机。</p></li><li><p><a href="https://cesium.com/docs/cesiumjs-ref-doc/Camera.html#zoomIn" target="_blank" rel="noopener">Camera.zoomIn(amount)</a>: 沿着视角矢量移动摄像机。</p></li><li><p><a href="https://cesium.com/docs/cesiumjs-ref-doc/Camera.html#zoomOut" target="_blank" rel="noopener">Camera.zoomOut(amount)</a>: 沿视角矢量向后移动摄像机。</p></li><li><p><a href="https://cesium.com/docs/cesiumjs-ref-doc/Camera.html#flyTo" target="_blank" rel="noopener">Camera.flyTo(options)</a>: 创建从当前相机位置到新位置的动画相机飞行。</p></li><li><p><a href="https://cesium.com/docs/cesiumjs-ref-doc/Camera.html#lookAt" target="_blank" rel="noopener">Camera.lookAt(target, offset)</a>: 定位并定位摄像机以给定偏移量瞄准目标点。</p></li><li><p><a href="https://cesium.com/docs/cesiumjs-ref-doc/Camera.html#move" target="_blank" rel="noopener">Camera.move(direction, amount)</a>: 朝任何方向移动摄像机。</p></li><li><p><a href="https://cesium.com/docs/cesiumjs-ref-doc/Camera.html#rotate" target="_blank" rel="noopener">Camera.rotate(axis, angle)</a>: 绕任意轴旋转相机。</p></li></ul><p>例子参考上一小节的视窗定位。</p><h2 id="Clock-时钟"><a href="#Clock-时钟" class="headerlink" title="Clock 时钟"></a><code>Clock</code> 时钟</h2><p>使用 <code>viewer</code> 的 <code>Clock</code> 和 <code>Timline</code> 可以控制 <code>scene</code> 的时间进度。</p><p>下面通过修改 <code>init</code> 函数实现一个日夜交替效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"CesiumViewer"</span>,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    init() &#123;</span><br><span class="line">      <span class="keyword">let</span> clock = <span class="keyword">new</span> Cesium.Clock(&#123;</span><br><span class="line">        startTime: Cesium.JulianDate.now(),</span><br><span class="line">        currentTime: Cesium.JulianDate.now(),</span><br><span class="line">        stopTime: Cesium.JulianDate.addDays(Cesium.JulianDate.now(), <span class="number">1</span>, <span class="keyword">new</span> Cesium.JulianDate()),</span><br><span class="line">        clockRange: Cesium.ClockRange.LOOP_STOP,</span><br><span class="line">        clockStep: Cesium.ClockStep.SYSTEM_CLOCK_MULTIPLIER,</span><br><span class="line">        multiplier: <span class="number">9000</span>,</span><br><span class="line">        shouldAnimate: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> viewerOption = &#123;</span><br><span class="line">        geocoder: <span class="literal">false</span>,</span><br><span class="line">        homeButton: <span class="literal">false</span>,</span><br><span class="line">        sceneModePicker: <span class="literal">false</span>,</span><br><span class="line">        baseLayerPicker: <span class="literal">false</span>,</span><br><span class="line">        navigationHelpButton: <span class="literal">false</span>,</span><br><span class="line">        animation: <span class="literal">false</span>,</span><br><span class="line">        timeline: <span class="literal">false</span>,</span><br><span class="line">        fullscreenButton: <span class="literal">false</span>,</span><br><span class="line">        infoBox: <span class="literal">false</span>,</span><br><span class="line">        selectionIndicator: <span class="literal">false</span>,</span><br><span class="line">        scene3DOnly: <span class="literal">true</span>,</span><br><span class="line">        shadows: <span class="literal">true</span>,</span><br><span class="line">        shouldAnimate: <span class="literal">true</span>,</span><br><span class="line">        clockViewModel: <span class="keyword">new</span> Cesium.ClockViewModel(clock)</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// your token</span></span><br><span class="line">      Cesium.Ion.defaultAccessToken = <span class="string">"token"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.$viewer = <span class="keyword">new</span> Cesium.Viewer(<span class="keyword">this</span>.$refs.viewer, viewerOption);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 隐藏Logo</span></span><br><span class="line">      <span class="keyword">this</span>.$viewer.cesiumWidget.creditContainer.style.display = <span class="string">"none"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.$viewer.scene.globe.enableLighting = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过定义 <code>clock</code>，设置起始时间、速率和循环等配置，使用 <code>clockViewModel</code> 在实例中添加时钟视图模型，然后启用光照，实现效果。</p><p>注：此效果为演示，<code>init</code> 函数后续恢复为开始的创建实例状态，方便之后的例子使用。</p><p><img src="http://images.akashi.org.cn/FixGRAYzomr31C6d2LIKgTBxUlNZ" alt="日夜交替效果"></p><h2 id="Entity-实体"><a href="#Entity-实体" class="headerlink" title="Entity 实体"></a><code>Entity</code> 实体</h2><p><code>Cesium</code> 中的所有空间数据都使用 <code>Entity API</code>来表示。<code>Entity API</code> 以一种有效提供灵活的可视化的方式，以便对 <code>Cesium</code> 进行渲染。<code>Cesium Entity</code> 是可以与样式化图形表示配对并定位在空间和时间上的数据对象。</p><p>在 <code>Cesium</code> 中，加载点线面矢量有两种方式：</p><ul><li><p>Entity API 是数据驱动的一组高级对象，具有接口一致，容易使用的特点，但性能略低。</p></li><li><p>Primitive API 是面向三维图形开发，更为底层，具有灵活，性能高的特点，但使用复杂。</p></li></ul><p>其中，<code>Entity API</code> 的使用通过 <code>viewer.entities.add()</code> 方法添加矢量数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"CesiumViewer"</span>,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">    <span class="comment">// 加载实体</span></span><br><span class="line">    <span class="keyword">this</span>.loadEntities();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    init() &#123;...&#125;,</span><br><span class="line">    loadEntities() &#123;</span><br><span class="line">        <span class="keyword">let</span> polygon = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">        name: <span class="string">"正方形"</span>,</span><br><span class="line">        id: <span class="string">"square"</span>,</span><br><span class="line">        polygon: &#123;</span><br><span class="line">          hierarchy: Cesium.Cartesian3.fromDegreesArray([</span><br><span class="line">            <span class="number">-109.080842</span>,</span><br><span class="line">            <span class="number">45.002073</span>,</span><br><span class="line">            <span class="number">-105.91517</span>,</span><br><span class="line">            <span class="number">45.002073</span>,</span><br><span class="line">            <span class="number">-104.058488</span>,</span><br><span class="line">            <span class="number">44.996596</span>,</span><br><span class="line">            <span class="number">-104.053011</span>,</span><br><span class="line">            <span class="number">43.002989</span>,</span><br><span class="line">            <span class="number">-104.053011</span>,</span><br><span class="line">            <span class="number">41.003906</span>,</span><br><span class="line">            <span class="number">-105.728954</span>,</span><br><span class="line">            <span class="number">40.998429</span>,</span><br><span class="line">            <span class="number">-107.919731</span>,</span><br><span class="line">            <span class="number">41.003906</span>,</span><br><span class="line">            <span class="number">-109.04798</span>,</span><br><span class="line">            <span class="number">40.998429</span>,</span><br><span class="line">            <span class="number">-111.047063</span>,</span><br><span class="line">            <span class="number">40.998429</span>,</span><br><span class="line">            <span class="number">-111.047063</span>,</span><br><span class="line">            <span class="number">42.000709</span>,</span><br><span class="line">            <span class="number">-111.047063</span>,</span><br><span class="line">            <span class="number">44.476286</span>,</span><br><span class="line">            <span class="number">-111.05254</span>,</span><br><span class="line">            <span class="number">45.002073</span>,</span><br><span class="line">          ]),</span><br><span class="line">          height: <span class="number">0</span>,</span><br><span class="line">          material: Cesium.Color.RED.withAlpha(<span class="number">0.5</span>),</span><br><span class="line">          outline: <span class="literal">true</span>,</span><br><span class="line">          outlineColor: Cesium.Color.BLACK,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.$viewer.zoomTo(polygon);</span><br><span class="line">      <span class="comment">// polygon.show = false;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="http://images.akashi.org.cn/FnDvItRi_fYdU_PgTc_tCtM7_bRr" alt="正方形"></p><p>除了绘制实体，还可以通过外部加载的方式进行模型导入。</p><p>这里我们在 <code>static</code> 文件夹下放入 <code>J15.glb</code> 文件进行导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"CesiumViewer"</span>,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">    <span class="comment">// 添加模型</span></span><br><span class="line">    <span class="keyword">this</span>.addEntities();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    init() &#123;...&#125;,</span><br><span class="line">    addEntities() &#123;</span><br><span class="line">        <span class="keyword">let</span> fighter = <span class="keyword">this</span>.$viewer.entities.add(&#123;</span><br><span class="line">        name: <span class="string">"fighter"</span>,</span><br><span class="line">        id: <span class="string">"J15"</span>,</span><br><span class="line">        model: &#123;</span><br><span class="line">          uri: <span class="string">"model3D/J15.glb"</span>,</span><br><span class="line">          minimumPixelSize: <span class="number">100</span>,</span><br><span class="line">          maximumScale: <span class="number">1000</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        position: Cesium.Cartesian3.fromDegrees(<span class="number">-110.345</span>, <span class="number">30</span>, <span class="number">70000</span>),</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// this.$viewer.trackedEntity = fighter;</span></span><br><span class="line">      <span class="keyword">this</span>.$viewer.zoomTo(fighter, <span class="keyword">new</span> Cesium.HeadingPitchRange(<span class="number">-1</span>, <span class="number">-0.3</span>, <span class="number">35</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fkm_Ynda6lXaJuI_38HeK4SalX2H" alt="模型加载"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Cesium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 项目 Linux 远程部署记录</title>
      <link href="2020/05/31/django-deploy/deploy-django/"/>
      <url>2020/05/31/django-deploy/deploy-django/</url>
      
        <content type="html"><![CDATA[<h1 id="Django-项目-Linux-远程部署记录"><a href="#Django-项目-Linux-远程部署记录" class="headerlink" title="Django 项目 Linux 远程部署记录"></a>Django 项目 Linux 远程部署记录</h1><blockquote><p><code>Django</code> 项目部署。该项目名称为 <code>shop-search</code>，配置端口号为 <code>9000</code>，以下为配置过程记录。</p></blockquote><a id="more"></a><h2 id="远程拷贝项目文件"><a href="#远程拷贝项目文件" class="headerlink" title="远程拷贝项目文件"></a>远程拷贝项目文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/Source/Project/Python/shop-search  root@122.51.xx.xx:/source/python/deployment/</span><br></pre></td></tr></table></figure><h2 id="远程账号登录"><a href="#远程账号登录" class="headerlink" title="远程账号登录"></a>远程账号登录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh akashi@122.51.xx.xx</span><br></pre></td></tr></table></figure><p>注意：项目最终部署时最好不要使用 <code>root</code> 用户部署。<code>root</code> 权限过高，直接部署项目存在安全隐患。</p><p>注意：<code>IP</code> 地址已隐去部分：<code>xx.xx</code>，参考时填写自己对应地址，以下相应隐去内容不再做提示。</p><h2 id="远程虚拟环境启动"><a href="#远程虚拟环境启动" class="headerlink" title="远程虚拟环境启动"></a>远程虚拟环境启动</h2><p>在对应项目下启动虚拟环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pipenv shell</span><br><span class="line">pipenv install</span><br></pre></td></tr></table></figure><h2 id="同步、迁移数据表"><a href="#同步、迁移数据表" class="headerlink" title="同步、迁移数据表"></a>同步、迁移数据表</h2><p>项目数据库之前已经在远程创建完成，这里不再介绍，可使用 <code>mysqldump</code> 对数据进行快速导入导出操作。</p><p>基本数据库操作命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录</span></span><br><span class="line">mysql -uroot -pxxx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示数据库列表</span></span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择并打开库</span></span><br><span class="line">use xxx;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示表</span></span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建库</span></span><br><span class="line">create database 库名;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建表：</span></span><br><span class="line">use 库名；</span><br><span class="line">create table 表名 (字段设定列表)；</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删库和删表:</span></span><br><span class="line">drop database 库名;</span><br><span class="line">drop table 表名；</span><br></pre></td></tr></table></figure><p>一些参考：</p><ul><li><a href="https://blog.csdn.net/shellching/article/details/8129687" target="_blank" rel="noopener">mysqldump</a></li><li><a href="https://www.cnblogs.com/xingyunfashi/p/8796107.html" target="_blank" rel="noopener">mongodb迁移mysql</a></li><li><a href="https://www.jianshu.com/p/40a8dd30a891" target="_blank" rel="noopener">Django连接mysql</a></li></ul><p>使用 <code>Django</code> 命令同步和迁移数据库。</p><p>在迁移过程中如果出现报错 <code>django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3.</code> 是因为 <code>2.x</code>以后 <code>Django</code> 版本兼容性导致。</p><p>原因参考<a href="https://yuntianti.com/posts/fix-django3-mysqlclient-import-error/" target="_blank" rel="noopener">文档</a>.</p><p>目前比较好的解决方案就是做一个版本欺骗，简单高效。在 <code>apps</code> 下对应作用目录中的 <code>__init__.py</code> 中添加：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.version_info = (<span class="number">1</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="string">"final"</span>, <span class="number">0</span>)</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><p>同时安装对应依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install pymysql</span><br></pre></td></tr></table></figure><p>进行同步迁移数据表：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="uwsgi-项目启动"><a href="#uwsgi-项目启动" class="headerlink" title="uwsgi 项目启动"></a><code>uwsgi</code> 项目启动</h2><p>使用 <code>uwsgi</code> 对项目进行启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http-socket :9000 --plugin python --module shop-search.wsgi</span><br></pre></td></tr></table></figure><p>若无报错，结束启动状态。配置后台启动文件。</p><h3 id="ini-文件配置"><a href="#ini-文件配置" class="headerlink" title="ini 文件配置"></a><code>ini</code> 文件配置</h3><p>在项目根目录下新建配置文件 <code>shop-search-uwsgi.ini</code> 进行配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch shop-search-uwsgi.ini</span><br><span class="line">sudo vim shop-search-uwsgi.ini</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置域</span></span><br><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 工作目录</span></span><br><span class="line">chdir = /source/python/deployment/shop-search</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 模块</span></span><br><span class="line">module = shop-search.wsgi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 请求端口</span></span><br><span class="line">http-socket = :9000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> master</span></span><br><span class="line">master = True</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进程</span></span><br><span class="line">processes = 4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 线程</span></span><br><span class="line">threads = 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否退出是清理相关内容</span></span><br><span class="line">vacuum = true</span><br></pre></td></tr></table></figure><h3 id="配置-log-和-pid"><a href="#配置-log-和-pid" class="headerlink" title="配置 log 和 pid"></a>配置 log 和 pid</h3><p>新建日志文件和 <code>pid</code> 存储位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir log &amp;&amp; mkdir pid</span><br></pre></td></tr></table></figure><p>在 <code>shop-search-uwsgi.ini</code> 中添加对应配置，用于后台启动和停止。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> backend run uwsgi</span></span><br><span class="line">daemonize = %(chdir)/log/uwsgi-9000.log</span><br><span class="line">log-maxsize = 1024*1024*1024</span><br><span class="line">pidfile = %(chdir)/pid/uwsgi-9000.pid</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo uwsgi --ini shop-search.ini</span><br></pre></td></tr></table></figure><p>启动后可对后台运行进程进行查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep shop-search</span><br></pre></td></tr></table></figure><p>注意：本项目依赖虚拟环境，需在虚拟环境中启动才能启动成功，注意查看虚拟环境是否开启，如果是使用远程主机本地环境，则可以忽略。</p><p>启动完成后退出虚拟环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><p>启动 <code>nginx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx</span><br></pre></td></tr></table></figure><p>在对应 <code>nginx</code> 安装目录下修改配置文件 <code>nginx.conf</code></p><p>以下是我的路径参考：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx</span><br><span class="line">sudo vim nginx.conf</span><br></pre></td></tr></table></figure><p>在 <code>http</code> 下添加配置：</p><p>注意：在 <code>60</code> 多行左右，可以在 <code>vim</code> 下输入 <code>:set nu</code> 显示行数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Shop-Search Site Config</span></span><br><span class="line">upstream shop-search &#123;</span><br><span class="line">        server 122.51.xx.xx:9000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name search.akashi.xx;</span><br><span class="line">        charset utf-8;</span><br><span class="line">        access_log /var/log/nginx/nginx.log;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://shop-search;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /static &#123;</span><br><span class="line">            alias /source/python/deployment/shop-search/static;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成，重启 <code>nginx</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>更多 <code>nginx</code> 配置，如加密部署、部署高可用服务等可参考我的另一篇文章：<a href="https://akashigakki.github.io/2019/10/30/Python_Deploy/deploy/#more">Python 应用 uWSGI + Nginx 部署</a>.</p><p>至此，项目远程部署完成。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 阅读笔记（四）</title>
      <link href="2020/01/14/vue-webpack/webpack-vue/"/>
      <url>2020/01/14/vue-webpack/webpack-vue/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue-js-阅读笔记（四）"><a href="#Vue-js-阅读笔记（四）" class="headerlink" title="Vue.js 阅读笔记（四）"></a>Vue.js 阅读笔记（四）</h3><blockquote><p>系统、框架性的认识 <code>Vue</code>。<code>webpack</code>、<code>vue-router</code>、<code>vuex</code> 和工程化。</p></blockquote><a id="more"></a><blockquote><p>高效开发离不开基础工程的搭建，开始之前需要提前安装 <code>Node.js</code> 和 <code>NPM</code>，如果不熟悉它们，可以先查阅相关资料，完成安装并了解 <code>npm</code> 最基本的用法。</p></blockquote><h4 id="前端工程化和-webpack"><a href="#前端工程化和-webpack" class="headerlink" title="前端工程化和 webpack"></a>前端工程化和 <code>webpack</code></h4><p>近几年来，前端领域发展迅速，前端的工作早已不再是切几张图那么简单，项目比较大时，可能会多人协同开发。模块化、组件化、<code>CSS</code> 预编译等概念也成了经常讨论的话题。</p><h5 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a><code>webpack</code></h5><p>通常，前端工程化项目需要解决以下问题：</p><ul><li><p><code>JavaScript</code>、<code>CSS</code> 代码的合并和压缩。</p></li><li><p><code>CSS</code> 预处理：<code>Less</code>、<code>Sass</code>、<code>Stylus</code> 的编译。</p></li><li><p>生成雪碧图 (<code>CSS Sprite</code>)</p></li><li><p><code>ES6</code> 转 <code>ES5</code></p></li><li><p>模块化</p></li></ul><p><code>....</code></p><p>这些问题，我们都可以通过前端模块打包提供一个解决方案，也就是 <code>webpack</code>。打包后的代码已经不是你写的代码，其中夹杂了很多 <code>webpack</code> 自身的模块处理代码，需要理解 <code>编译</code> 的概念。</p><p><img src="http://images.akashi.org.cn/Fu7LwhdZ5-nS2KXTHHhs36pvk5Zt" alt="webpack"></p><p>在左边的是业务中写的各种格式的文件，比如 <code>typescript</code>、<code>less</code>、<code>jpg</code>、<code>vue</code> 等，这些格式的文件通过特定的加载器(<code>Loader</code>)编译以后，最终统一生成为 <code>.js</code>、<code>.css</code>、<code>.png</code> 等静态资源文件。</p><p>在 <code>webpack</code> 中，一张图片，一个 <code>css</code>甚至一个字体，都称为模块(<code>Module</code>)，彼此存在依赖关系，<code>webpack</code> 就是来处理模块间的依赖关系的，并把它们进行打包。</p><p>在 <code>webpack</code> 中加载文件，是在 <code>.js</code> 文件中导入，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'src/styles/index.css'</span>;</span><br></pre></td></tr></table></figure><p><code>import</code> 是在 <code>ES 2015</code> 中的使用，这里也可以写成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'src/styles/index.css'</span>)</span><br></pre></td></tr></table></figure><p>在打包时，<code>index.css</code> 会被打包进一个 <code>.js</code> 文件中，通过动态创建 <code>&lt;style&gt;</code> 的形式来加载，当然，也可以进一步配置，在打包编译时，把所有的 <code>css</code> 文件提取出来，生成一个 <code>css</code> 的文件。</p><h5 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a><code>SPA</code></h5><p><code>webpack</code> 的主要适用场景是单页面应用(<code>SPA</code>)，<code>SPA</code> 通常是由一个 <code>html</code> 文件和一堆按需加载的 <code>js</code> 文件组成，它的 <code>html</code> 结构非常简单，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack app<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"dist/main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只有一个 <code>&lt;div&gt;</code> 节点，所有的代码都集成在了 <code>main.js</code> 中，理论上它可以实现知乎、淘宝这样的大型项目。</p><h5 id="export-和-import"><a href="#export-和-import" class="headerlink" title="export 和 import"></a><code>export</code> 和 <code>import</code></h5><p>这两个语法是在编写模块化项目中大量使用的，是 <code>ES6</code> 中的语法，需要做一些简单的了解。</p><p><code>export</code> 和 <code>import</code> 是用来导出和导入模块的，一个模块就是一个 <code>js</code> 文件，它拥有独立的作用域，里面定义的变量外部是无法获取的。</p><p>比如将一个配置文件作为模块导出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="keyword">var</span> Config = &#123;</span><br><span class="line">    version: <span class="string">'1.0.0'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    Config</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>或 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> Config = &#123;</span><br><span class="line">    version: <span class="string">'1.0.0'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中，无论是 <code>变量</code>，<code>函数</code>，<code>数组</code>，<code>常量</code> 都可以导出。</p><p>导出模块后，在需要使用模块的文件使用 <code>import</code> 再导入，就可以在这个文件内使用这些模块了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; Config &#125; <span class="keyword">from</span> <span class="string">'./config.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Config) <span class="comment">// &#123; version: '1.0.0' &#125;</span></span><br></pre></td></tr></table></figure><p>在以上几个例子中，导入的模块都是在 <code>export</code> 文件中设置的，也就是说用户必须预先知道这个名称叫什么，比如 <code>Config</code>。而有时候用户不想去了解名称是什么，只是把模块的功能拿来使用，或者想自己自定义名称，这时可以使用 <code>export default</code> 来输出默认的模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    version: <span class="string">'1.0.0'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> conf <span class="keyword">from</span> <span class="string">'./config.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(conf); <span class="comment">// &#123; version: '1.0.0' &#125;</span></span><br></pre></td></tr></table></figure><p>当然，你也可以规定默认模块的名称：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    version: <span class="string">'1.0.0'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>这里的 <code>module.exports = config;</code> 相当于 <code>export default config;</code>。</p><h4 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a><code>Vue CLI</code></h4><blockquote><p><code>Vue CLI</code> 是一个基于 <code>Vue.js</code> 进行快速开发的项目脚手架，基于 <code>webpack</code> 构建。</p></blockquote><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>安装完成之后，就可以在命令行中访问 <code>vue</code> 命令，比如可以用来检查版本验证是否安装成功：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure><h5 id="快速原型开发"><a href="#快速原型开发" class="headerlink" title="快速原型开发"></a>快速原型开发</h5><p>可以使用 <code>vue serve</code> 和 <code>vue build</code> 命令对单个 <code>*.vue</code> 文件进行快速原型开发，不过这需要先额外安装一个全局的扩展：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-service-global</span><br></pre></td></tr></table></figure><p>注意，这仅仅用于简单的快速测试，实际开发中并不推荐。</p><h5 id="使用-Vue-CLI-手脚架快速搭建一个工程化项目"><a href="#使用-Vue-CLI-手脚架快速搭建一个工程化项目" class="headerlink" title="使用 Vue CLI 手脚架快速搭建一个工程化项目"></a>使用 <code>Vue CLI</code> 手脚架快速搭建一个工程化项目</h5><ul><li>创建一个新项目</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create demo</span><br></pre></td></tr></table></figure><p>开始创建，提示选取一个预设，可以使用默认的预设，这个默认的设置非常适合快速创建一个新项目的原型，而手动设置则提供了更多的选项，它们是面向生产的项目更加需要的。</p><p><img src="http://images.akashi.org.cn/FpOw9wJicjVZ-dYt9wofC41FSkjC" alt="vue-create"></p><p><img src="http://images.akashi.org.cn/FqmUv4HUmnqDbn5Bq6i-pLbiHQsn" alt="preset"></p><p>等待创建完成之后，就可以根据提示，进入项目，启动服务：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd demo</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>这样，一个新建的工程化项目就在对应的端口下启动了，可以根据提示在浏览器查看启动的项目。</p><h4 id="前端路由与-vue-router"><a href="#前端路由与-vue-router" class="headerlink" title="前端路由与 vue-router"></a>前端路由与 <code>vue-router</code></h4><h5 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h5><p>前端路由，即前端来维护一个路由规则。</p><p>实现有两种，一种是利用 <code>url</code> 的 <code>hash</code>，就是常说的锚点(<code>#</code>)，<code>JavaScript</code> 通过 <code>hashChange</code> 事件来监听 <code>url</code> 的改变，<code>IE7</code> 以下需要轮询；</p><p>另一种就是 <code>HTML5</code> 的 <code>History</code> 模式。它使 <code>url</code> 看起来像普通网站那样，以 <code>/</code> 分隔，但页面并没有跳转，不过使用这种模式需要服务端支持，服务端在接收到所有的请求后，都将指向同一个 <code>html</code> 不然会出现 <code>404</code>。因此，<code>SPA</code> 只有一个 <code>html</code>，整个网站的所有内容都在一个 <code>html</code> 里，通过 <code>JavaScript</code> 来处理。</p><p>前端路由可以带来页面的持久性、前后端彻底分离等优势，下面结合具体的框架 <code>vue-router</code> 进行介绍。</p><h5 id="vue-router-安装"><a href="#vue-router-安装" class="headerlink" title="vue-router 安装"></a><code>vue-router</code> 安装</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vue-router</span><br></pre></td></tr></table></figure><p>如果在一个模块化工程中使用它，必须要通过 <code>Vue.use()</code> 明确地安装路由功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>每个页面对应一个组件，也就是对应一个 <code>.vue</code> 文件。在 <code>src</code> 目录下创建 <code>views</code> 目录，用于存放所有的页面，然后在 <code>views</code> 下创建 <code>index.vue</code> 和 <code>about.vue</code> 两个文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'index'</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  about.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>About<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'about'</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回到 <code>main.js</code> 中进行配置，创建一个数组来制定路由匹配列表，每一个路由映射一个组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Routers = [&#123;</span><br><span class="line">    path: <span class="string">'/index'</span>,</span><br><span class="line">    name: <span class="string">'index'</span>,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'./views/index.vue'</span>], resolve)</span><br><span class="line">    <span class="comment">// component: () =&gt; import('./views/index.vue')</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    name: <span class="string">'about'</span>,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'./views/about.vue'</span>], resolve)</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: Routers</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router: router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p><code>Routers</code> 里每一项的 <code>path</code> 属性就是指定的当前匹配的路径，<code>component</code> 是映射的组件。</p><p><code>webpack</code> 会把每一个路由打包成一个 <code>js</code> 文件，在请求到该页面时，才会去加载这个页面的 <code>js</code>，也就是异步实现的懒加载(按需加载)</p><p>这样做的好处是不需要在打开首页的时候就把所有的页面内容全部加载进来，只在访问时才加载。</p><p>如果非要一次性加载，可以写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/index'</span>,</span><br><span class="line">    component: <span class="built_in">require</span>(<span class="string">'./views/index.vue'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在根实例 <code>app.vue</code> 中添加一个路由视图 <code>&lt;router-view&gt;</code> 来挂载所有的路由组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'app'</span>,</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;router-view&gt;</code> 会根据当前路由动态渲染不同的页面组件。网页中一些公共的部分，比如顶部的导航栏、侧边导航栏、底部的版权信息，这些可以直接写在 <code>app.vue</code> 里面，与 <code>&lt;router-view&gt;</code> 同级，路由切换时，切换的是 <code>&lt;router-view&gt;</code> 挂载的组件，其他内容不会发生变化。</p><p><code>npm run serve</code> 启动服务，就可以通过 <code>127.0.0.1:8080/index</code> 和 <code>127.0.0.1:8080/about</code> 访问页面了。</p><h5 id="结构梳理"><a href="#结构梳理" class="headerlink" title="结构梳理"></a>结构梳理</h5><p>现在新建一个 <code>router</code> 目录，用于路由配置。</p><p><code>router</code> 下新建 <code>index.js</code> 将路由部分从 <code>main.js</code> 中提出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Routers = [&#123;</span><br><span class="line">    path: <span class="string">'*'</span>,</span><br><span class="line">    redirect: <span class="string">'/index'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'/index'</span>,</span><br><span class="line">    name: <span class="string">'index'</span>,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'../views/index.vue'</span>], resolve)</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    name: <span class="string">'about'</span>,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'../views/about.vue'</span>], resolve)</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: Routers</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>在路由列表中添加一项，用于访问路径不存在时，重定向到首页：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'*'</span>,</span><br><span class="line">    redirect: <span class="string">'/index'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>精简后的 <code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>路由列表的 <code>path</code> 也可以带参数，比如个人主页的场景，一部分路由是动态的 <code>/user/12345</code>，其中 <code>id</code> 是动态的，但是它们都路由到同一个页面，这个页面里面期望获取这个 <code>id</code>，然后请求相关数据。</p><p>具体路由参数配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> Routers = [&#123;</span><br><span class="line">    path: <span class="string">'/user/:id'</span>,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'../views/user.vue'</span>], resolve)</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>在 <code>views</code> 下新建 <code>user.vue</code> 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- user.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>User &#123;&#123; $route.params.id &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'user'</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>this.$route</code> 可以访问到当前路由的很多信息，开发中会经常用到里面的数据。</p><h5 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h5><p><code>vue-router</code> 有两种跳转页面的方法，第一种是使用内置的  <code>&lt;router-link&gt;</code> 组件，它会被渲染为一个 <code>&lt;a&gt;</code> 标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- index.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>about<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'index'</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>它的用法和一般组件一样，<code>to</code> 是一个 <code>prop</code>，需要指定跳转的路径，也可以使用 <code>v-bind</code> 动态设置。使用 <code>&lt;router-link&gt;</code>，在 <code>HTML5</code> 的 <code>History</code> 模式下会拦截点击，避免浏览器重新加载页面。</p><p><code>&lt;router-link&gt;</code> 常用 <code>prop</code>:</p><ul><li><code>tag</code><ul><li>可以指定渲染成什么标签</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span> <span class="attr">tag</span>=<span class="string">"li"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>replace</code><ul><li>使用 <code>replace</code> 不会留下 <code>History</code> 记录，所以不能使用后退键和返回上一个页面</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span> <span class="attr">replace</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>active-class</code><ul><li>对应的路由匹配成功后，会自动给当前元素设置一个名为 <code>router-link-active</code> 的 <code>class</code>，设置 <code>prop: active-class</code> 可以修改默认名称</li></ul></li></ul><p>另一种方法是通过 <code>Javascript</code> 进行设置，类似于 <code>window.location.href</code>，使用 <code>router</code> 实例的方法，通过点击事件进行跳转：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- about.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>About<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleRouter"</span>&gt;</span>go to user<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'about'</span>,</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleRouter () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$router.push(<span class="string">'/user/123'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>$router</code> 的其他方法：</p><ul><li><p><code>replace</code></p><ul><li>类似于 <code>&lt;router-link&gt;</code> 的 <code>replace</code> 功能，它不会向 <code>history</code> 添加新记录，而是替换掉当前的 <code>history</code> 记录，如：<code>this.$router.replace(&#39;/user/123&#39;)</code></li></ul></li><li><p><code>go</code></p><ul><li>类似于 <code>window.history.go()</code>，在 <code>history</code> 记录中向前或者后退多少步，参数是整数。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.go(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">this</span>.$router.go(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h5 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h5><blockquote><p>在 <code>SPA</code> 项目中修改网页标题。</p></blockquote><p>网页标题是通过 <code>&lt;title&gt;&lt;/title&gt;</code> 来显示的，但是 <code>SPA</code> 只有一个固定的 <code>html</code>，切换到不同页面时，标题并不会发生改变，那么该如何修改标题呢？</p><p>比较理想的一个思路是，在页面发生路由变化时，统一设置。<code>vue-router</code> 提供了导航钩子 <code>beforeEach</code> 和 <code>afterEach</code>，它们会在路由即将改变前和改变后触发，所以设置标题可以在 <code>beforeEach</code> 钩子完成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">const</span> Rourters = [&#123;</span><br><span class="line">    path: <span class="string">'/index'</span>,</span><br><span class="line">    name: <span class="string">'index'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        title: <span class="string">'首页'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'../views/index.vue'</span>], resolve)</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    name: <span class="string">'about'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        title: <span class="string">'关于'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'../views/about.vue'</span>], resolve)</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    path: <span class="string">'/user:id'</span>,</span><br><span class="line">    name: <span class="string">'user'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        title: <span class="string">'个人主页'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'../views/user.vue'</span>], resolve)</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    path: <span class="string">'*'</span>,</span><br><span class="line">    redirect: <span class="string">'/index'</span></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: Routers</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.document.title = to.meta.title;</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>导航钩子有 <code>3</code> 个参数：</p><ul><li><p><code>to</code></p><ul><li>即将要进入的目标的路由对象</li></ul></li><li><p><code>from</code></p><ul><li>当前导航即将要离开的路由对象</li></ul></li><li><p><code>next</code></p><ul><li>调用该方法后，才能进入下一个钩子</li></ul></li></ul><p>路由列表的 <code>meta</code> 字段可以自定义一些信息，比如将每个页面的 <code>title</code> 写入 <code>meta</code> 来统一维护，<code>beforeEach</code> 钩子可以ongoing路由对象 <code>to</code> 里获取 <code>meta</code> 信息，从而改变标题。</p><h4 id="状态管理与-Vuex"><a href="#状态管理与-Vuex" class="headerlink" title="状态管理与 Vuex"></a>状态管理与 <code>Vuex</code></h4><h5 id="状态管理与使用场景"><a href="#状态管理与使用场景" class="headerlink" title="状态管理与使用场景"></a>状态管理与使用场景</h5><p>一个组件可以分为数据(<code>model</code>)和视图(<code>view</code>)，数据更新时，视图也会自动更新。在视图中又可以绑定一些事件，它们触发 <code>methods</code> 里的指定方法，从而可以改变数据、更新视图，这时一个组件基本的运行模式。</p><p>但在实际的业务开发中，经常有跨组件共享数据的需求，<code>Vuex</code> 就是用来统一管理组件状态的，它定义的一系列规范来使用和操作数据，使组件应用更加高效。</p><p>使用 <code>Vuex</code> 有一定的门槛和复杂性，它的主要使用场景是大型单页应用，更适合多人协同开发。如果项目不是很复杂，或者希望短期内见效，需要考虑是否真的有必要使用 <code>Vuex</code>，一个简单的 <a href="https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener">store模式</a> 就满足需求了。</p><h5 id="Vuex-安装"><a href="#Vuex-安装" class="headerlink" title="Vuex 安装"></a><code>Vuex</code> 安装</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><p>在一个模块化的打包系统中，必须显式地通过 <code>Vue.use()</code> 来安装 <code>Vuex</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure><h5 id="Vuex-基本使用"><a href="#Vuex-基本使用" class="headerlink" title="Vuex 基本使用"></a><code>Vuex</code> 基本使用</h5><p>现在我们从一开始就考虑高效的结构，先新建一个 <code>store</code> 目录，在下面新建 <code>index.js</code> 做状态管理配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后在 <code>main.js</code> 里面引入并声明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/index'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>这样，一个基本的 <code>Vuex</code> 框架就构建好了，仓库 <code>store</code> (指 <code>store/index.js</code>) 包含了应用的数据（状态）和操作过程。<code>Vuex</code> 里的数据都是响应式的，任何组件使用同一 <code>store</code> 的数据时，只要 <code>store</code> 的数据发生变化，对应的组件也会立即更新。</p><p>数据保存在 <code>Vuex</code> 选项的 <code>state</code> 字段内，想要更改 <code>Vuex</code> 的 <code>store</code> 中的状态的唯一方法是提交 <code>mutation</code>，通过这两个方法，就可以完成大部分数据状态管理的操作，下面通过一个计数器的例子了解 <code>Vuex</code> 的使用。</p><p>首先，定义一个数据 <code>count</code>，初始值为 <code>0</code>，在其他组件通过 <code>$store.state.count</code> 读取值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>获取数据，这里我们使用一个计算属性接收数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- index.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>about<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'index'</span>,</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">        count () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在组件内通过显式的提交 <code>mutations</code> 可以改变 <code>state</code> 中的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        increment (state) &#123;</span><br><span class="line">            state.count ++;</span><br><span class="line">        &#125;,</span><br><span class="line">        decrease (state) &#123;</span><br><span class="line">            state.count --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在组件中，通过 <code>this.$store.commit</code> 方法来执行 <code>mutations</code>。在 <code>index.vue</code> 中添加两个按钮用于加减：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>about<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleIncrement"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleDecrease"</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'index'</span>,</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">        count () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleIncrement () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        handleDecrease () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$store.commit(<span class="string">'decrease'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这看起来像 <code>JavaScript</code> 的观察者模式，组件只负责提交一个事件名，<code>Vuex</code> 对应的 <code>mutations</code> 来完<br>成对应的业务逻辑。</p><p><code>mutations</code> 还可以接受第二个参数，可以是数字、字符串或者对象等类型，比如我们传入一个默认参数，指定增加的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        increment (state, n) &#123;</span><br><span class="line">            n = n || <span class="number">1</span>;</span><br><span class="line">            state.count += n;</span><br><span class="line">        &#125;,</span><br><span class="line">        decrease (state) &#123;</span><br><span class="line">            state.count --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>about<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleIncrement"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleDecrease"</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleIncrementMore"</span>&gt;</span>+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'index'</span>,</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">        count () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleIncrement () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        handleDecrease () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$store.commit(<span class="string">'decrease'</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        handleIncrementMore () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>, <span class="number">5</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果一个参数不够，可以传入一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">    increment (state, params) &#123;</span><br><span class="line">        state.count += params.count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.vue</span></span><br><span class="line">methods: &#123;</span><br><span class="line">    handleIncrement () &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.commit(&#123;</span><br><span class="line">            type: <span class="string">'increment'</span>,</span><br><span class="line">            count: <span class="number">10</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="高级用法-1"><a href="#高级用法-1" class="headerlink" title="高级用法"></a>高级用法</h5><p><code>Vuex</code> 还有 <code>3</code> 个选项可以使用：<code>getters</code>、<code>actins</code>、<code>modules</code>。</p><ul><li><code>getters</code></li></ul><p>有时候我们需要从 <code>store</code> 中的 <code>state</code> 中派生出一些状态，例如对列表进行过滤并计数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stre/index.js</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        list: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">17</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.vue</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  list () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.list.filter(<span class="function"><span class="params">item</span> =&gt;</span> item &lt; <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写完全没有问题，但是有时候其他组件也需要过滤后的数据，这样就需要把同样的方法在写一遍，为了避免这种重复，就可以使用 <code>getters</code> 了。</p><p><code>getters</code> 可以看做是 <code>store</code> 的计算属性。就像计算属性一样，<code>getter</code> 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stre/index.js</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        list: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">17</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        filteredList: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.list.filter(<span class="function"><span class="params">item</span> =&gt;</span> item &lt; <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">        list () &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.filteredList;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>actions</code></li></ul><p><code>mutations</code> 里面不应该异步操作数据，所以有了 <code>actions</code> 选项，<code>actions</code> 与 <code>mutations</code> 很像，不同的是 <code>action</code> 里面提交的是 <code>mutation</code>，并且可以异步操作业务逻辑。</p><p><code>action</code> 在组件内通过 <code>$store.dispatch</code> 触发。我们用一个 <code>Promise</code> 在 <code>1</code> 秒钟后提交 <code>mutations</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        increment (state, n) &#123;</span><br><span class="line">            n = n || <span class="number">1</span>;</span><br><span class="line">            state.count += n;</span><br><span class="line">        &#125;,</span><br><span class="line">        decrease (state) &#123;</span><br><span class="line">            state.count --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        asyncIncrement (context) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    context.commit(<span class="string">'increment'</span>);</span><br><span class="line">                    resolve();</span><br><span class="line">                &#125;, <span class="number">1000</span>)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleIncrement"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleActionIncrement"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'index'</span>,</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">        count () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleIncrement () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        handleActionIncrement () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$store.dispatch(<span class="string">'asyncIncrement'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Promise</code> 是一种异步方案，异步 <code>action</code> 同时当然也可以用普通的回调来实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line">actions: &#123;</span><br><span class="line">    asyncIncrement (context, callback) &#123;</span><br><span class="line">        setTimeout (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            context.commit(<span class="string">'increment'</span>);</span><br><span class="line">            callback();</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mutations</code> 和 <code>actions</code> 看起来很像，但 <code>Vuex</code> 很像是一种与开发者的约定，涉及改变数据的，就使用 <code>mutations</code>，存在业务逻辑的，就用 <code>actions</code>。</p><ul><li><code>modules</code></li></ul><p>它用来将 <code>store</code> 分割到不同的模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">    state: &#123; ... &#125;,</span><br><span class="line">    mutations: &#123; ... &#125;,</span><br><span class="line">    actions: &#123; ... &#125;,</span><br><span class="line">    getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">    state: &#123; ... &#125;,</span><br><span class="line">    mutations: &#123; ... &#125;,</span><br><span class="line">    actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules: &#123;</span><br><span class="line">        a: moduleA,</span><br><span class="line">        b: moduleB</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// moduleB 的状态</span></span><br></pre></td></tr></table></figure><p>不同模块下的数据状态管理，添加命名空间 <code>namespaced</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        add (state) &#123;</span><br><span class="line">        state.count += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;&#125;,</span><br><span class="line">    getters: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        add (state) &#123;</span><br><span class="line">        state.count ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules: &#123;</span><br><span class="line">        a: moduleA,</span><br><span class="line">        b: moduleB</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>使用 <code>namespaced</code> 后，提交时在前面加上模块名：</p><p>例如：<code>this.$store.commit(&#39;a/add&#39;)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>A: &#123;&#123; countA &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>B: &#123;&#123; countB &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleAdda"</span>&gt;</span>+2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleAddb"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'index'</span>,</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">        countA () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.a.count;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        countB () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.b.count;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleAdda () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$store.commit(<span class="string">'a/add'</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        handleAddb () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$store.commit(<span class="string">'b/add'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 阅读笔记（三）</title>
      <link href="2019/12/16/vue-comp/comp-vue/"/>
      <url>2019/12/16/vue-comp/comp-vue/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue-js-阅读笔记（三）"><a href="#Vue-js-阅读笔记（三）" class="headerlink" title="Vue.js 阅读笔记（三）"></a>Vue.js 阅读笔记（三）</h3><blockquote><p>系统、框架性的认识 <code>Vue</code>，组件详解。</p></blockquote><a id="more"></a><h4 id="组件与复用"><a href="#组件与复用" class="headerlink" title="组件与复用"></a>组件与复用</h4><ul><li>为什么使用组件？</li></ul><blockquote><p>在实际业务中，我们可能需要重复使用到相同的组件，业务需求也会发生频繁的变动，这时，组件的复用就体现出优势了。</p></blockquote><ul><li>组件用法</li></ul><p>在我们创建 <code>Vue</code> 的实例时，需要将实例注册并挂载到挂载点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>组件与之类似，需要注册后才可以使用。</p><p>注册有全局注册和局部注册两种方式，全局注册后，任何 <code>Vue</code> 的实例都可以使用。</p><p>全局注册：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>my-component</code> 是注册组件的自定义名称，推荐用小写加减号分割的形式命名。</p><p>子父实例中使用这个组件，必须要在实例创建前注册，之后就可以使用 <code>&lt;my-component&gt;&lt;/my-component&gt;</code> 的形式来使用组件了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是子组件内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染后结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是子组件内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>局部组件：</p><p>在 <code>Vue</code> 的实例中，使用 <code>components</code> 选项可以局部注册组件，注册后的组件只有在该实例作用域下有效，组件下也可以嵌套组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> Child = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是子组件内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="actionscript">            <span class="string">'my-component'</span>: Child</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Vue</code> 组件的模板在某些情况下会受到 <code>HTML</code> 的限制，如 <code>&lt;table&gt;</code> 内规定只允许是 <code>&lt;tr&gt;</code>、<code>&lt;td&gt;</code>、<code>&lt;th&gt;</code> 这些表格元素，所以在 <code>&lt;table&gt;</code> 内直接使用组件是无效的。这种情况下，可以使用特殊的 <code>is</code> 属性来挂载组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">is</span>=<span class="string">"my-component"</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是子组件的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;tbody&gt;</code> 在渲染时，会被替换为组件内容。常见的限制元素还有 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;select&gt;</code>。</p><p>除了 <code>template</code> 之外，组件中还可以像 <code>Vue</code> 实例那样使用其他选项，如 <code>data</code>、<code>computed</code>、<code>methods</code> 等。</p><p>但是，使用 <code>data</code> 时，和实例稍微有点区别， <code>data</code> 必须是函数，然后将数据 <code>return</code> 出去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">    template: <span class="string">'&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;'</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            message: <span class="string">'这里是子组件的内容'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以简写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">    template: <span class="string">'&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;'</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            message: <span class="string">'这里是子组件的内容'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>JavaScript</code> 对象时引用关系，所以如果 <code>return</code> 出的对象引用了外部的一个对象，那么这个对象就是共享的，任何一方修改都会同步。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> data = &#123;</span></span><br><span class="line">        counter: 0</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"counter++"</span>&gt;</span></span><span class="template-variable">&#123;&#123; counter &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span></span><br><span class="line">        data () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> data;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件使用了 <code>3</code> 次，但是点击任意一个按钮所有数字都会加 <code>1</code>，那是因为组件的 <code>data</code> 引用的是外部的对象，这不是我们期望的结果，所以给组件返回一个新的 <code>data</code> 对象来独立。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"counter++"</span>&gt;</span></span><span class="template-variable">&#123;&#123; counter &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span></span><br><span class="line">        data () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                counter: 0</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样 <code>3</code> 个按钮就不互相影响了，完全达到了复用的目的。</p><h4 id="使用-props-传递数据"><a href="#使用-props-传递数据" class="headerlink" title="使用 props 传递数据"></a>使用 <code>props</code> 传递数据</h4><blockquote><p>组件不仅仅是要把模板的内容进行复用，更重要的是组件间要进行通信。</p></blockquote><p>通常父组件的模板中包含子组件，父组件要正向的向子组件传递数据或参数，子组件接收到后根据参数的不同来渲染不同的内容或执行操作。</p><p>这个正向传递数据的过程就是通过 <code>props</code> 来实现的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">message</span>=<span class="string">"来自父组件的数据"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>来自父组件的数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>props</code> 中声明的数据与组件 <code>data</code> 函数 <code>reture</code> 的数据的主要区别就是 <code>props</code> 的数据来自父级，而 <code>data</code> 中的是组件自己的数据，作用域是组件本身。</p><p>这两种数据都可以在模板 <code>template</code> 及计算属性 <code>computed</code> 和 方法 <code>methods</code> 中使用。</p><p>由于 <code>HTML</code> 特性不区分大小写，当使用 <code>DOM</code> 模板时，驼峰命名的 <code>props</code> 名称要转为短横分隔命名：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">warning-text</span>=<span class="string">"提示信息"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">'warningText'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123; warningText &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有时候，需要传递来自父组件的动态数据，使用 <code>v-bind</code> 来动态绑定 <code>props</code> 的值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:message</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            msg: <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件传值给子组件，子组件获取值后可以进行使用。</p><ul><li>单向数据流</li></ul><p>通过 <code>props</code> 传递的数据是单向的，也就是说父组件数据变化时会传递给子组件，但是反过来不行。</p><p>在业务中，经常会遇到两种情况需要改变 <code>props</code> 的情况，一种是父组件传递初始值进来，子组件将它作为初始值保存起来，在自己的作用域下可以随意的改变和修改：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:init-count</span>=<span class="string">'count'</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">'initCount'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123; compCount &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line">        data () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                compCount: <span class="keyword">this</span>.initCount</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            count: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另一种是 <code>props</code> 作为需要被转变的原始值传入，使用计算属性进行修改后使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:width</span>=<span class="string">'width'</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            props: [<span class="string">'width'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">            template: '<span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"style"</span>&gt;</span>子组件内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line">            computed: &#123;</span><br><span class="line"><span class="actionscript">                style: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                        width: <span class="keyword">this</span>.width + <span class="string">'px'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                width: 100</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>计算属性里面的函数还可以进一步使用简写方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    style () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            width: <span class="keyword">this</span>.width + <span class="string">'px'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>最终渲染结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;"</span>&gt;</span>子组件内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>数据验证</li></ul><p>上面所介绍的 <code>props</code> 选项的值都是一个数组，当然，除了数组之外，还可以是对象，当 <code>props</code> 需要验证时，就需要对象的写法：</p><p>一般当自己的组件需要提供给别人使用时，推荐都进行数据验证，比如某个数据必须是数字，如果传入字符串，就会在控制台弹出警告。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">        <span class="comment">// 必须是数字类型</span></span><br><span class="line">        propA: <span class="built_in">Number</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须是字符串或者数字类型</span></span><br><span class="line">        propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 布尔值，如果没有定义，默认为 true</span></span><br><span class="line">        propC: &#123;</span><br><span class="line">            type: <span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数字，而且必传</span></span><br><span class="line">        propD: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            required: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是数组或对象，默认值必须是一个函数来返回</span></span><br><span class="line">        propE: &#123;</span><br><span class="line">            type: <span class="built_in">Array</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> [];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义一个验证器</span></span><br><span class="line">        propF: &#123;</span><br><span class="line">            validator: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> value &gt; <span class="number">20</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>验证的 <code>type</code> 类型可以是：</p><ul><li><p><code>String</code></p></li><li><p><code>Number</code></p></li><li><p><code>Boolean</code></p></li><li><p><code>Object</code></p></li><li><p><code>Array</code></p></li><li><p><code>Function</code></p></li></ul><p><code>type</code> 也是一个自定义构造器，使用 <code>instanceof</code> 检测。</p><h4 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h4><blockquote><p>从父组件向子组件通信，通过 <code>props</code> 传递数据就可以了，但是 <code>Vue</code> 的通信场景不止一种，组件关系可以分为父子组件通信、兄弟组件通信、跨级组件通信。</p></blockquote><ul><li>自定义事件</li></ul><p>当子组件需要像父组件传递数据，就需要使用到自定义事件。类似有 <code>JS</code> 设计模式中的观察者模式，子组件用 <code>$emit()</code> 来触发事件，父组件用 <code>$on()</code> 来监听子组件的事件。</p><p>父组件也可以直接在子组件的自定义标签上使用 <code>v-on</code> 来监听子组件触发的自定义事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>总数：&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">increase</span>=<span class="string">"handleGetTotal"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">reduce</span>=<span class="string">"handleGetTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line">        template: '\</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleIncrease"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleReduce"</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line">        </span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                counter: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleIncrease() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.counter++;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$emit(<span class="string">'increase'</span>, <span class="keyword">this</span>.counter);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            handleReduce() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.counter--;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$emit(<span class="string">'reduce'</span>, <span class="keyword">this</span>.counter);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            total: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleGetTotal(total) &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.total = total;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>v-model</code></li></ul><p>其实也是通过事件的方式实现，但语法糖可以一定量上简化代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>总数：&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-model</span>=<span class="string">"total"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                counter: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.counter++;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, <span class="keyword">this</span>.counter);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            total: 0</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，也可以完全还原第一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>总数：&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-model</span>=<span class="string">"total"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line">        template: '\</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleIncrease"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleReduce"</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                counter: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleIncrease() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.counter++;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, <span class="keyword">this</span>.counter);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            handleReduce() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.counter--;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, <span class="keyword">this</span>.counter);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            total: 0</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-model</code> 还可以用来创建自定义的表单输入组件，进行数据的双向绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>总数：&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-model</span>=<span class="string">"total"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handleIncrease'</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleReduce"</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">'value'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">"value"</span> @<span class="attr">input</span>=<span class="string">"updateValue"</span>&gt;</span>',</span></span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                counter: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            updateValue() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, event.target.value);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            total: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleIncrease() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.total++;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            handleReduce() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.total--;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控件接收一个 <code>value</code> 属性，在有新的 <code>value</code> 时触发 <code>input</code> 事件。</p><ul><li>非父子间通信</li></ul><p>兄弟组件和跨多级组件之间的通信，在 <code>Vue.js 2.x</code> 中，推荐使用一个空的 <code>Vue</code> 实例作为中央事件总线(<code>bus</code>)，也就是一个中介。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">component-a</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> bus = <span class="keyword">new</span> Vue();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'component-a'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleEvent"</span>&gt;</span>传递事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span></span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleEvent() &#123;</span><br><span class="line"><span class="actionscript">                bus.$emit(<span class="string">'on-message'</span>, <span class="string">'来自组件 component-a 的内容'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message: <span class="string">''</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        mounted () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 在实例初始化时，监听来自 bus 的事件</span></span></span><br><span class="line"><span class="actionscript">            bus.$on(<span class="string">'on-message'</span>, <span class="function"><span class="keyword">function</span><span class="params">(msg)</span> </span>&#123;</span></span><br><span class="line">                _this.message = msg;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了中央事件总线 <code>bus</code> 外，还有两种方法可以实现组件间的通信：父链和子组件索引。</p><ul><li>父链</li></ul><blockquote><p>在子组件中，使用 <code>this.$parent</code> 可以直接访问该组件的父实例或组件，父组件也可以通过 <code>this.$children</code> 访问它的所有的子组件，而且可以递归向上或向下无限访问，直到根实例或最内层的组件。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">component-a</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'component-a'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleEvent"</span>&gt;</span>通过父链之间修改数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span></span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleEvent() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$parent.message = <span class="string">'来自子组件 component-a 的内容'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message: <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>尽管 <code>Vue</code> 允许这样操作，但在业务中，子组件应该尽可能的避免依赖父组件的数据，更不应该去主动修改它的数据。</p><p>因为这样使得父子附件紧耦合，只看父组件，很难理解父组件的状态，因为它可能被任意组件修改，理想情况下，只有组件自己能修改它的状态。父子组件最好还是通过 <code>props</code> 和 <code>$emit</code> 来通信。</p><ul><li>子组件索引</li></ul><blockquote><p>当子组件较多时，通过 <code>this.$children</code> 来一一遍历找出需要的一个组件实例是比较困难的，尤其是组件动态渲染时，它们的序列是不固定的。 <code>Vue</code> 提供了子组件索引的方法，用特殊的属性 <code>ref</code> 来为子组件指定一个索引名称。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleRef"</span>&gt;</span>通过 ref 获取子组件实例<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component-a</span> <span class="attr">ref</span>=<span class="string">"comA"</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'component-a'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                message: <span class="string">'子组件内容'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleRef() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> msg = <span class="keyword">this</span>.$refs.comA.message;</span></span><br><span class="line">                alert(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在父组件模板中，子组件标签上使用 <code>ref</code> 指定一个名称，并在子组件内通过 <code>this.$refs</code> 来访问指定名称的子组件。</p><p><code>$refs</code> 只在组件渲染完成后才填充，并且并非是响应式的，它仅仅是作为一个直接访问子组件的应急方案，应当避免在模板或计算属性中使用 <code>$refs</code>。</p><h5 id="使用-slot-分发内容"><a href="#使用-slot-分发内容" class="headerlink" title="使用 slot 分发内容"></a>使用 <code>slot</code> 分发内容</h5><ul><li>什么是 <code>slot</code></li></ul><p>当需要让组件组合使用，混合父组件与子组件的内容时，就会用到 <code>slot</code>，这个过程叫做内容分发，</p><p>在一个 <code>Vue</code> 实例中，使用 <code>props</code> 传递数据，<code>enents</code> 触发事件和 <code>slot</code> 内容分发，这就构成了 <code>Vue</code> 组件的 <code>3</code> 个 <code>API</code> 来源，再复杂的组件也是由这 <code>3</code> 部分组成的。</p><ul><li>作用域</li></ul><p>在介绍 <code>slot</code> 之前，需要理解编译的作用域，比如父组件中有如下模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child-component</span>&gt;</span></span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的 <code>message</code> 就是一个 <code>slot</code>，但是他绑定的是父组件的数据，而不是组件 <code>child-component</code> 的数据。</p><p>父组件模板的内容是在父组件作用域内编译的，子组件模板的内容是在子组件作用域内编译的。</p><p>一个绑定数据作用域在父组件的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-component</span> <span class="attr">v-show</span>=<span class="string">"showChild"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'child-component'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            showChild: <span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个绑定数据作用域在子组件的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-component</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'child-component'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"showChild"</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                showChild: <span class="literal">true</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>了解了两者作用域的区别，我们就可以知道，<code>slot</code> 分发的内容，作用域是在父组件上的。</p><ul><li><code>slot</code> 用法</li></ul><p>单个 <code>slot</code>:</p><p>在子组件内使用特殊的 <code>&lt;slot&gt;</code> 元素可以为这个组件开启一个 <code>slot</code> (插槽)，在父组件模板中，插入在子组件标签内的所有内容将代替子组件的 <code>&lt;slot&gt;</code> 标签及它的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>分发内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>分发更多内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'child-component'</span>, &#123;</span></span><br><span class="line">        template: '\</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>如果父组件没有插入内容，默认出现。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具名 <code>slot</code>:</p><p>给 <code>&lt;slot&gt;</code> 元素指定一个 <code>name</code> 之后可以分发多个内容，具名 <code>slot</code> 可以与单个 <code>slot</code> 共存。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>正文内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>更多正文内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span>底部信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'child-component'</span>, &#123;</span></span><br><span class="line">        template: '\</span><br><span class="line"><span class="javascript">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;\</span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"header"</span>&gt;\</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"main"</span>&gt;\</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"footer"</span>&gt;\</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染后：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>正文内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>更多正文内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>底部信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>作用域插槽</li></ul><p>作用域插槽是一种特殊的 <code>slot</code>，使用一个可以复用的模板代替已渲染元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>来组父组件的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; props.msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'child-component'</span>, &#123;</span></span><br><span class="line">        template: '\</span><br><span class="line"><span class="javascript">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;\</span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">msg</span>=<span class="string">"来组子组件的内容"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>观察例子可发现，父组件在 <code>template</code> 标签中属性 <code>scope</code> 定义了一个临时变量 <code>props</code> 来访问子组件插槽的数据 <code>msg</code>。</p><p>作用域插槽是使用场景主要是既可以复用子组件的 <code>slot</code>，又可以使 <code>slot</code> 的内容不一致。</p><ul><li>访问 <code>slot</code></li></ul><p>使用方法 <code>$slots</code> 访问分发内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>正文内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>更多正文内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span>底部信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'child-component'</span>, &#123;</span></span><br><span class="line">        template: '\</span><br><span class="line"><span class="javascript">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;\</span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"header"</span>&gt;\</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"main"</span>&gt;\</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"footer"</span>&gt;\</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line">        mounted() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> header = <span class="keyword">this</span>.$slots.header;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> main = <span class="keyword">this</span>.$slots.default;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> footer = <span class="keyword">this</span>.$slots.footer;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(header)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(footer[<span class="number">0</span>].elm.innerHTML)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 <code>$slots</code> 可以访问某个具名的 <code>slot</code>，<code>this.$slots.default</code> 包括了所有没有包含在具名 <code>slot</code> 的节点。</p><p><code>$slots</code> 在业务中几乎用不到，在 <code>render</code> 函数创建组件时会比较有用，但是还是用于独立组件的开发中。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 阅读笔记（二）</title>
      <link href="2019/12/12/vue-basic/v-vue/"/>
      <url>2019/12/12/vue-basic/v-vue/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue-js-阅读笔记（二）"><a href="#Vue-js-阅读笔记（二）" class="headerlink" title="Vue.js 阅读笔记（二）"></a>Vue.js 阅读笔记（二）</h3><blockquote><p>系统、框架性的认识 <code>Vue</code>。<code>v-bind</code>、<code>v-on</code>、<code>v-if</code>、<code>v-for</code>、<code>v-model</code>。</p></blockquote><a id="more"></a><h4 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h4><h5 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h5><ul><li><code>v-cloak</code></li></ul><blockquote><p><code>v-cloak</code> 不需要表达式，它会在实例结束编译时从绑定的 <code>HTML</code> 元素上移除，经常和 <code>CSS</code> 中的 <code>display: none;</code> 配合使用。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message: <span class="string">'some messages'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当网速较慢，<code>vue.js</code> 文件还没有加载完时，页面上就会显示 <code></code> 的字样，直到 <code>Vue</code> 创建实例、编译模板时， <code>DOM</code> 才会被替换，所以这个过程中，屏幕是会有闪动的，使用 <code>v-cloak</code> 配合 <code>CSS</code>，就是解决初始化慢导致页面抖动的最佳实践。</p><p>一般情况下，在使用了 <code>webpack</code> 和 <code>vue-route</code> 时，项目的 <code>HTML</code> 只有一个空的 <code>div</code> 元素，剩余的内容都是由路由去挂载不同组件完成的，所以也就不需要 <code>v-cloak</code> 了。</p><ul><li><code>v-once</code></li></ul><blockquote><p>也是一个不需要表达式的指令，作用是定义它的组件或元素只被渲染一次，包括元素或组件的所有节点。首次渲染之后，不再随数据的变化重新渲染，将被视为静态内容。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-once</span>&gt;</span></span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message: <span class="string">'some messages'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-once</code> 在业务中很少使用，当需要进一步优化性能时，才可能会使用到。</p><h5 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h5><ul><li><code>v-if</code>、<code>v-else-if</code>、<code>v-else</code></li></ul><blockquote><p>与 <code>JavaScript</code> 的条件语句 <code>if</code>、<code>else</code>、<code>else if</code> 类似，<code>Vue.js</code> 的条件指令可以根据表达式的值在 <code>DOM</code> 中渲染或销毁元素/组件。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"status === 1"</span>&gt;</span>当 status 为 1 时，显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"status === 2"</span>&gt;</span>当 status 为 2 时，显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>否则，显示该行<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            status: 1,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Vue</code> 在渲染元素时，会尽可能的复用已有的元素而非重新渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"type === 'name'"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"Here input your name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"type === 'email'"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"Here input your email"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleToggleClick"</span>&gt;</span>Change Type<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            type: <span class="string">'name'</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            handleToggleClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.type = <span class="keyword">this</span>.type === <span class="string">'name'</span> ? <span class="string">'email'</span> : <span class="string">'name'</span>;      </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里键入内容，点击切换后，虽然 <code>DOM</code> 改变了，但是输入框的内容并没有改变，只是替换了 <code>placeholder</code> 的内容，<code>&lt;input&gt;</code> 元素被复用了。</p><p>如果你不希望这样，可以使用 <code>key</code> 属性，它可以决定是否要复用元素，<code>key</code> 值必须要是唯一的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"type === 'name'"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">key</span>=<span class="string">"name-input"</span> <span class="attr">placeholder</span>=<span class="string">"Here input your name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"type === 'email'"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">key</span>=<span class="string">"email-input"</span> <span class="attr">placeholder</span>=<span class="string">"Here input your email"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleToggleClick"</span>&gt;</span>Change Type<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            type: <span class="string">'name'</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            handleToggleClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.type = <span class="keyword">this</span>.type === <span class="string">'name'</span> ? <span class="string">'email'</span> : <span class="string">'name'</span>;      </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>v-show</code></li></ul><blockquote><p><code>v-show</code> 与 <code>v-if</code> 基本一致，只不过 <code>v-show</code> 是改变元素的 <code>CSS</code> 属性 <code>display</code>，当表达式的值为 <code>false</code> 时，元素会隐藏。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"status === 1"</span>&gt;</span>当 status 为 1 时，显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            status: 2,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            isShow: <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：<code>v-show</code> 不能在 <code>&lt;template&gt;</code> 上使用。</p><ul><li><code>v-if</code> 和 <code>v-show</code> 的选择</li></ul><p><code>v-if</code> 是条件渲染，会根据表达式适当的销毁或重建元素及绑定事件或子组件。若表达式一开始为 <code>false</code>，则一开始元素\组件并不会被渲染，只有当条件第一次变为 <code>true</code> 时才开始编译。</p><p><code>v-show</code> 只是简单的 <code>CSS</code> 属性切换，无论条件是否为 <code>true</code>，都会被编译。</p><p>相比之下，<code>v-if</code> 更适合条件不经常改变的场景，因为它切换的开销相对较大，而 <code>v-show</code> 适合用于频繁切换的条件。</p><h5 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h5><ul><li><code>v-for</code></li></ul><blockquote><p>当需要将一个数组遍历或枚举一个对象循环显示时，就需要用到列表渲染指令<code>v-for</code>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"book in books"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            books: [</span><br><span class="line"><span class="actionscript">                &#123; name: <span class="string">'book_1'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">                &#123; name: <span class="string">'book_2'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">                &#123; name: <span class="string">'book_3'</span> &#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了用 <code>in</code> 做分隔符，也可以使用 <code>of</code> 作为分隔符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"book of books"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还支持一个可选参数作为当前索引：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(book, index) in books"</span>&gt;</span>&#123;&#123; index &#125;&#125; - &#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可选参数放在后面</p><p>除了数组外，对象的属性也是可以遍历的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in user"</span>&gt;</span>&#123;&#123; index &#125;&#125; - &#123;&#123; key &#125;&#125; - &#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            user: &#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'Akashi'</span>,</span></span><br><span class="line"><span class="actionscript">                gender: <span class="string">'male'</span>,</span></span><br><span class="line">                age: 22</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>遍历对象属性时，有两个可选参数，分别是键名和索引，参数传入顺序为 <code>(value, key, index)</code>。</p><ul><li>数组更新</li></ul><blockquote><p><code>Vue</code> 的核心是数据与视图的双向绑定，当我们修改数组时，<code>Vue</code> 会检测到数据的变化，所以渲染的视图也会立即更新。</p></blockquote><p>数组方法：</p><ul><li><p><code>push()</code></p><ul><li>向数组的末尾添加一个或多个元素，并返回新的长度。</li></ul></li><li><p><code>pop()</code></p><ul><li>用于删除并返回数组的最后一个元素。</li></ul></li><li><p><code>shift()</code></p><ul><li>用于把数组的第一个元素从其中删除，并返回第一个元素的值。</li></ul></li><li><p><code>unshift()</code></p><ul><li>向数组的开头添加一个或更多元素，并返回新的长度。</li></ul></li><li><p><code>splice()</code></p><ul><li>从数组中添加/删除项目，然后返回被删除的项目。</li></ul></li><li><p><code>sort()</code></p><ul><li>对数组的元素进行排序。</li></ul></li><li><p><code>reverse()</code></p><ul><li>用于颠倒数组中元素的顺序。</li></ul></li></ul><p>还有一些方法不会改变原数组：</p><ul><li><p><code>filter()</code></p><ul><li>创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</li></ul></li><li><p><code>concat()</code></p><ul><li>用于连接两个或多个数组。</li></ul></li><li><p><code>slice()</code></p><ul><li>从已有的数组中返回选定的元素(切片)。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(user, index) in users"</span>&gt;</span>&#123;&#123; index &#125;&#125; - &#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            users: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    name: <span class="string">'Akashi'</span>,</span></span><br><span class="line"><span class="actionscript">                    gender: <span class="string">'male'</span>,</span></span><br><span class="line">                    age: 22</span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="actionscript">                    name: <span class="string">'Asuka'</span>,</span></span><br><span class="line"><span class="actionscript">                    gender: <span class="string">'female'</span>,</span></span><br><span class="line">                    age: 21</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    app.users = app.users.filter(<span class="function"><span class="keyword">function</span> <span class="params">(item)</span> </span>&#123;</span></span><br><span class="line">        if (item.age &gt; 21) &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> item;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，第二项 <code>Asuka</code> 就会被过滤。</p><p><code>Vue</code> 在检测到数据变化时，并不是直接渲染整个列表，而是最大化的复用了 <code>DOM</code> 元素，替换的数组中，含有相同的元素的项不会被重新渲染，因此可以大胆的用新数组来替换旧数组，不用担心性能问题。</p><ul><li>过滤与排序</li></ul><blockquote><p>当不想改变原数组，想通过一个数组副本来做过滤或者排序显示时，可以使用计算属性来返回过滤或排序后的数组。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(user, index) in filterUser"</span>&gt;</span>&#123;&#123; index &#125;&#125; - &#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            users: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    name: <span class="string">'Akashi'</span>,</span></span><br><span class="line"><span class="actionscript">                    gender: <span class="string">'male'</span>,</span></span><br><span class="line">                    age: 22</span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="actionscript">                    name: <span class="string">'Asuka'</span>,</span></span><br><span class="line"><span class="actionscript">                    gender: <span class="string">'female'</span>,</span></span><br><span class="line">                    age: 21</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="actionscript">            filterUser: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="keyword">this</span>.users.filter(<span class="function"><span class="keyword">function</span> <span class="params">(user)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (user.gender === <span class="string">'female'</span>)</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span> user;</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="方法与事件"><a href="#方法与事件" class="headerlink" title="方法与事件"></a>方法与事件</h5><blockquote><p><code>Vue</code> 中事件处理引入了 <code>v-on</code>。</p></blockquote><p>一个计时器的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>点击次数 &#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleAdd()"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleAdd(10)"</span>&gt;</span>+10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            counter: 0,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            handleAdd: <span class="function"><span class="keyword">function</span><span class="params">(count)</span> </span>&#123;</span></span><br><span class="line">                count = count || 1;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.counter += count;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>methods</code> 中我们定义了需要的方法供 <code>@click</code> 调用，需要注意的是，调用的方法名后可以不跟括号 <code>()</code>。此时，如果该方法有参数，默认就会将原生事件对象 <code>event</code> 传入。</p><p>在大部分业务场景中，如果方法不需要传入参数，为了简便可以不写括号。</p><p><code>Vue</code> 还提供了一个特殊的变量 <code>$event</code>，用于访问原生 <code>DOM</code> 事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://akashigakki.github.io"</span> @<span class="attr">click</span>=<span class="string">"handleClick('禁止打开', $event)"</span>&gt;</span>打开链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            handleClick: <span class="function"><span class="keyword">function</span><span class="params">(message, event)</span> </span>&#123;</span></span><br><span class="line">                event.preventDefault();</span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.alert(message);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修饰符</li></ul><p>在上一例中使用的 <code>event.preventDefault()</code> 也可以用 <code>Vue</code> 事件的修饰符来实现。</p><ul><li><p><code>.stop</code></p></li><li><p><code>.prevent</code></p></li><li><p><code>.capture</code></p></li><li><p><code>.self</code></p></li><li><p><code>.once</code></p></li></ul><p>具体用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.stop</span>=<span class="string">"handle"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">"handle"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修饰符也可以串联：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"handle"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只有修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">sublit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.capture</span>=<span class="string">"handle"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只当事件在该元素本身(而不是子元素)触发时触发回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.self</span>=<span class="string">"handle"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只触发一次，组件同样适用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.once</span>=<span class="string">"handle"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>键盘监听事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.13</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了具体的某个 <code>keyCode</code> 外， <code>Vue</code> 还提供了一些快捷键名称：</p><ul><li><p><code>.enter</code></p></li><li><p><code>.tab</code></p></li><li><p><code>delete</code> (捕获 删除 和 退格键)</p></li><li><p><code>esc</code></p></li><li><p><code>space</code></p></li><li><p><code>up</code></p></li><li><p><code>down</code></p></li><li><p><code>left</code></p></li><li><p><code>right</code></p></li></ul><p>按键可以组合使用，或配合鼠标使用：</p><ul><li><p><code>.ctrl</code></p></li><li><p><code>alt</code></p></li><li><p><code>shift</code></p></li><li><p><code>meta</code> ( <code>Mac</code> 上是 <code>Command</code> 键， <code>Windows</code> 上是窗口键 )</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- shift + s --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.shift.83</span>=<span class="string">"handleSave"</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h5><blockquote><p>表单类控件承载了一个网页的录入与交互，<code>Vue</code> 中使用 <code>v-model</code> 完成表单的数据双向绑定。</p></blockquote><ul><li>基本用法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"输入..."</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入的内容是：&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message: <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于文本域(<code>textarea</code>)也是同样的用法。</p><p>可以用 <code>@input</code> 代替 <code>v-model</code>，事实上，<code>v-model</code> 也是一个特殊的语法糖，只不过它会在不同的表单上智能处理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">input</span>=<span class="string">"handleInput"</span> <span class="attr">placeholder</span>=<span class="string">"输入..."</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入的内容是：&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message: <span class="string">''</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            handleInput: <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.message = e.target.value;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单选按钮：</p><blockquote><p>单选按钮在单独使用时，不需要 <code>v-model</code>，直接使用 <code>v-bind</code> 绑定一个布尔类型的值，为真时为选中。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">:checked</span>=<span class="string">"picked"</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span> <span class="attr">name</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"radio"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"radio"</span>&gt;</span>单选按钮<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            picked: <span class="literal">true</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            handleClick: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.picked = !<span class="keyword">this</span>.picked;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配合 <code>v-model</code> 和 <code>value</code> 组合实现互斥效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span> <span class="attr">name</span>=<span class="string">"html"</span> <span class="attr">id</span>=<span class="string">"html"</span> <span class="attr">value</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"html"</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span> <span class="attr">name</span>=<span class="string">"js"</span> <span class="attr">id</span>=<span class="string">"js"</span> <span class="attr">value</span>=<span class="string">"js"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"js"</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span> <span class="attr">name</span>=<span class="string">"css"</span> <span class="attr">id</span>=<span class="string">"css"</span> <span class="attr">value</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"css"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            picked: <span class="string">'js'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>复选框：</p><blockquote><p>复选框单独使用时，使用 <code>v-model</code> 绑定一个布尔值。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">name</span>=<span class="string">"checked"</span> <span class="attr">id</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checked"</span>&gt;</span>选择状态： &#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            checked: <span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多个复选框(以数组绑定值)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">name</span>=<span class="string">"html"</span> <span class="attr">id</span>=<span class="string">"html"</span> <span class="attr">value</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"html"</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">name</span>=<span class="string">"js"</span> <span class="attr">id</span>=<span class="string">"js"</span> <span class="attr">value</span>=<span class="string">"js"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"js"</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">name</span>=<span class="string">"css"</span> <span class="attr">id</span>=<span class="string">"css"</span> <span class="attr">value</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"css"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            checked: [<span class="string">'html'</span>, <span class="string">'css'</span>]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>选择列表：</p><blockquote><p>下拉选择器，也分为单选和多选两种方式。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"selected"</span> <span class="attr">v-model</span>=<span class="string">"selected"</span> <span class="attr">id</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"html"</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"js"</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"css"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            selected: <span class="string">'js'</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在业务中，<code>&lt;option&gt;</code> 经常用 <code>v-for</code> 动态输出，<code>value</code> 和 <code>text</code> 也是用 <code>v-bind</code> 来动态输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"selected"</span> <span class="attr">v-model</span>=<span class="string">"selected"</span> <span class="attr">id</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-for</span>=<span class="string">"option in options"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:value</span>=<span class="string">"option.value"</span>&gt;</span>&#123;&#123; option.text &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            selected: <span class="string">'js'</span>,</span></span><br><span class="line">            options: [&#123;</span><br><span class="line"><span class="actionscript">                text: <span class="string">'HTML'</span>,</span></span><br><span class="line"><span class="actionscript">                value: <span class="string">'html'</span></span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line"><span class="actionscript">                text: <span class="string">'JavaScript'</span>,</span></span><br><span class="line"><span class="actionscript">                value: <span class="string">'js'</span></span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line"><span class="actionscript">                text: <span class="string">'CSS'</span>,</span></span><br><span class="line"><span class="actionscript">                value: <span class="string">'css'</span></span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虽然用选择列表 <code>&lt;select&gt;</code> 控件可以简单的完成下拉选择的需求，但是在实际业务中反而不常用，</p><p>因为它的样式依赖平台和浏览器，无法统一，也不太美观，功能也受限，比如不支持搜索，</p><p>所以常见的解决方案是使用 <code>&lt;div&gt;</code> 模拟一个类似的控件。</p><ul><li>绑定值</li></ul><blockquote><p>在业务中，往往需要绑定一个动态数据，这时可以使用 <code>v-band</code> 来实现。</p></blockquote><p>单选按钮：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span> <span class="attr">:value</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"radio"</span>&gt;</span>单选按钮<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            picked: <span class="literal">false</span>,</span></span><br><span class="line">            value: 123,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在选中时，<code>app.picked === app.value</code>，值都是 <code>123</code>。</p><p>复选框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"checkbox"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"checked"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"checked"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"toggle"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:true-value</span>=<span class="string">"value1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:false-value</span>=<span class="string">"value2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checked"</span>&gt;</span>复选框<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; toggle &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; value1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; value2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            toggle: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            value1: <span class="string">'a'</span>,</span></span><br><span class="line"><span class="actionscript">            value2: <span class="string">'b'</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>勾选时，<code>app.toggle === app.value1</code>；未勾选时，<code>app.toggle === app.value2</code>。</p><p>选择列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"selected"</span> <span class="attr">id</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">:value</span>=<span class="string">"number"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            selected: <span class="string">''</span>,</span></span><br><span class="line">            number: 456</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当选中时，<code>app.selected</code> 是一个 <code>Object</code>，<code>app.selected.number === 456</code></p><ul><li>修饰符</li></ul><blockquote><p>与事件的修饰符类似，<code>v-model</code> 也有修饰符，用于控制数据同步的时机。</p></blockquote><p><code>.lazy</code>:</p><p>在输入框中，<code>v-model</code> 默认是在 <code>input</code> 事件中同步输入框的数据，使用修饰符 <code>.lazy</code> 会转变为在 <code>change</code> 事件中同步。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message: <span class="string">''</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时，<code>message</code> 并不是实时改变的，而是在失去焦点或按回车时才更新。</p><p><code>.number</code>:</p><p>使用修饰符 <code>.number</code> 可以将输入转换为 <code>Number</code> 类型，否则虽然输入的是数字，但它的类型其实是 <code>String</code>，在数字输入框中会比较有用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.number</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; typeof message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            message: 123</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.trim</code>:</p><p>修饰符 <code>.trim</code> 可以自动过滤输入的首尾空格。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message: <span class="string">''</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 阅读笔记（一）</title>
      <link href="2019/12/11/vue-ref/vuejs/"/>
      <url>2019/12/11/vue-ref/vuejs/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue-js-阅读笔记（一）"><a href="#Vue-js-阅读笔记（一）" class="headerlink" title="Vue.js 阅读笔记（一）"></a>Vue.js 阅读笔记（一）</h3><blockquote><p>系统、框架性的认识 <code>Vue</code>。数据绑定、计算属性、过滤器 (data、methods、computed、filter…)。</p></blockquote><a id="more"></a><h4 id="Vue-js-是什么？"><a href="#Vue-js-是什么？" class="headerlink" title="Vue.js 是什么？"></a><code>Vue.js</code> 是什么？</h4><blockquote><p>简单来说，是一个数据双向绑定的渐进式前端框架。</p></blockquote><h5 id="MVVM-模式"><a href="#MVVM-模式" class="headerlink" title="MVVM 模式"></a><code>MVVM</code> 模式</h5><p>要了解 <code>Vue</code> 就需要了解 <code>MVVM</code> 模式，它是由经典的 <code>MVC</code> 架构衍生来的。当 <code>View</code> (视图层) 变化时，会自动更新到 <code>ViewModel</code> (视图模型) ，反之亦然。 <code>View</code> 和 <code>ViewModel</code> 之间通过双向绑定建立联系。</p><h4 id="实例与数据绑定"><a href="#实例与数据绑定" class="headerlink" title="实例与数据绑定"></a>实例与数据绑定</h4><blockquote><p>首先，通过例子简单认识 <code>Vue</code> 的特别之处。</p></blockquote><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><ul><li>数据双向绑定：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue.js<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"your name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125; !<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">''</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>点击事件：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>  <span class="attr">v-if</span>=<span class="string">"showBtn"</span> <span class="attr">v-on:click</span>=<span class="string">"handleClick"</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            showBtn: <span class="literal">true</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            handleClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'clicked!'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>for</code>:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"book in books"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            books: [&#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'vue.js'</span></span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'javascript'</span></span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'react'</span></span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><p>比较常用的生命周期钩子：</p><p><code>created</code>: 实例创建完成后调用，需要初始化处理一些数据时会比较有用。</p><p><code>mounted</code>: <code>el</code> 挂载到实例上后调用，一般我们的第一个业务处理逻辑会在这里开始。</p><p><code>beforeDestroy</code>: 实例销毁之前调用。</p><h5 id="插值与表达式"><a href="#插值与表达式" class="headerlink" title="插值与表达式"></a>插值与表达式</h5><p>使用双大括号 <code></code> 实现最基本的文本插值，它会自动将我们双向绑定的数据实时显示出来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123; date &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"link"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            date: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span></span><br><span class="line"><span class="handlebars"><span class="xml">            link: '<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>This is a link.<span class="tag">&lt;/<span class="name">a</span>&gt;</span>'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        mounted: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 声明一个变量指向Vue的实例this，保证作用域一致</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                _this.date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line">            &#125;, 1000);</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        beforeDestroy: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (<span class="keyword">this</span>.timer) &#123;</span></span><br><span class="line"><span class="actionscript">                clearInterval(<span class="keyword">this</span>.timer)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>插值表达式中的简单运算、三元运算</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123; number / 3 &#125;&#125;</span><br><span class="line">    &#123;&#123; isOK ? '确定' : '取消' &#125;&#125;</span><br><span class="line">    &#123;&#123; text.split(',').reverse().join(',') &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"link"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            number: 100,</span><br><span class="line"><span class="actionscript">            isOK: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            text: <span class="string">'123,456'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><p>在插值尾部添加管道符 <code>|</code> 对数据进行过滤</p><p>通过给实例添加 <code>filters</code> 来设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123; date | formDate &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> padDate = <span class="function"><span class="keyword">function</span><span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> value &lt; <span class="number">10</span> ? <span class="string">'0'</span> + value : value;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line">        &#125;,</span><br><span class="line">        filters: &#123;</span><br><span class="line"><span class="actionscript">            formDate: <span class="function"><span class="keyword">function</span><span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// value为需要过滤的数据</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(value);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> year = date.getFullYear(value);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> month = padDate(date.getMonth(value) + <span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> day = padDate(date.getDate());</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> hours = padDate(date.getHours(value));</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> minutes = padDate(date.getMinutes(value));</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> seconds = padDate(date.getSeconds(value));</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + day + <span class="string">' '</span> + hours + <span class="string">':'</span> + minutes + <span class="string">':'</span> + seconds;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        mounted: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                _this.date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line">            &#125;, 1000);</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        beforeDestroy: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (<span class="keyword">this</span>.timer) &#123;</span></span><br><span class="line"><span class="actionscript">                clearInterval(<span class="keyword">this</span>.timer)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="指令与事件"><a href="#指令与事件" class="headerlink" title="指令与事件"></a>指令与事件</h4><blockquote><p>指令是在 <code>Vue</code> 中最常用的一个功能，带有前缀 <code>v-</code>，如 <code>v-if</code>、<code>v-html</code>等。</p></blockquote><p>指令的主要职责就是当其表达式的值改变时，相应的将某些行为应用到 <code>DOM</code> 上。</p><p>数据驱动 <code>DOM</code> 是 <code>Vue.js</code> 的核心理念，所以不到万不得已时不要主动操作 <code>DOM</code>，只需要维护好数据，<code>DOM</code> 的事 <code>Vue</code> 会帮你优雅的处理。</p><h5 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a><code>v-if</code></h5><p>对元素进行判断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>显示这段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            show: <span class="literal">true</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-band"><a href="#v-band" class="headerlink" title="v-band"></a><code>v-band</code></h5><p>绑定元素数据，用于动态更新 <code>HTML</code> 元素上的属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgUrl"</span> <span class="attr">alt</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            url: <span class="string">'https://www.github.com'</span>,</span></span><br><span class="line"><span class="actionscript">            imgUrl: <span class="string">'https://xxx.xx.xx/img.png'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a><code>v-on</code></h5><p>绑定事件监听器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>显示这段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"handleClose"</span>&gt;</span>点击隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            show: <span class="literal">true</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            handleClose: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.show = <span class="literal">false</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h5><p>语法糖是指在不影响功能的情况下，添加某种方法实现同样的效果，从而方便程序的开发。</p><p>在 <code>Vue.js</code> 中，<code>v-bind</code> 和 <code>v-on</code> 都提供了语法糖，可以缩写为 <code>:</code> 和 <code>@</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgUrl"</span> <span class="attr">alt</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleClose"</span>&gt;</span>点击隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            url: <span class="string">'https://www.github.com'</span>,</span></span><br><span class="line"><span class="actionscript">            imgUrl: <span class="string">'https://xxx.xx.xx/img.png'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            handleClose: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.show = <span class="literal">false</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法糖可以简化代码的书写。</p><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><blockquote><p>模板内的表达式常用于简单的运算，当其过长或逻辑复杂时，会难以维护。计算属性就是用于解决该问题的。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123; reversedTest &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            text: <span class="string">'123,456'</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="actionscript">            reversedTest: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="keyword">this</span>.text.split(<span class="string">','</span>).reverse().join(<span class="string">','</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="计算属性的用法"><a href="#计算属性的用法" class="headerlink" title="计算属性的用法"></a>计算属性的用法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    总价：&#123;&#123; prices &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            package1: [&#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'iPhone8'</span>,</span></span><br><span class="line">                price: 7199,</span><br><span class="line">                count: 2,</span><br><span class="line">            &#125;, &#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'iPad'</span>,</span></span><br><span class="line">                price: 2888,</span><br><span class="line">                count: 1</span><br><span class="line">            &#125;],</span><br><span class="line">            package2: [&#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'apple'</span>,</span></span><br><span class="line">                price: 3,</span><br><span class="line">                count: 5,</span><br><span class="line">            &#125;, &#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'banana'</span>,</span></span><br><span class="line">                price: 2,</span><br><span class="line">                count: 10,</span><br><span class="line">            &#125;],</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="actionscript">            prices: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> prices = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.package1.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                    prices += <span class="keyword">this</span>.package1[i].price * <span class="keyword">this</span>.package1[i].count;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.package2.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                    prices += <span class="keyword">this</span>.package2[i].price * <span class="keyword">this</span>.package2[i].count;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> prices;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例子中，商品数量或价格变化时，计算属性 <code>prices</code> 就会自动更新，视图中的价格也会自动变化。</p><p>每一个计算属性都包含了一个 <code>getter</code> 和一个 <code>setter</code>，上面例子是计算属性的默认用法，只是利用了 <code>getter</code> 来读取。</p><p>在需要时，也可以提供一个 <code>setter</code> 函数，当手动修改计算属性的值就像修改一个普通数据那样时，就会触发 <code>setter</code> 函数，执行一些自定义的操作。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123; fullName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            firstName: <span class="string">'sai'</span>,</span></span><br><span class="line"><span class="actionscript">            lastName: <span class="string">'akashi'</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            fullName: &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span><span class="params">(newValue)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.firstName = names[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.lastName = names[names.length<span class="number">-1</span>];</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>绝大多数情况下，我们只会用默认的 <code>getter</code> 方法来读取一个计算属性，在业务中很少用到 <code>setter</code>，所以在声明一个计算属性时，可以直接使用默认的写法，不必将 <code>getter</code> 和 <code>setter</code> 都声明。</p><p>计算属性还有两个很实用的技巧容易被忽略，一是计算属性可以依赖其他计算属性，二是计算属性不仅可以依赖当前的 <code>Vue</code> 实例的数据，还可以依赖其他实例的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app2'</span>,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        reversedTest: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> app1.text.split(<span class="string">','</span>).reverse.join(<span class="string">','</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里的 <code>app2</code> 的计算属性是依赖 <code>app1</code> 的数据 <code>text</code>。</p><p>这样的用法在组件和组件化里会时常用到，尤其是在多人协同开发时。</p><h5 id="计算属性缓存"><a href="#计算属性缓存" class="headerlink" title="计算属性缓存"></a>计算属性缓存</h5><p>有一个问题，你可能会发现调用 <code>methods</code> 里的方法也可以和计算属性达到同样的目的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123; reversedTest() &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            text: <span class="string">'123,456'</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            reversedTest: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="keyword">this</span>.text.split(<span class="string">','</span>).reverse().join(<span class="string">','</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>既然可以使用 <code>methods</code> 代替，甚至还可以接受参数，使用起来更灵活，那么为什么还需要计算属性呢？原因就是计算属性是基于它的依赖缓存的。</p><p>一个计算属性所依赖的数据发生变化时，它才会重新取值，所以 <code>text</code> 只要不改变，计算属性也就不会更新。</p><p>但是 <code>methods</code> 不同，只要重新渲染，它就会被调用，因此函数也会被执行。</p><p>使用计算属性还是 <code>methods</code> 取决于你是否需要缓存，当遍历大数组和做大量计算时，应当使用计算属性。</p><h4 id="v-bind-class-与-style-的绑定"><a href="#v-bind-class-与-style-的绑定" class="headerlink" title="v-bind class 与 style 的绑定"></a><code>v-bind</code> <code>class</code> 与 <code>style</code> 的绑定</h4><blockquote><p><code>DOM</code> 元素经常会动态的绑定一些 <code>class</code> 类名或 <code>style</code> 样式，在 <code>vue</code> 中同样可以通过 <code>v-bind</code> 实现多种绑定的方法。</p></blockquote><p><code>v-bind</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgUrl"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以简写为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:scr</span>=<span class="string">"imgUrl"</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="绑定-class-的几种方式"><a href="#绑定-class-的几种方式" class="headerlink" title="绑定 class 的几种方式"></a>绑定 <code>class</code> 的几种方式</h5><ul><li>对象语法</li></ul><blockquote><p>给 <code>v-band:class</code> 设置一个对象，可以动态的切换 <code>class</code>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static"</span> <span class="attr">:class</span>=<span class="string">"&#123; 'active': isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            isActive: <span class="literal">true</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当 <code>:class</code> 的表达式过长或逻辑复杂时，还可以绑定一个计算属性，这是一种很友好和常见的用法，一般当条件多于两个时，都可以使用 <code>data</code> 或 <code>computed</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classes"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            isActive: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">            error: <span class="literal">null</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="actionscript">            classes: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    active: <span class="keyword">this</span>.isActive &amp;&amp; !<span class="keyword">this</span>.error,</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'text-fail'</span>: <span class="keyword">this</span>.error &amp;&amp; <span class="keyword">this</span>.error.type === <span class="string">'fail'</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'text'</span>: !<span class="keyword">this</span>.error</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终渲染结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>数组语法</li></ul><blockquote><p>给 <code>:class</code> 绑定一个数组，应用一个 <code>class</code> 列表。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[activeCls, errorCls]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            activeCls: <span class="string">'active'</span>,</span></span><br><span class="line"><span class="actionscript">            errorCls: <span class="string">'error'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以在数组中使用对象语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[&#123; 'active': isActive &#125;, errorCls]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            isActive: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">            errorCls: <span class="string">'error'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上两个实例的最终渲染结果都为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active error"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，也可以和对象语法一样，使用 <code>data</code>, <code>computed</code>, <code>metohds</code> 三种方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">:class</span>=<span class="string">"classes"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            size: <span class="string">'large'</span>,</span></span><br><span class="line"><span class="actionscript">            disabled: <span class="literal">true</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="actionscript">            classes: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> [</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'btn'</span>,</span></span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                        [<span class="string">'btn-'</span> + <span class="keyword">this</span>.size]: <span class="keyword">this</span>.size !== <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                        [<span class="string">'btn-disabled'</span>]: <span class="keyword">this</span>.disabled</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终渲染结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-large btn-disabled"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用计算属性给元素动态设置类名，在业务中经常用到，尤其在写复用的组件时，所以在开发过程中，如果表达式较长或逻辑复杂，应该尽量的优先使用计算属性。</p><ul><li>组件上的使用</li></ul><p>如果直接在自定义组件上使用 <code>class</code> 或 <code>:class</code>，样式规则会直接应用到个组件的根元素上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">    template: <span class="string">'&lt;p class="article"&gt;some text&lt;/p&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:class</span>=<span class="string">"&#123; 'active': isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            isActive: <span class="literal">true</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h5><blockquote><p>使用 <code>:style</code> 可以给元素绑定内联样式，方法与 <code>:class</code> 类似，有对象语法和数组语法，看起来像直接在元素上写 <code>CSS</code>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"styles"</span>&gt;</span>context<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            styles: &#123;</span><br><span class="line"><span class="actionscript">                color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="actionscript">                fontSize: <span class="number">14</span> + <span class="string">'px'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终渲染结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: red; font-size: 14px;"</span>&gt;</span>context<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在实际业务中，<code>:style</code> 的数组语法并不常用，一般写在 <code>data</code> 和 <code>computed</code> 中，较为常用的应当是计算属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"styles"</span>&gt;</span>context<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="actionscript">            styles: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    color: <span class="string">'yellow'</span>,</span></span><br><span class="line"><span class="actionscript">                    fontSize: <span class="number">18</span> + <span class="string">'px'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外，使用 <code>:style</code> 时，<code>Vue.js</code> 会自动给特殊的 <code>CSS</code> 属性名称增加前缀，如 <code>transform</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-QuickSort</title>
      <link href="2019/11/16/algorithm_quick_sort/quick/"/>
      <url>2019/11/16/algorithm_quick_sort/quick/</url>
      
        <content type="html"><![CDATA[<h3 id="QuickSort"><a href="#QuickSort" class="headerlink" title="QuickSort"></a>QuickSort</h3><blockquote><p>快速排序 - 递归分治为两个子数组，独立进行排序，主要在于切分元素的选择，左边子数组元素小于切分元素，右边子数组元素大于切分元素。</p></blockquote><a id="more"></a><h4 id="快速排序的思想"><a href="#快速排序的思想" class="headerlink" title="快速排序的思想"></a>快速排序的思想</h4><p>对于双边循环法，以两个指针和切分元素将数组进行递归切分，左边子数组元素小于切分元素，右边子数组元素大于切分元素，递归切分至最小元素时，自然实现排序(最小时包括一个左边元素，一个切分元素，一个右边元素，它们是有序的)。</p><p>对于单边循环法，只使用一个指针和切分元素将数组进行递归切分，并且使用一个标记指针记录切分边界的位置，当元素小于切分元素，移动标记元素并且与比较元素交换位置。</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><h5 id="单边循环法"><a href="#单边循环法" class="headerlink" title="单边循环法"></a>单边循环法</h5><ul><li><code>Java</code> 实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> j = partition(nums, lo, hi);</span><br><span class="line">        sort(nums, lo, j - <span class="number">1</span>);</span><br><span class="line">        sort(nums, j + <span class="number">1</span>, hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = nums[lo];</span><br><span class="line">        <span class="keyword">int</span> mark = lo;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lo + <span class="number">1</span>; i &lt;= hi; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; pivot) &#123;</span><br><span class="line">                mark++;</span><br><span class="line">                swap(nums, mark, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        swap(nums, lo, mark);</span><br><span class="line">        <span class="keyword">return</span> mark;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[a];</span><br><span class="line">        nums[a] = nums[b];</span><br><span class="line">        nums[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        QuickSort sort = <span class="keyword">new</span> QuickSort();</span><br><span class="line">        sort.sort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Python</code> 实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(nums, low, high)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> low &lt; high:</span><br><span class="line">        key = partition(nums, low, high)</span><br><span class="line">        sort(nums, low, key<span class="number">-1</span>)</span><br><span class="line">        sort(nums, key+<span class="number">1</span>, high)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(nums, low, high)</span>:</span></span><br><span class="line">    mark, key = low, nums[low]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(low+<span class="number">1</span>, high+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> nums[i] &lt; key:</span><br><span class="line">            mark += <span class="number">1</span></span><br><span class="line">            nums[mark], nums[i] = nums[i], nums[mark]</span><br><span class="line"></span><br><span class="line">    nums[low], nums[mark] = nums[mark], nums[low]</span><br><span class="line">    <span class="keyword">return</span> mark</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span> ,<span class="number">7</span>]   </span><br><span class="line">    sort(nums, <span class="number">0</span>, len(nums)<span class="number">-1</span>)</span><br><span class="line">    print(nums)</span><br></pre></td></tr></table></figure><h5 id="双边循环法"><a href="#双边循环法" class="headerlink" title="双边循环法"></a>双边循环法</h5><ul><li><code>Java</code> 实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quick</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo &gt;= hi)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pivot = partition(nums, lo, hi);</span><br><span class="line"></span><br><span class="line">        sort(nums, lo, pivot-<span class="number">1</span>);</span><br><span class="line">        sort(nums, pivot+<span class="number">1</span>, hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = nums[lo];</span><br><span class="line">        <span class="keyword">int</span> left = lo + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = hi;</span><br><span class="line">        <span class="keyword">boolean</span> done = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (done) &#123;</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; nums[left] &lt; pivot)</span><br><span class="line">                left++;</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; nums[right] &gt; pivot)</span><br><span class="line">                right--;</span><br><span class="line">            <span class="keyword">if</span> (left &gt; right)</span><br><span class="line">                done = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                swap(nums, left, right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        swap(nums, lo, right);</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[a];</span><br><span class="line">        nums[a] = nums[b];</span><br><span class="line">        nums[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span> ,<span class="number">7</span>&#125;;</span><br><span class="line">        Quick sort = <span class="keyword">new</span> Quick();</span><br><span class="line">        sort.sort(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Python</code> 实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(nums, low, high)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> low &lt; high:</span><br><span class="line">        key = partition(nums, low, high)</span><br><span class="line">        sort(nums, low, key<span class="number">-1</span>)</span><br><span class="line">        sort(nums, key+<span class="number">1</span>, high)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(nums, low, high)</span>:</span></span><br><span class="line">    left, right, key = low + <span class="number">1</span>, high, nums[low]</span><br><span class="line">    done = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> done:</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right <span class="keyword">and</span> nums[left] &lt; key:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right <span class="keyword">and</span> nums[right] &gt; key:</span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> left &gt; right:</span><br><span class="line">            done = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums[left], nums[right] = nums[right], nums[left]</span><br><span class="line">    </span><br><span class="line">    nums[low], nums[right] = nums[right], nums[low]</span><br><span class="line">    <span class="keyword">return</span> right</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span> ,<span class="number">7</span>]   </span><br><span class="line">    sort(nums, <span class="number">0</span>, len(nums)<span class="number">-1</span>)</span><br><span class="line">    print(nums)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-MergeSort</title>
      <link href="2019/11/15/algorithm_merge_sort/merge/"/>
      <url>2019/11/15/algorithm_merge_sort/merge/</url>
      
        <content type="html"><![CDATA[<h3 id="MergeSort"><a href="#MergeSort" class="headerlink" title="MergeSort"></a>MergeSort</h3><blockquote><p>归并排序 - 分治为子数组进行比较，然后归并。</p></blockquote><a id="more"></a><h4 id="归并排序的思想"><a href="#归并排序的思想" class="headerlink" title="归并排序的思想"></a>归并排序的思想</h4><p>归并，即将两个有序的数组归并成一个更大的有序数组。归并排序算法：要将一个数组排序，可以先递归的将它们分成两半进行排序，然后再将结果合并起来。合并时需要额外的空间进行操作。</p><h4 id="原地归并排序"><a href="#原地归并排序" class="headerlink" title="原地归并排序"></a>原地归并排序</h4><p>将原数组递归分治为两个子数组进行比较，使用一个辅助数组进行归并。</p><p>在归并时，左半边用尽，取右半边元素；右半边用尽，取左半边元素；右半边当前元素小于左半边当前元素，取右半边元素，以及右半边当前元素大于左半边元素，取左半边元素。</p><ul><li><code>Java</code> 实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Merge</span> </span>&#123;</span><br><span class="line"><span class="comment">//    原地归并排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo &gt;= hi)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        sort(a, lo, mid);</span><br><span class="line">        sort(a, mid+<span class="number">1</span>, hi);</span><br><span class="line"></span><br><span class="line">        merge(a, lo, mid, hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] aux = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            aux[k] = nums[k];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid)</span><br><span class="line">                nums[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi)</span><br><span class="line">                nums[k] = aux[i++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (aux[j] &lt; aux[i])</span><br><span class="line">                nums[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nums[k] = aux[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span> ,<span class="number">7</span>&#125;;</span><br><span class="line">        Merge sort = <span class="keyword">new</span> Merge();</span><br><span class="line">        sort.sort(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Python</code> 实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">    mid = len(nums) // <span class="number">2</span></span><br><span class="line">    left = nums[:mid]</span><br><span class="line">    right = nums[mid:]</span><br><span class="line"></span><br><span class="line">    sort(left)</span><br><span class="line">    sort(right)</span><br><span class="line"></span><br><span class="line">    i, j, k = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</span><br><span class="line">        <span class="keyword">if</span> left[i] &lt; right[j]:</span><br><span class="line">            nums[k] = left[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums[k] = right[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(left):</span><br><span class="line">        nums[k] = left[i]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> j &lt; len(right):</span><br><span class="line">        nums[k] = right[j] </span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span> ,<span class="number">7</span>]</span><br><span class="line">    sort(nums)</span><br><span class="line">    print(nums)</span><br></pre></td></tr></table></figure><p>另一种实现方式(个人感觉更简洁)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">    mid = len(nums) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    left = sort(nums[:mid])</span><br><span class="line">    right = sort(nums[mid:])</span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    aux = list()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</span><br><span class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</span><br><span class="line">            aux.append(left[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            aux.append(right[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    aux += left[i:]</span><br><span class="line">    aux += right[j:]</span><br><span class="line">    <span class="keyword">return</span> aux</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span> ,<span class="number">7</span>]</span><br><span class="line">    res = sort(nums)</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure><h4 id="自顶向下的归并排序"><a href="#自顶向下的归并排序" class="headerlink" title="自顶向下的归并排序"></a>自顶向下的归并排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeUB</span> </span>&#123;</span><br><span class="line"><span class="comment">//    自顶向下的归并排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        aux = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">        sort(a, lo, mid);</span><br><span class="line">        sort(a, mid+<span class="number">1</span>, hi);</span><br><span class="line">        merge(a, lo, mid, hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            aux[k] = nums[k];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid)</span><br><span class="line">                nums[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi)</span><br><span class="line">                nums[k] = aux[i++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (aux[j] &lt; aux[i])</span><br><span class="line">                nums[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nums[k] = aux[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span> ,<span class="number">7</span>&#125;;</span><br><span class="line">        MergeUB sort = <span class="keyword">new</span> MergeUB();</span><br><span class="line">        sort.sort(nums);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自底向上的归并排序"><a href="#自底向上的归并排序" class="headerlink" title="自底向上的归并排序"></a>自底向上的归并排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeBU</span> </span>&#123;</span><br><span class="line"><span class="comment">//    自底向上的归并排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        aux = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> size = <span class="number">1</span>; size &lt; N; size = size + size) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> lo = <span class="number">0</span>; lo &lt; N-size; lo += size + size) &#123;</span><br><span class="line">                merge(a, lo, lo+size-<span class="number">1</span>, Math.min(lo+size+size-<span class="number">1</span>, N-<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            aux[k] = nums[k];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid)</span><br><span class="line">                nums[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi)</span><br><span class="line">                nums[k] = aux[i++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (aux[j] &lt; aux[i])</span><br><span class="line">                nums[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nums[k] = aux[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span> ,<span class="number">7</span>&#125;;</span><br><span class="line">        MergeBU sort = <span class="keyword">new</span> MergeBU();</span><br><span class="line">        sort.sort(nums);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-InsertionSort</title>
      <link href="2019/11/14/algorithm_insertion_sort/insertion/"/>
      <url>2019/11/14/algorithm_insertion_sort/insertion/</url>
      
        <content type="html"><![CDATA[<h3 id="InsertionSort"><a href="#InsertionSort" class="headerlink" title="InsertionSort"></a>InsertionSort</h3><blockquote><p>插入排序 - 后一位与前面数组进行比较。</p></blockquote><a id="more"></a><h4 id="插入排序的思想"><a href="#插入排序的思想" class="headerlink" title="插入排序的思想"></a>插入排序的思想</h4><p>指定两个指针，从数组头部开始，第一个指针控制有序数组的边界，从 <code>1</code> 开始，另一个指针进行比较操作，控制子数组(有序数组)边界的元素，与前面有序数组进行比较，如果小于前一个元素，就和前一个元素交换位置，完成一次比较。</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><ul><li><code>Java</code> 实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Insertion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; nums[j] &lt; nums[j-<span class="number">1</span>]; j--) &#123;</span><br><span class="line">                swap(nums, j, j-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[a];</span><br><span class="line">        nums[a] = nums[b];</span><br><span class="line">        nums[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span> ,<span class="number">7</span>&#125;;</span><br><span class="line">        Insertion sort = <span class="keyword">new</span> Insertion();</span><br><span class="line">        sort.sort(nums);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外层循环确定有序数组的边界和循环次数(从 <code>1</code> 开始)，内层循环控制子数组中的比较操作，将新加入子数组中的元素与之前的元素进行比较，并插入到数组中的合适位置。</p><ul><li><code>Python</code> 实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Insertion</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        self.nums = nums</span><br><span class="line">        self.length = len(nums)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, self.length):</span><br><span class="line">            j = i</span><br><span class="line">            <span class="keyword">while</span> j <span class="keyword">and</span> self.nums[j] &lt; self.nums[j<span class="number">-1</span>]:</span><br><span class="line">                self.nums[j], self.nums[j<span class="number">-1</span>] = self.nums[j<span class="number">-1</span>], self.nums[j]</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.nums)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span> ,<span class="number">7</span>]</span><br><span class="line">    sort = Insertion(nums)</span><br><span class="line">    sort.sort()</span><br><span class="line">    sort.show()</span><br></pre></td></tr></table></figure><ul><li>简化版</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    length = len(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, length):</span><br><span class="line">        j = i</span><br><span class="line">        <span class="keyword">while</span> j <span class="keyword">and</span> nums[j] &lt; nums[j<span class="number">-1</span>]:</span><br><span class="line">            nums[j], nums[j<span class="number">-1</span>] = nums[j<span class="number">-1</span>], nums[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span> ,<span class="number">7</span>]</span><br><span class="line">    res = sort(nums)</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure><p>插入排序所需的时间取决于输入中元素的初始位置。如果对一个有序或接近有序的数组进行排序，效率会比随机数组有效的多。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-SelectionSort</title>
      <link href="2019/11/13/algorithm_selection_sort/selection/"/>
      <url>2019/11/13/algorithm_selection_sort/selection/</url>
      
        <content type="html"><![CDATA[<h3 id="SelectionSort"><a href="#SelectionSort" class="headerlink" title="SelectionSort"></a>SelectionSort</h3><blockquote><p>选择排序 - 前一位和后面的数组进行比较。</p></blockquote><a id="more"></a><h4 id="选择排序的思想"><a href="#选择排序的思想" class="headerlink" title="选择排序的思想"></a>选择排序的思想</h4><p>指定两个指针，从数组头部开始，将第一个与数组后面的数字逐一进行比较，如果第一个元素小于后面相比较的元素时，交换他们的位置，否则，位置不变，直到数组末尾，完成一轮比较。</p><p>结束一轮比较之后，数组第一个元素即为数组中最小的元素，指针向前移动一个位置，继续重复过程比较，直到最终获得一个有序的数组。</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><ul><li><code>Java</code> 实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Selection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                    swap(nums, i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[a];</span><br><span class="line">        nums[a] = nums[b];</span><br><span class="line">        nums[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span> ,<span class="number">7</span>&#125;;</span><br><span class="line">        Selection sort = <span class="keyword">new</span> Selection();</span><br><span class="line">        sort.sort(nums);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部循环控制第一个比较元素，即循环次数，内部循环控制第二个元素，并与第一个元素进行比较，符合条件，则进行交换。</p><ul><li><code>Python</code> 实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Selection</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        self.nums = nums</span><br><span class="line">        self.length = len(nums)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.length):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, self.length):</span><br><span class="line">                <span class="keyword">if</span> self.nums[i] &gt; self.nums[j]:</span><br><span class="line">                    self.nums[i], self.nums[j] = self.nums[j], self.nums[i]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.nums)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>]</span><br><span class="line">    sort = Selection(nums)</span><br><span class="line">    sort.sort()</span><br><span class="line">    sort.show()</span><br></pre></td></tr></table></figure><ul><li>简化版</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    length = len(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, length):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; nums[j]:</span><br><span class="line">                nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>]</span><br><span class="line">    res = sort(nums)</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure><p>选择排序在第一次外部循环找到数组中最小的元素，将它和数组中第一个的元素位置交换(如果第一个元素最小就和自己交换)，然后，进入第二次外部循环，在剩下的元素中，找到最小的元素，与第二个元素的位置交换，如此往复，完成数组排序。</p><p>因为每一次遍历一遍找出的都是最小的元素，并不能为下一次扫描提供什么信息，一个有序的数组和一个元素随机的数组排列所需的时间是一样的。</p><p>交换次数和数组大小是线性关系，数据的移动是最少的。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-BubbleSort</title>
      <link href="2019/11/12/algorithm_bubble_sort/bubble/"/>
      <url>2019/11/12/algorithm_bubble_sort/bubble/</url>
      
        <content type="html"><![CDATA[<h3 id="BubbleSort"><a href="#BubbleSort" class="headerlink" title="BubbleSort"></a>BubbleSort</h3><blockquote><p>冒泡排序 - 相邻两个元素进行比较。</p></blockquote><a id="more"></a><h4 id="冒泡排序的思想"><a href="#冒泡排序的思想" class="headerlink" title="冒泡排序的思想"></a>冒泡排序的思想</h4><p>指定两个指针，从数组头部开始，把相邻的两个元素进行比较，当前一个元素大于后一个元素时，交换他们的位置，否则，位置不变，直到数组末尾，完成一轮比较。</p><p>结束一轮比较，获得数组中最大的元素，在数组末尾。接下来重复这个过程，在剩下的元素中进行比较，最终得到一个有序的数组。</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><ul><li><code>Java</code> 实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bubble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        标记每轮遍历中数字是否发生了交换</span></span><br><span class="line">        <span class="keyword">boolean</span> hasChange = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length-<span class="number">1</span> &amp;&amp; hasChange; i++) &#123;</span><br><span class="line">            hasChange = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &gt; nums[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(nums, j, j+<span class="number">1</span>);</span><br><span class="line">                    hasChange = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[a];</span><br><span class="line">        nums[a] = nums[b];</span><br><span class="line">        nums[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        Bubble sort = <span class="keyword">new</span> Bubble();</span><br><span class="line">        sort.sort(nums);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部循环控制循环次数，内部循环实现每一轮冒泡处理：先元素比较，然后进行元素交换。</p><p>加入一个有序标记，如果元素没有发生交换，证明数组已经是有序的，结束循环。</p><ul><li><code>Python</code> 实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bubble</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        self.nums = nums</span><br><span class="line">        self.length = len(nums)</span><br><span class="line">        self.has_change = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.length<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> self.has_change:</span><br><span class="line">                self.has_change = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.length<span class="number">-1</span>-i):</span><br><span class="line">                    <span class="keyword">if</span> self.nums[j] &gt; self.nums[j+<span class="number">1</span>]:</span><br><span class="line">                        self.nums[j], self.nums[j+<span class="number">1</span>] = self.nums[j+<span class="number">1</span>], self.nums[j]</span><br><span class="line">                        self.has_change = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.nums)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>]</span><br><span class="line">    sort = Bubble(nums)</span><br><span class="line">    sort.sort()</span><br><span class="line">    sort.show()</span><br></pre></td></tr></table></figure><ul><li>简化版</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    length = len(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(length<span class="number">-1</span>-i):</span><br><span class="line">            <span class="keyword">if</span> nums[j] &gt; nums[j+<span class="number">1</span>]:</span><br><span class="line">                nums[j], nums[j+<span class="number">1</span>] = nums[j+<span class="number">1</span>], nums[j]</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>]</span><br><span class="line">    res = sort(nums)</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 上手指南之标准库</title>
      <link href="2019/11/11/python_adv_modular/adv_modular/"/>
      <url>2019/11/11/python_adv_modular/adv_modular/</url>
      
        <content type="html"><![CDATA[<h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h3><blockquote><p>标准库：一些常用的模块。</p></blockquote><a id="more"></a><h4 id="探索模块"><a href="#探索模块" class="headerlink" title="探索模块"></a>探索模块</h4><ul><li>使用 <code>dir</code></li></ul><p>要查明模块包含哪些东西，可以使用函数 <code>dir</code>，它列出对象的所有属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(copy)</span><br><span class="line">[<span class="string">'Error'</span>, <span class="string">'__all__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__cached__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'_copy_dispatch'</span>, <span class="string">'_copy_immutable'</span>, <span class="string">'_deepcopy_atomic'</span>, <span class="string">'_deepcopy_dict'</span>, <span class="string">'_deepcopy_dispatch'</span>, <span class="string">'_deepcopy_list'</span>, <span class="string">'_deepcopy_method'</span>, <span class="string">'_deepcopy_tuple'</span>, <span class="string">'_keep_alive'</span>, <span class="string">'_reconstruct'</span>, <span class="string">'copy'</span>, <span class="string">'deepcopy'</span>, <span class="string">'dispatch_table'</span>, <span class="string">'error'</span>]</span><br></pre></td></tr></table></figure><p>为方便阅读，可以去掉下划线打头的不提供外部使用的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[n <span class="keyword">for</span> n <span class="keyword">in</span> dir(copy) <span class="keyword">if</span> <span class="keyword">not</span> n.startswith(<span class="string">'_'</span>)]</span><br></pre></td></tr></table></figure><ul><li>变量 <code>__all__</code></li></ul><p>查看模块具体导入可用的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>copy.__all__</span><br><span class="line">[<span class="string">'Error'</span>, <span class="string">'copy'</span>, <span class="string">'deepcopy'</span>]</span><br></pre></td></tr></table></figure><p>这样就可以看到模块 <code>copy</code> 可以使用的公有接口</p><ul><li>使用 <code>help</code></li></ul><p>函数 <code>help</code> 提供一些你需要的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(sys)</span><br></pre></td></tr></table></figure><ul><li>查看文档</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sys.__doc__)</span><br></pre></td></tr></table></figure><h4 id="sys"><a href="#sys" class="headerlink" title="sys"></a><code>sys</code></h4><p>访问和 <code>Python</code> 解释其相关的变量和函数。</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>argv</code></td><td>获取命令行参数，返回值是List，第一个元素是程序本身路径</td></tr><tr><td><code>exit([arg])</code></td><td>退出当前程序，可以通过可选参数指定返回值或错误消息</td></tr><tr><td><code>modules</code></td><td>一个字典，将模块名映射到加载的函数</td></tr><tr><td><code>path</code></td><td>一个列表，返回模块的搜索路径</td></tr><tr><td><code>platform</code></td><td>返回操作系统的名称</td></tr><tr><td><code>stdin</code></td><td>标准输入流</td></tr><tr><td><code>stdout</code></td><td>标准输出流</td></tr><tr><td><code>stderr</code></td><td>标准错误流</td></tr><tr><td><code>version</code></td><td>解释器版本信息</td></tr></tbody></table><ol><li><code>argv</code></li></ol><p>命令行执行，实现从外部传入参数</p><p><code>python3 test.py arg1 arg2</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(sys.argv)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'test.py'</span>, <span class="string">'arg1'</span>, <span class="string">'arg2'</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li><code>exit([arg])</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(sys.exit(<span class="string">"运行结束."</span>))</span><br></pre></td></tr></table></figure><h4 id="os"><a href="#os" class="headerlink" title="os"></a><code>os</code></h4><p>访问和操作系统相关的变量和函数。</p><table><thead><tr><th>模块</th><th>描述</th></tr></thead><tbody><tr><td><code>getcwd</code></td><td>获取当前的工作目录</td></tr><tr><td><code>chdir</code></td><td>修改当前工作目录</td></tr><tr><td><code>listdir</code></td><td>获取指定文件夹中的所有文件和文件夹组成的列表</td></tr><tr><td><code>mkdir</code></td><td>创建一个目录/文件夹</td></tr><tr><td><code>makedirs</code></td><td>递归创建文件夹</td></tr><tr><td><code>rmdir</code></td><td>移除一个目录（必须是空目录）</td></tr><tr><td><code>removedirs</code></td><td>递归删除文件夹</td></tr><tr><td><code>rename</code></td><td>修改文件和文件夹的名称</td></tr><tr><td><code>stat</code></td><td>获取文件的相关信息</td></tr><tr><td><code>system</code></td><td>执行系统命令</td></tr><tr><td><code>getenv</code></td><td>获取系统环境变量</td></tr><tr><td><code>putenv</code></td><td>设置系统环境变量</td></tr><tr><td><code>exit</code></td><td>退出当前执行命令，直接关闭当前操作</td></tr><tr><td><code>unlink</code></td><td>删除文件</td></tr><tr><td><code>open</code></td><td>新建文件</td></tr></tbody></table><ul><li><code>path</code> 模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.__all__</span><br><span class="line">[<span class="string">'normcase'</span>, <span class="string">'isabs'</span>, <span class="string">'join'</span>, <span class="string">'splitdrive'</span>, <span class="string">'split'</span>, <span class="string">'splitext'</span>, <span class="string">'basename'</span>, <span class="string">'dirname'</span>, <span class="string">'commonprefix'</span>, <span class="string">'getsize'</span>, <span class="string">'getmtime'</span>, <span class="string">'getatime'</span>, <span class="string">'getctime'</span>, <span class="string">'islink'</span>, <span class="string">'exists'</span>, <span class="string">'lexists'</span>, <span class="string">'isdir'</span>, <span class="string">'isfile'</span>, <span class="string">'ismount'</span>, <span class="string">'expanduser'</span>, <span class="string">'expandvars'</span>, <span class="string">'normpath'</span>, <span class="string">'abspath'</span>, <span class="string">'samefile'</span>, <span class="string">'sameopenfile'</span>, <span class="string">'samestat'</span>, <span class="string">'curdir'</span>, <span class="string">'pardir'</span>, <span class="string">'sep'</span>, <span class="string">'pathsep'</span>, <span class="string">'defpath'</span>, <span class="string">'altsep'</span>, <span class="string">'extsep'</span>, <span class="string">'devnull'</span>, <span class="string">'realpath'</span>, <span class="string">'supports_unicode_filenames'</span>, <span class="string">'relpath'</span>, <span class="string">'commonpath'</span>]</span><br></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>abspath()</code></td><td>将一个相对路径转化为绝对路径</td></tr><tr><td><code>basename()</code></td><td>获取路径中的文件夹或者文件名称（只要路径的最后一部分）</td></tr><tr><td><code>dirname()</code></td><td>获取路径中的路径部分(除去最后一部分)</td></tr><tr><td><code>join()</code></td><td>将两个路径合并为一个路径</td></tr><tr><td><code>split()</code></td><td>将一个路径切割成文件夹和文件名部分</td></tr><tr><td><code>splitext()</code></td><td>将一个文件名切成名字和后缀两个部分</td></tr><tr><td><code>getsize()</code></td><td>获取一个文件的大小</td></tr><tr><td><code>isfile()</code></td><td>检测一个路径是否是一个文件</td></tr><tr><td><code>isdir()</code></td><td>检测一个路径是否是一个文件夹</td></tr><tr><td><code>getctime()</code></td><td>获取文件的创建时间</td></tr><tr><td><code>getmtime()</code></td><td>获取文件的修改时间</td></tr><tr><td><code>getatime()</code></td><td>获取文件的访问时间</td></tr><tr><td><code>exists()</code></td><td>检测指定的路径是否存在 </td></tr><tr><td><code>isabs()</code></td><td>检测一个路径是否是绝对路径</td></tr><tr><td><code>islink()</code></td><td>检测一个路径是否是链接</td></tr><tr><td><code>samefile()</code></td><td>检测两个路径是否指向同一个文件</td></tr></tbody></table><p>参考： <a href="https://blog.csdn.net/jamfiy/article/details/88175302" target="_blank" rel="noopener">os path</a></p><h4 id="fileinput"><a href="#fileinput" class="headerlink" title="fileinput"></a><code>fileinput</code></h4><p>迭代多个文件或流的内容行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fileinput.__all__</span><br><span class="line">[<span class="string">'input'</span>, <span class="string">'close'</span>, <span class="string">'nextfile'</span>, <span class="string">'filename'</span>, <span class="string">'lineno'</span>, <span class="string">'filelineno'</span>, <span class="string">'fileno'</span>, <span class="string">'isfirstline'</span>, <span class="string">'isstdin'</span>, <span class="string">'FileInput'</span>, <span class="string">'hook_compressed'</span>, <span class="string">'hook_encoded'</span>]</span><br></pre></td></tr></table></figure><h4 id="shutil"><a href="#shutil" class="headerlink" title="shutil"></a><code>shutil</code></h4><p>拷贝、移动文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> shutil</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>shutil.__all__</span><br><span class="line">[<span class="string">'copyfileobj'</span>, <span class="string">'copyfile'</span>, <span class="string">'copymode'</span>, <span class="string">'copystat'</span>, <span class="string">'copy'</span>, <span class="string">'copy2'</span>, <span class="string">'copytree'</span>, <span class="string">'move'</span>, <span class="string">'rmtree'</span>, <span class="string">'Error'</span>, <span class="string">'SpecialFileError'</span>, <span class="string">'ExecError'</span>, <span class="string">'make_archive'</span>, <span class="string">'get_archive_formats'</span>, <span class="string">'register_archive_format'</span>, <span class="string">'unregister_archive_format'</span>, <span class="string">'get_unpack_formats'</span>, <span class="string">'register_unpack_format'</span>, <span class="string">'unregister_unpack_format'</span>, <span class="string">'unpack_archive'</span>, <span class="string">'ignore_patterns'</span>, <span class="string">'chown'</span>, <span class="string">'which'</span>, <span class="string">'get_terminal_size'</span>, <span class="string">'SameFileError'</span>, <span class="string">'disk_usage'</span>]</span><br></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>copyfileobj(f1, f2)</code></td><td>将 <code>f1</code> 的数据覆盖 <code>copy</code> 给 <code>f2</code>，需打开文件</td></tr><tr><td><code>copyfile(f1, f2)</code></td><td>不用打开文件，直接用文件名进行覆盖 <code>copy</code></td></tr><tr><td><code>copymode(f1, f2)</code></td><td>拷贝权限，内容组，用户，均不变</td></tr><tr><td><code>copystat(f1, f2)</code></td><td>只拷贝了权限</td></tr><tr><td><code>copy(f1, f2)</code></td><td>拷贝文件和权限都进行 <code>copy</code></td></tr><tr><td><code>copy2(f1, f2)</code></td><td>拷贝了文件和状态信息</td></tr><tr><td><code>rmtree(dir)</code></td><td>可以递归删除目录下的目录及文件</td></tr><tr><td><code>move(dir, f)</code></td><td>递归移动一个文件</td></tr></tbody></table><p>参考： <a href="https://www.cnblogs.com/xiangsikai/p/7787101.html" target="_blank" rel="noopener">shutil</a></p><h4 id="time"><a href="#time" class="headerlink" title="time"></a><code>time</code></h4><p>获取时间、操作时间和日期以及设置它们格式。</p><p>时间的表示方式：</p><ol><li><p>时间戳 <code>timestamp</code> - 新纪元开始后的秒数(1970年1月1日00:00:00开始按秒计算的偏移量)</p></li><li><p>格式化的时间字符串</p></li><li><p>结构化时间元组 - <code>struct_time</code></p></li></ol><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>localtime([secs])</code></td><td>将秒数(时间戳)转换为表示当地时间的结构化时间元组</td></tr><tr><td><code>gmtime()</code></td><td>将时间戳转换为结构化时间</td></tr><tr><td><code>mktime(tuple)</code></td><td>将结构化时间转换为时间戳</td></tr><tr><td><code>sleep(ses)</code></td><td>休眠，什么都不做</td></tr><tr><td><code>asctime([tuple])</code></td><td>将结构化时间转换为字符串</td></tr><tr><td><code>strptime(string[, format])</code></td><td>将字符串转换为结构化时间</td></tr><tr><td><code>time()</code></td><td>当前时间戳(浮点类型)</td></tr><tr><td><code>ctime()</code></td><td>当前时间字符串</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"></span><br><span class="line">A[struct_time] --&gt;|strftime| B[Format string]</span><br><span class="line"></span><br><span class="line">B[Format string] --&gt;|strptime| A[struct_time]</span><br><span class="line"></span><br><span class="line">A[struct_time] --&gt;|mktime| C[Timestamp]</span><br><span class="line"></span><br><span class="line">C[Timestamp] --&gt;|localtime, gmtime| A[struct_time]</span><br></pre></td></tr></table></figure><ol><li>当前时间戳 - <code>time()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.time()</span><br><span class="line"><span class="number">1573438880.298209</span></span><br></pre></td></tr></table></figure><ol start="2"><li>当前时间字符串 - <code>ctime()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.ctime()</span><br><span class="line"><span class="string">'Mon Nov 11 10:21:08 2019'</span></span><br></pre></td></tr></table></figure><ol start="3"><li>当前结构化时间元组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.localtime()</span><br><span class="line">time.struct_time(tm_year=<span class="number">2019</span>, tm_mon=<span class="number">11</span>, tm_mday=<span class="number">11</span>, tm_hour=<span class="number">10</span>, tm_min=<span class="number">23</span>, tm_sec=<span class="number">28</span>, tm_wday=<span class="number">0</span>, tm_yday=<span class="number">315</span>, tm_isdst=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>休眠 </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a><code>datetime</code></h4><p><code>tiem</code> 模块的高级封装，接口更加直观。</p><p>首先查看模块下面的类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[n <span class="keyword">for</span> n <span class="keyword">in</span> dir(datetime) <span class="keyword">if</span> <span class="keyword">not</span> n.startswith(<span class="string">'_'</span>)]</span><br><span class="line">[<span class="string">'MAXYEAR'</span>, <span class="string">'MINYEAR'</span>, <span class="string">'date'</span>, <span class="string">'datetime'</span>, <span class="string">'datetime_CAPI'</span>, <span class="string">'sys'</span>, <span class="string">'time'</span>, <span class="string">'timedelta'</span>, <span class="string">'timezone'</span>, <span class="string">'tzinfo'</span>]</span><br></pre></td></tr></table></figure><p><code>datetime</code> 模块中包含的类：</p><table><thead><tr><th>类名</th><th>功能说明</th></tr></thead><tbody><tr><td><code>date</code></td><td>日期对象,常用的属性有 <code>year</code>, <code>month</code>, <code>day</code></td></tr><tr><td><code>time</code></td><td>时间对象</td></tr><tr><td><code>datetime</code></td><td>日期时间对象,常用的属性有 <code>hour</code>, <code>minute</code>, <code>second</code>, <code>microsecond</code></td></tr><tr><td><code>datetime_CAPI</code></td><td>日期时间对象C语言接口</td></tr><tr><td><code>timedelta</code></td><td>时间间隔，即两个时间点之间的长度</td></tr><tr><td><code>tzinfo</code></td><td>时区信息对象</td></tr></tbody></table><ul><li><code>datetime</code></li></ul><ol><li>获取当前结构化时间 - <code>today()</code>、<code>now()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.today()</span><br><span class="line">datetime.datetime(<span class="number">2019</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">38</span>, <span class="number">648690</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.now()</span><br><span class="line">datetime.datetime(<span class="number">2019</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">43</span>, <span class="number">735714</span>)</span><br></pre></td></tr></table></figure><p>可用函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[n <span class="keyword">for</span> n <span class="keyword">in</span> dir(datetime.datetime) <span class="keyword">if</span> <span class="keyword">not</span> n.startswith(<span class="string">'_'</span>)]</span><br><span class="line">[<span class="string">'astimezone'</span>, <span class="string">'combine'</span>, <span class="string">'ctime'</span>, <span class="string">'date'</span>, <span class="string">'day'</span>, <span class="string">'dst'</span>, <span class="string">'fold'</span>, <span class="string">'fromisoformat'</span>, <span class="string">'fromordinal'</span>, <span class="string">'fromtimestamp'</span>, <span class="string">'hour'</span>, <span class="string">'isocalendar'</span>, <span class="string">'isoformat'</span>, <span class="string">'isoweekday'</span>, <span class="string">'max'</span>, <span class="string">'microsecond'</span>, <span class="string">'min'</span>, <span class="string">'minute'</span>, <span class="string">'month'</span>, <span class="string">'now'</span>, <span class="string">'replace'</span>, <span class="string">'resolution'</span>, <span class="string">'second'</span>, <span class="string">'strftime'</span>, <span class="string">'strptime'</span>, <span class="string">'time'</span>, <span class="string">'timestamp'</span>, <span class="string">'timetuple'</span>, <span class="string">'timetz'</span>, <span class="string">'today'</span>, <span class="string">'toordinal'</span>, <span class="string">'tzinfo'</span>, <span class="string">'tzname'</span>, <span class="string">'utcfromtimestamp'</span>, <span class="string">'utcnow'</span>, <span class="string">'utcoffset'</span>, <span class="string">'utctimetuple'</span>, <span class="string">'weekday'</span>, <span class="string">'year'</span>]</span><br></pre></td></tr></table></figure><h4 id="random"><a href="#random" class="headerlink" title="random"></a><code>random</code></h4><p>生成随机数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.__all__</span><br><span class="line">[<span class="string">'Random'</span>, <span class="string">'seed'</span>, <span class="string">'random'</span>, <span class="string">'uniform'</span>, <span class="string">'randint'</span>, <span class="string">'choice'</span>, <span class="string">'sample'</span>, <span class="string">'randrange'</span>, <span class="string">'shuffle'</span>, <span class="string">'normalvariate'</span>, <span class="string">'lognormvariate'</span>, <span class="string">'expovariate'</span>, <span class="string">'vonmisesvariate'</span>, <span class="string">'gammavariate'</span>, <span class="string">'triangular'</span>, <span class="string">'gauss'</span>, <span class="string">'betavariate'</span>, <span class="string">'paretovariate'</span>, <span class="string">'weibullvariate'</span>, <span class="string">'getstate'</span>, <span class="string">'setstate'</span>, <span class="string">'getrandbits'</span>, <span class="string">'choices'</span>, <span class="string">'SystemRandom'</span>]</span><br></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>random()</code></td><td>返回一个 <code>[0, 1)</code> 的随机实数</td></tr><tr><td><code>uniform(a, b)</code></td><td>返回一个 <code>[a, b]</code> 的随机实数</td></tr><tr><td><code>randrange([start], stop, [step])</code></td><td>从 <code>range(start, stop, step)</code> 中随机选择一个数</td></tr><tr><td><code>choice(seq)</code></td><td>从序列中随机选择一个元素</td></tr><tr><td><code>shuffle(seq[, random])</code></td><td>就地打乱序列 <code>seq</code></td></tr><tr><td><code>sample(seq, n)</code></td><td>从序列 <code>seq</code> 中随机选择 <code>n</code> 个不同的元素值</td></tr></tbody></table><h4 id="json"><a href="#json" class="headerlink" title="json"></a><code>json</code></h4><p>序列化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.__all__</span><br><span class="line">[<span class="string">'dump'</span>, <span class="string">'dumps'</span>, <span class="string">'load'</span>, <span class="string">'loads'</span>, <span class="string">'JSONDecoder'</span>, <span class="string">'JSONDecodeError'</span>, <span class="string">'JSONEncoder'</span>]</span><br></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>dump(fileobj)</code></td><td>字典转成 <code>json</code> 字符串，用于文件</td></tr><tr><td><code>dumps(str)</code></td><td>字典转成 <code>json</code> 字符串</td></tr><tr><td><code>load(fileobj)</code></td><td><code>json</code> 字符串转成字典，用于文件</td></tr><tr><td><code>loads(str)</code></td><td><code>json</code> 字符串转成字典</td></tr></tbody></table><h4 id="re"><a href="#re" class="headerlink" title="re"></a><code>re</code></h4><p>正则表达式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.__all__</span><br><span class="line">[<span class="string">'match'</span>, <span class="string">'fullmatch'</span>, <span class="string">'search'</span>, <span class="string">'sub'</span>, <span class="string">'subn'</span>, <span class="string">'split'</span>, <span class="string">'findall'</span>, <span class="string">'finditer'</span>, <span class="string">'compile'</span>, <span class="string">'purge'</span>, <span class="string">'template'</span>, <span class="string">'escape'</span>, <span class="string">'error'</span>, <span class="string">'Pattern'</span>, <span class="string">'Match'</span>, <span class="string">'A'</span>, <span class="string">'I'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'S'</span>, <span class="string">'X'</span>, <span class="string">'U'</span>, <span class="string">'ASCII'</span>, <span class="string">'IGNORECASE'</span>, <span class="string">'LOCALE'</span>, <span class="string">'MULTILINE'</span>, <span class="string">'DOTALL'</span>, <span class="string">'VERBOSE'</span>, <span class="string">'UNICODE'</span>]</span><br></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>match(pattern, string[, flags])</code></td><td>在字符串开头匹配模式</td></tr><tr><td><code>search(pattern, string[, flags])</code></td><td>在字符串中查找模式</td></tr><tr><td><code>sub(pat, repl, string[, count=0])</code></td><td>将字符串中与模式 <code>pat</code> 匹配的子串都替换为 <code>repl</code></td></tr><tr><td><code>split(pattern, string[, maxsplit=0])</code></td><td>根据模式来分割子串</td></tr><tr><td><code>findall(pattren, string)</code></td><td>返回一个列表，其中包含字符串中所有与模式匹配的子串</td></tr><tr><td><code>compile(pattern[, flags])</code></td><td>根据包含正则表达式的字符串创建模式对象</td></tr></tbody></table><h4 id="logging"><a href="#logging" class="headerlink" title="logging"></a><code>logging</code></h4><p>日志。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> logging</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logging.__all__</span><br><span class="line">[<span class="string">'BASIC_FORMAT'</span>, <span class="string">'BufferingFormatter'</span>, <span class="string">'CRITICAL'</span>, <span class="string">'DEBUG'</span>, <span class="string">'ERROR'</span>, <span class="string">'FATAL'</span>, <span class="string">'FileHandler'</span>, <span class="string">'Filter'</span>, <span class="string">'Formatter'</span>, <span class="string">'Handler'</span>, <span class="string">'INFO'</span>, <span class="string">'LogRecord'</span>, <span class="string">'Logger'</span>, <span class="string">'LoggerAdapter'</span>, <span class="string">'NOTSET'</span>, <span class="string">'NullHandler'</span>, <span class="string">'StreamHandler'</span>, <span class="string">'WARN'</span>, <span class="string">'WARNING'</span>, <span class="string">'addLevelName'</span>, <span class="string">'basicConfig'</span>, <span class="string">'captureWarnings'</span>, <span class="string">'critical'</span>, <span class="string">'debug'</span>, <span class="string">'disable'</span>, <span class="string">'error'</span>, <span class="string">'exception'</span>, <span class="string">'fatal'</span>, <span class="string">'getLevelName'</span>, <span class="string">'getLogger'</span>, <span class="string">'getLoggerClass'</span>, <span class="string">'info'</span>, <span class="string">'log'</span>, <span class="string">'makeLogRecord'</span>, <span class="string">'setLoggerClass'</span>, <span class="string">'shutdown'</span>, <span class="string">'warn'</span>, <span class="string">'warning'</span>, <span class="string">'getLogRecordFactory'</span>, <span class="string">'setLogRecordFactory'</span>, <span class="string">'lastResort'</span>, <span class="string">'raiseExceptions'</span>]</span><br></pre></td></tr></table></figure><h4 id="collections"><a href="#collections" class="headerlink" title="collections"></a><code>collections</code></h4><p>内建集合模块，提供多个集合类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> collections</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>collections.__all__</span><br><span class="line">[<span class="string">'deque'</span>, <span class="string">'defaultdict'</span>, <span class="string">'namedtuple'</span>, <span class="string">'UserDict'</span>, <span class="string">'UserList'</span>, <span class="string">'UserString'</span>, <span class="string">'Counter'</span>, <span class="string">'OrderedDict'</span>, <span class="string">'ChainMap'</span>]</span><br></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>namedtuple()</code></td><td>创建一个自定义的 <code>tuple</code> 对象</td></tr><tr><td><code>deque()</code></td><td>高效实现插入和删除操作的双向列表，适合用于队列和栈</td></tr><tr><td><code>defaultdict()</code></td><td>字典，当 <code>key</code> 不存在时，返回一个默认值</td></tr><tr><td><code>OrderedDict()</code></td><td>有序字典</td></tr><tr><td><code>Counter()</code></td><td>计数器</td></tr></tbody></table><ol><li><code>namedtuple</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Point = namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.x</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.y</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>deque</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = deque([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.append(<span class="string">'x'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.appendleft(<span class="string">'y'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q</span><br><span class="line">deque([<span class="string">'y'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'x'</span>])</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.liaoxuefeng.com/wiki/897692888725344/973805065315456" target="_blank" rel="noopener">collections</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 上手指南之特性、迭代器和生成器</title>
      <link href="2019/11/10/python_adv_character/adv_character/"/>
      <url>2019/11/10/python_adv_character/adv_character/</url>
      
        <content type="html"><![CDATA[<h3 id="特性、迭代器和生成器"><a href="#特性、迭代器和生成器" class="headerlink" title="特性、迭代器和生成器"></a>特性、迭代器和生成器</h3><blockquote><p>Python 中的魔法(特殊)方法。</p></blockquote><a id="more"></a><p>首先，所有的类都将隐式的继承 <code>object</code> 类，如果没有指定超类，将直接继承它，否则将间接的继承它。</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><blockquote><p>介绍的第一个魔法方法是构造函数，其实就是初始化方法，命名为 <code>__init__</code>。</p></blockquote><p>构造函数将在对象创建后自动调用它们</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foobar</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.somevar = <span class="number">42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    f = Foobar()</span><br><span class="line">    print(f.somevar)</span><br></pre></td></tr></table></figure><p>或者，给构造函数添加参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foobar</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value=<span class="number">42</span>)</span>:</span></span><br><span class="line">        self.somevar = value</span><br></pre></td></tr></table></figure><p>参数是可选的，可以使用默认的参数值，也可以传入指定的参数值，对原有的值进行覆盖</p><h5 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h5><blockquote><p>每一个类都有一个或多个超类，并从它们那里继承行为。</p></blockquote><p>对于大多数的子类，重写构造函数时，必须调用超类的构造函数，否则可能无法正确的初始化对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.hungry = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.hungry:</span><br><span class="line">            print(<span class="string">'Aaaah...'</span>)</span><br><span class="line">            self.hungry = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'No, thanks!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SongBird</span><span class="params">(Bird)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sound = <span class="string">'Squawk!'</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.sound)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    s = SongBird()</span><br><span class="line">    s.eat()</span><br></pre></td></tr></table></figure><p>这时，执行程序，你会发现无法正确的初始化对象，提示对象没有 <code>hungry</code> 属性</p><p>这是因为子类重写了构造函数，但是并没有初始化父类的构造函数</p><h5 id="调用未关联的超类构造函数"><a href="#调用未关联的超类构造函数" class="headerlink" title="调用未关联的超类构造函数"></a>调用未关联的超类构造函数</h5><p>由于历史遗留问题，我们先介绍旧版 <code>Python</code> 的初始化方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SongBird</span><span class="params">(Bird)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        Bird.__init__(self)</span><br><span class="line">        self.sound = <span class="string">'Squawk!'</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.sound)</span><br></pre></td></tr></table></figure><p>修改之后再次执行，会发现已经可正确的初始化了</p><p>但是在新式类中，我们应该避免这种初始化方式，而使用 <code>super</code></p><h5 id="使用函数-super"><a href="#使用函数-super" class="headerlink" title="使用函数 super"></a>使用函数 <code>super</code></h5><p>使用 <code>super</code> 时通常不用提供任何参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SongBird</span><span class="params">(Bird)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.sound = <span class="string">'Squawk!'</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.sound)</span><br></pre></td></tr></table></figure><p>当然，如果子类没有重写构造函数，那么默认继承了父类的构造函数，可以直接使用</p><h4 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h4><h5 id="基本的序列和映射协议"><a href="#基本的序列和映射协议" class="headerlink" title="基本的序列和映射协议"></a>基本的序列和映射协议</h5><p>序列和映射基本上是元素的集合，要实现它们的基本行为，不可变对象需要实现2个方法，可变对象需要实现4个</p><ul><li><code>__len__(self)</code></li></ul><p>返回集合包含的项数</p><ul><li><code>__getitem__(self, key)</code></li></ul><p>返回与指定键相关联的值</p><ul><li><code>__setitem__(self, key, value)</code></li></ul><p>以键相关联的方式存储值</p><ul><li><code>__delitem__(self, key)</code></li></ul><p>当对象可变(且允许被删除时)，才需要实现</p><p>下面创建一个无穷序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_index</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="comment"># 判断</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(key, int):</span><br><span class="line">        <span class="keyword">raise</span> TypeError</span><br><span class="line">    <span class="keyword">if</span> key &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> IndexError</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArithmeticSequence</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start=<span class="number">0</span>, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.step = step</span><br><span class="line">        self.changed = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="comment"># 获取</span></span><br><span class="line">        check_index(key)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 如果元素已被修改，存储元素的值</span></span><br><span class="line">            <span class="keyword">return</span> self.changed[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="comment"># 如果元素未被修改，计算出元素的值</span></span><br><span class="line">            <span class="keyword">return</span> self.start + key * self.step</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="comment"># 修改</span></span><br><span class="line">        check_index(key)</span><br><span class="line">        self.changed[key] = value</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 创建一个从1开始，步长为2的无穷序列</span></span><br><span class="line">    s = ArithmeticSequence(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    print(s[<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>这里我们没有实现 <code>__del__</code>，意味着不允许删除元素</p><h5 id="从-list、dict、str派生"><a href="#从-list、dict、str派生" class="headerlink" title="从 list、dict、str派生"></a>从 <code>list</code>、<code>dict</code>、<code>str</code>派生</h5><p>快速实现一个序列和映射，可以从已有的基本序列和映射继承，通过重写魔法方法，实现一个新的序列或映射，例如：</p><p>实现一个计算器列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterList</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        super.__init__(*args)</span><br><span class="line">        self.counter = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        self.counter += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> super(CounterList, self).__getitem__(index)</span><br></pre></td></tr></table></figure><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>之前有介绍 <code>set</code> 和 <code>get</code> 的存取方法，是一种很重要的封装状态变量(属性)的方法。但我们没有办法将所有属性都提供存取方法，这是不现实的，所以我们采用另外一种方法 —— <code>property</code>。它可以隐藏存取方法，让所有属性看起来都一样。</p><blockquote><p>通过存取方法定义的属性通常称为特性。</p></blockquote><h5 id="函数-property"><a href="#函数-property" class="headerlink" title="函数 property"></a>函数 <code>property</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.width = <span class="number">0</span></span><br><span class="line">        self.height = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.width, self.height</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_size</span><span class="params">(self, size)</span>:</span></span><br><span class="line">        self.width, self.height = size</span><br><span class="line"></span><br><span class="line">    size = property(get_size, set_size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    r = Rectangle()</span><br><span class="line">    r.width = <span class="number">5</span></span><br><span class="line">    r.height = <span class="number">10</span></span><br><span class="line">    print(r.size)</span><br></pre></td></tr></table></figure><p>这样，<code>size</code> 属性依然受制于 <code>set</code> 和 <code>get</code> 执行计算，但是看起来就像普通属性一样</p><p>或者使用装饰器实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.width = <span class="number">0</span></span><br><span class="line">        self.height = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.width, self.height</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @size.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self, size)</span>:</span></span><br><span class="line">        self.width, self.height = size</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    r = Rectangle()</span><br><span class="line">    r.width = <span class="number">5</span></span><br><span class="line">    r.height = <span class="number">10</span></span><br><span class="line">    print(r.size)</span><br></pre></td></tr></table></figure><h5 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h5><p>静态方法和类方法在创建的过程中是分别包装在 <code>staticmethod</code> 和 <code>classmethod</code> 类的对象中的</p><p>静态方法的定义中，没有参数 <code>self</code>，可以直接通过类来调用</p><p>类方法的定义中包含类似于 <code>self</code> 的参数，通常被命名为 <code>cls</code>，对与类方法，也可以通过对象直接调用，但参数 <code>cls</code> 将自动关联到类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">smeth</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'This is a static method'</span>)</span><br><span class="line">    smeth = staticmethod(smeth)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmeth</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">'Tish is a class method of'</span>, cls)</span><br><span class="line">    cmeth = classmethod(cmeth)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    m = MyClass()</span><br><span class="line">    m.smeth()</span><br><span class="line">    m.cmeth()</span><br></pre></td></tr></table></figure><p>在引入装饰器(装饰器可以用于包装任何可调用的对象，并且可用于方法和函数)以后，还可以用于这样包装方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">smeth</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'This is a static method'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmeth</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">'Tish is a class method of'</span>, cls)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    MyClass.smeth()</span><br><span class="line">    MyClass.cmeth()</span><br></pre></td></tr></table></figure><p>定义方法后，无需实例化，可以直接使用它们</p><p>更多装饰器实现，参考 <a href="https://www.liaoxuefeng.com/wiki/897692888725344/923030547069856" target="_blank" rel="noopener">@property</a>、<a href="https://www.liaoxuefeng.com/wiki/897692888725344/923030163290656" target="_blank" rel="noopener">装饰器</a></p><h5 id="getattr-、-setattr"><a href="#getattr-、-setattr" class="headerlink" title="__getattr__、__setattr__"></a><code>__getattr__</code>、<code>__setattr__</code></h5><ul><li><code>__getattr__(self, name)</code></li></ul><p>在属性被访问而对象没有这样的属性时自动调用</p><ul><li><code>__setattr__(self, name, value)</code></li></ul><p>试图给属性赋值时自动调用</p><p>使用上面的方法可以编写处理多个特性的代码，但是，在可能的情况下，还是使用函数 <code>property</code> 代替比较好(出于使用方式和效率的考虑)</p><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><blockquote><p>迭代，意味着重复多次，就像循环那样，实现了 <code>__iter__</code> 的对象是可迭代的。</p></blockquote><p>方法 <code>__iter__</code> 返回一个迭代器，它是包含方法 <code>__next__</code> 的对象，而调用方法时可以不提供任何参数。</p><p>在某些情况下，你可能只想逐个地获取值，而不是使用列表一次性获取，因为如果值很多，列表可能占用太多的内存，然而使用迭代器更通用、更简单、更优雅</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibs</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    fibs = Fibs()</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> fibs:</span><br><span class="line">        print(f)</span><br><span class="line">        <span class="keyword">if</span> f &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>实现了方法 <code>__iter__</code> 的对象是可迭代的，而实现方法 <code>__next__</code> 的对象是迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestIterator</span>:</span></span><br><span class="line">    value = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.value += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.value &gt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    t = TestIterator()</span><br><span class="line">    print(list(t))</span><br></pre></td></tr></table></figure><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><blockquote><p>生成器是一中使用普通函数语法定义的迭代器。</p></blockquote><p>生成器使用 <code>yied</code> 语句进行创建，之前有简单介绍，也可以说包含 <code>yield</code> 语句的函数称作生成器</p><p>现在我们使用一个生成器展开一个嵌套列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(nested)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> sublist <span class="keyword">in</span> nested:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> sublist:</span><br><span class="line">            <span class="keyword">yield</span> element</span><br><span class="line"></span><br><span class="line">nested = [[<span class="number">1</span>, <span class="number">2</span>,], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>]]</span><br><span class="line">print(list(flatten(nested)))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 上手指南之再谈抽象</title>
      <link href="2019/11/09/python_adv_abstract_more/adv_abs_more/"/>
      <url>2019/11/09/python_adv_abstract_more/adv_abs_more/</url>
      
        <content type="html"><![CDATA[<h3 id="再谈抽象"><a href="#再谈抽象" class="headerlink" title="再谈抽象"></a>再谈抽象</h3><blockquote><p>封装、继承和多态。</p></blockquote><a id="more"></a><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><blockquote><p>对外部隐藏有关对象工作原理的细节。</p></blockquote><p>封装指的是向外隐藏不必要的细节，让你无需知道对象内部的细节就可以使用它。</p><p>假设我们有一个名为 <code>OpenObject</code> 的类，存在 <code>set_name()</code> 和 <code>get_name()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>o = OpenObject()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o.set_name(<span class="string">'akashi'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o.get_name()</span><br><span class="line"><span class="string">'akashi'</span></span><br></pre></td></tr></table></figure><p>具体实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><p>这是属于方法上的封装，还可以在属性上进行封装，让外部不能访问</p><h4 id="再谈隐藏"><a href="#再谈隐藏" class="headerlink" title="再谈隐藏"></a>再谈隐藏</h4><p>将属性定义为私有，私有属性不能从对象外部进行访问，而只能通过存取器方法(<code>get_name</code> 和 <code>set_name</code>)访问</p><p>通常在 <code>python</code> 中，更常见的做法是使用特性(<code>property</code>)来替代存取器</p><p>让方法和属性设置为私有的，可以在名称前以两个下划线打头，例如：<code>self.__name = name</code></p><p>然而在 <code>python</code> 中并没有真正支持私有化，使用 <code>_类名__方法名</code> 这种方式依然可以在外部访问，但是隐藏就是我们对外部发出的信号，让外部不要访问，所有开发中我们不应这样做</p><p>在 <code>python</code> 中，单下划线开始的成员变量叫保护变量，只有类对象（即类实例）和子类对象自己能访问到这些变量，需通过类提供的接口进行访问</p><p>双下划线开始的成员变量叫私有变量，只有类对象自己可以访问，连子类对象也不可以访问</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><blockquote><p>基于通用类创建出专用类，子类是对父类的扩充。</p></blockquote><p>继承可以达到代码和功能复用的目的，并且子类可以对父类进行功能上的扩充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>要确定一个类是否是另一个类的子类，可以使用内置方法 <code>issubclass</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(Children, Person)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>如果你有一个类，想知道他的基类，可以访问其特殊属性 <code>__bases__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Children.__bases__</span><br></pre></td></tr></table></figure><p>同样，确定对象是否是特定类的实例，可以使用 <code>isinstance</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Children()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(s, Children)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h5 id="多个超类"><a href="#多个超类" class="headerlink" title="多个超类"></a>多个超类</h5><p><code>Python</code> 是支持多继承的，然而，除非万不得已，否则应该避免使用多重继承，因为在有些情况下，它可能带来意外的 “并发症”</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><blockquote><p>可对不同类型的对象执行相同的操作，表现在方法的重载和覆写、对象的向上转型。</p></blockquote><p>多态意味着 <code>多种形态</code>，我认为是最重要的原则，这意味着你不知道变量指向的是那种对象，也可以对其执行操作，且操作的行为会随对象的类型而表现出不同</p><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abc'</span>.count(<span class="string">'a'</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>].count(<span class="string">'a'</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>像这样，方法 <code>count</code> 对于字符串和列表都可以使用，根据对象的不同做出不同的表现，这就是多态</p><p>相反，在使用时，我们只需要知道对象有 <code>count</code> 这个方法就可以了，它会根据不同的对象有不同的表现方式</p><p>另一个例子就是内置的运算符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> + <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'akashi'</span> + <span class="string">'sai'</span></span><br><span class="line">akashisai</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>] + [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>在实现时，是依赖于对象的向上转型，使多态发生作用，这一点在静态类型语言中表现更为明显，以 <code>Java</code> 为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Shape rect = <span class="keyword">new</span> Rectangle()</span><br><span class="line">Shape cir = <span class="keyword">new</span> Circle()</span><br><span class="line">rect.draw()</span><br><span class="line">cir.draw()</span><br></pre></td></tr></table></figure><h4 id="接口和内省"><a href="#接口和内省" class="headerlink" title="接口和内省"></a>接口和内省</h4><blockquote><p>(<code>Java</code> 单继承的局限、与多态相关)</p></blockquote><p>接口这一概念与多态相关，处理多态对象时，我们只关心其接口(协议对外暴露的方法和属性。在 <code>Python</code> 中，不显示地指定对象必须包含哪些方法才能用作参数。不会像 <code>Java</code> 和 <code>Go</code> 那样显示编写接口，而是假定对象能够完成你要求它完成的任务，如果不能完成，程序将失败。</p><h4 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h4><blockquote><p>利用抽象基类可以实现对子类覆写方法的控制。</p></blockquote><p><code>Python</code> 在多态上几乎都只依赖于鸭子类型(如果走起来像鸭子，叫起来像鸭子，那么它就是鸭子)，然而官方也通过引入模块 <code>abc</code> 提供了抽象基类的支持，抽象基类是不能实例化的类，子类需要实现抽象基类的所有抽象方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Talker</span><span class="params">(ABC)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Herring</span><span class="params">(Talker)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Blub."</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 上手指南之抽象</title>
      <link href="2019/11/07/python_adv_abstract/adv_abs/"/>
      <url>2019/11/07/python_adv_abstract/adv_abs/</url>
      
        <content type="html"><![CDATA[<h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><blockquote><p>抽象可以节省人力，更重要的是，抽象是程序能够被人理解的关键所在。</p></blockquote><a id="more"></a><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>现在，如果我们需要计算一个裴波那契序列，我们编写如下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fibs = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    fibs.append(fibs[<span class="number">-2</span>] + fibs[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">print(fibs)</span><br></pre></td></tr></table></figure><p>这样，我们得到了一个数列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>]</span><br></pre></td></tr></table></figure><p>现在需求变了，我们需要用户可以指定序列的长度，再次编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fibs = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">num = int(input(<span class="string">'How many Fibonacci numbers do you want?\n'</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num - <span class="number">2</span>):</span><br><span class="line">    fibs.append(fibs[<span class="number">-2</span>] + fibs[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">print(fibs)</span><br></pre></td></tr></table></figure><p>现在，已经像是一个可用的程序的样子了，但是我们需要写出的代码是可以复用的，我们便会想到把它封装在一个自定义的函数里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibs</span><span class="params">(num)</span>:</span></span><br><span class="line">    result = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num<span class="number">-2</span>):</span><br><span class="line">        result.append(result[<span class="number">-2</span>] + result[<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    res = fibs(<span class="number">10</span>)</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure><p>这样，以后只需要直接调用函数 <code>fibs()</code> 就可以轻松获得序列了。</p><p>这是一个函数定义的过程，也是问题抽象的过程。</p><h4 id="参数魔法"><a href="#参数魔法" class="headerlink" title="参数魔法"></a>参数魔法</h4><h5 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h5><p>函数参数传入的位置是有区别的，如下面的实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(greeting, name)</span>:</span></span><br><span class="line">    print(<span class="string">'&#123;&#125;, &#123;&#125;!'</span>.format(greeting, name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    hello(<span class="string">'Hello'</span>, <span class="string">'akashi'</span>)</span><br></pre></td></tr></table></figure><p>输出： <code>Hello, akashi!</code></p><p>如果我们传入参数的位置发生了变化，结果也会发生变化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello(<span class="string">'akashi'</span>, <span class="string">'Hello'</span>)</span><br></pre></td></tr></table></figure><p>输出：<code>akashi, Hello!</code></p><p>程序并不能按照我们的意图执行，它不知道参数的正确位置，需要我们传入时就规定好位置</p><h5 id="关键字参数和默认值"><a href="#关键字参数和默认值" class="headerlink" title="关键字参数和默认值"></a>关键字参数和默认值</h5><p>想要程序知道参数的正确位置，可以使用关键字参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello(name=<span class="string">'akashi'</span>, greeting=<span class="string">'Hello'</span>)</span><br></pre></td></tr></table></figure><p>这样，指明了关键字，就可以不按位置传递参数</p><p>如果直接在定义函数中规定默认参数的值，调用时可以不用传递，但传入即会覆盖默认的参数</p><h5 id="收集参数"><a href="#收集参数" class="headerlink" title="收集参数"></a>收集参数</h5><ul><li>通过 <code>*</code> 可以传入一个元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_params</span><span class="params">(*params)</span>:</span></span><br><span class="line">    print(params)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print_params(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>输出：<code>(1 2 3)</code></p><p>当收集的元组参数在中间位置时，需要指定后续参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_the_middle</span><span class="params">(x, *y, z)</span>:</span></span><br><span class="line">    print(x, y, z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    in_the_middle(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, z=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>输出： <code>1 (2, 3, 4) 5</code></p><ul><li>通过 <code>**</code> 可以传入一个字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_params</span><span class="params">(**params)</span>:</span></span><br><span class="line">    print(params)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print_params(x=<span class="number">1</span>, y=<span class="number">2</span>, z=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="分配参数"><a href="#分配参数" class="headerlink" title="分配参数"></a>分配参数</h5><p>相反，也可以用于分配参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(x+y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">     params_1 = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    params_2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    add(*params_1)</span><br><span class="line">    add(*params_2)</span><br></pre></td></tr></table></figure><p>字典同理</p><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>递归，简单来说就是一个函数自己调用自己。递归函数一般包含两个条件：<code>基线条件</code>和<code>递归条件</code></p><p>基线条件：针对最小问题的解，满足条件时，函数直接返回一个值</p><p>递归条件：包含一个或多个调用，这些调用旨在解决问题的一部分</p><p>下面来看几个例子：</p><h5 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h5><blockquote><p>计算 <code>n</code> 的阶乘，公式为 <code>1x2x...x(n-1)xn</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    result = n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">        result *= i</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>基线条件：<code>1</code> 的阶乘为 <code>1</code><br>递归条件：对于一个大于 <code>1</code> 的数字 <code>n</code>，其阶乘为 <code>(n-1)*n</code></p><p>那么，满足这两个条件，可以实现为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h5 id="幂"><a href="#幂" class="headerlink" title="幂"></a>幂</h5><blockquote><p>计算 <code>x</code> 的 <code>n</code> 次幂，<code>x*x*x...</code>(<code>n</code>次)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n)</span>:</span></span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        result *= x</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>基线条件：任何数字 <code>x</code>，它的 <code>0</code> 次幂为 <code>1</code><br>递归条件：当 <code>n&gt;0</code> 时，<code>x</code> 的 <code>n</code> 次幂为 <code>x</code> 乘以 <code>x</code> 的 <code>n-1</code> 次幂，即 <code>power(x, n-1)*x</code></p><p>那么，满足这两个条件，可以实现为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x * power(x, n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h5 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h5><p>定义两个指针用来确定搜索范围(<code>lower</code>, <code>upper</code>)，不断折中缩小范围，如果两指针(上限和下限)相同，则指向的位置就是数字所在的位置，将数字返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(sequence, number, lower=<span class="number">0</span>, upper=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> upper <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        upper = len(sequence) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> lower == upper:</span><br><span class="line">        <span class="keyword">return</span> upper</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        middle = (lower + upper) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> number &gt; sequence[middle]:</span><br><span class="line">            <span class="keyword">return</span> search(sequence, number, middle+<span class="number">1</span>, upper)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> search(sequence, number, lower, middle)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">   seq = [<span class="number">34</span>, <span class="number">67</span>, <span class="number">8</span>, <span class="number">123</span>, <span class="number">4</span>, <span class="number">100</span>, <span class="number">95</span>]</span><br><span class="line">   seq.sort()</span><br><span class="line">   print(seq)</span><br><span class="line">   res = search(seq, <span class="number">34</span>)</span><br><span class="line">   print(res)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">4</span>, <span class="number">8</span>, <span class="number">34</span>, <span class="number">67</span>, <span class="number">95</span>, <span class="number">100</span>, <span class="number">123</span>]</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 上手指南之条件、循环</title>
      <link href="2019/11/06/python_adv_if_for/adv_if_for/"/>
      <url>2019/11/06/python_adv_if_for/adv_if_for/</url>
      
        <content type="html"><![CDATA[<h3 id="条件、循环及其他语句"><a href="#条件、循环及其他语句" class="headerlink" title="条件、循环及其他语句"></a>条件、循环及其他语句</h3><blockquote><p>需要了解的列表推导式、字典推导式、<code>lambda</code> 匿名函数和关键字 <code>yield</code>。</p></blockquote><a id="more"></a><h4 id="print-和-import"><a href="#print-和-import" class="headerlink" title="print 和 import"></a><code>print</code> 和 <code>import</code></h4><ul><li>打印多个参数</li></ul><p>使用逗号分隔可以打印多个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'age: '</span>, <span class="number">22</span>)</span><br><span class="line">age:  <span class="number">22</span></span><br></pre></td></tr></table></figure><p>(类似于 <code>Java</code> 中的字符串连接符 <code>+</code>)</p><ul><li>导入时重名</li></ul><p>一般导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> somemodule</span><br><span class="line"><span class="keyword">from</span> somemodule <span class="keyword">import</span> somefunction, antherfunction</span><br><span class="line"><span class="keyword">from</span> somemodule <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>当模块方法重名时，需要导入时指定别名，使用 <code>as</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> foobar</span><br><span class="line">res = foobar.sqrt(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt <span class="keyword">as</span> foobar</span><br><span class="line">res = foobar(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="赋值魔法"><a href="#赋值魔法" class="headerlink" title="赋值魔法"></a>赋值魔法</h4><ul><li>序列解包(可迭代对象解包)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y, z = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x, y, z)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>values = <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>values</span><br><span class="line">(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>利用这个特性，我们还可以实现快速的元素值交换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x, y = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">print(x, y)</span><br><span class="line"></span><br><span class="line">x, y = y, x</span><br><span class="line">print(x, y)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="if"><a href="#if" class="headerlink" title="if"></a><code>if</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> something:</span><br><span class="line">    do something</span><br><span class="line"><span class="keyword">elif</span> antherthing:</span><br><span class="line">    do something</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    do something</span><br></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a><code>while</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition:</span><br><span class="line">    do something</span><br></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a><code>for</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> some <span class="keyword">in</span> somethings:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="迭代字典"><a href="#迭代字典" class="headerlink" title="迭代字典"></a>迭代字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> item:</span><br><span class="line">    print(key, item[key])</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key value <span class="keyword">in</span> item.items():</span><br><span class="line">    print(key, value)</span><br></pre></td></tr></table></figure><h4 id="迭代工具"><a href="#迭代工具" class="headerlink" title="迭代工具"></a>迭代工具</h4><ul><li>索引获取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="string">'akashi'</span>, <span class="string">'asuka'</span>, <span class="string">'gakki'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(name)):</span><br><span class="line">    print(name[i])</span><br></pre></td></tr></table></figure><ul><li>并行迭代</li></ul><p><code>zip</code> 将两个序列“缝合”，返回一个适合迭代的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="string">'akashi'</span>, <span class="string">'asuka'</span>, <span class="string">'gakki'</span>]</span><br><span class="line">age = [<span class="number">22</span>, <span class="number">21</span>, <span class="number">30</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, age <span class="keyword">in</span> zip(name, age):</span><br><span class="line">    print(name, <span class="string">':'</span>, age)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">akashi : <span class="number">22</span></span><br><span class="line">asuka : <span class="number">21</span></span><br><span class="line">gakki : <span class="number">30</span></span><br></pre></td></tr></table></figure><ul><li>迭代同时获取索引和元素</li></ul><p>函数 <code>enumerate</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="string">'akashi'</span>, <span class="string">'asuka'</span>, <span class="string">'gakki'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(name):</span><br><span class="line">    print(index, value)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> akashi</span><br><span class="line"><span class="number">1</span> asuka</span><br><span class="line"><span class="number">2</span> gakki</span><br></pre></td></tr></table></figure><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><p>快速生成列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><p>快速生成字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="string">'akashi'</span>, <span class="string">'asuka'</span>, <span class="string">'gakki'</span>]</span><br><span class="line">age = [<span class="number">22</span>, <span class="number">21</span>, <span class="number">30</span>]</span><br><span class="line"></span><br><span class="line">res = &#123;name: age <span class="keyword">for</span> name, age <span class="keyword">in</span> zip(name, age)&#125;</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'akashi'</span>: <span class="number">22</span>, <span class="string">'asuka'</span>: <span class="number">21</span>, <span class="string">'gakki'</span>: <span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">res = &#123;k:str(v) <span class="keyword">for</span> k, v <span class="keyword">in</span> enumerate(seq) <span class="keyword">if</span> v % <span class="number">2</span> == <span class="number">0</span>&#125;</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>: <span class="string">'2'</span>, <span class="number">3</span>: <span class="string">'4'</span>, <span class="number">5</span>: <span class="string">'6'</span>, <span class="number">7</span>: <span class="string">'8'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名函数-lambda"><a href="#匿名函数-lambda" class="headerlink" title="匿名函数 lambda"></a>匿名函数 <code>lambda</code></h4><p>定义一个只使用一次的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line">res = func(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出： <code>5</code></p><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a><code>yield</code></h4><p>可以将函数执行的中间结果返回但不结束程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> func(<span class="number">4</span>):</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map()"></a><code>map()</code></h4><p>遍历序列，对序列中的每一个元素进行操作，创建一个新的序列，结果返回新序列的对象，需传入一个函数操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">seq1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">seq2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">res = list(map(func, seq1, seq2))</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">res = list(map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, seq))</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a><code>filter()</code></h4><p>对序列中的元素进行筛选，返回符合条件的序列的对象，也需要传入函数操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">res = list(filter(<span class="keyword">lambda</span> x: x&gt;<span class="number">1</span>, seq))</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a><code>reduce()</code></h4><p>累计函数，在 <code>python2</code> 中是内置函数，<code>python3</code> 中需要从 <code>functools</code> 模块中导入</p><p>返回一个操作最终的值，需要传入一个操作的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">res = reduce(<span class="keyword">lambda</span> x, y: x + y, seq)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出： <code>6</code></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 上手指南之字典</title>
      <link href="2019/11/05/python_adv_dict/adv_dict/"/>
      <url>2019/11/05/python_adv_dict/adv_dict/</url>
      
        <content type="html"><![CDATA[<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><blockquote><p>通过名称来访问其各个值的数据结构 <code>-</code> <code>映射</code>。字典是 <code>Python</code> 中唯一的内置映射类型。</p></blockquote><a id="more"></a><h4 id="dict"><a href="#dict" class="headerlink" title="dict"></a><code>dict</code></h4><p>使用 <code>dict</code> 从其他映射或键值对序列创建字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = [(<span class="string">'name'</span>, <span class="string">'akashi'</span>), (<span class="string">'age'</span>, <span class="number">22</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(items)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'akashi'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'name'</span>]</span><br><span class="line"><span class="string">'akashi'</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(name=<span class="string">'akashi'</span>, age=<span class="number">22</span>)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'akashi'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="基本的字典操作"><a href="#基本的字典操作" class="headerlink" title="基本的字典操作"></a>基本的字典操作</h4><table><thead><tr><th>使用</th><th>描述</th></tr></thead><tbody><tr><td><code>len(item)</code></td><td>返回字典 <code>item</code> 包含的项数</td></tr><tr><td><code>item[key]</code></td><td>返回与键 <code>key</code> 相关联的值</td></tr><tr><td><code>item[key] = vlue</code></td><td>将值 <code>vule</code> 关联到 <code>key</code></td></tr><tr><td><code>del item[key]</code></td><td>删除键为 <code>key</code> 的项</td></tr><tr><td><code>key in item</code></td><td>检查字典 <code>item</code> 是否包含键为 <code>key</code> 的项</td></tr></tbody></table><h4 id="字典方法"><a href="#字典方法" class="headerlink" title="字典方法"></a>字典方法</h4><table><thead><tr><th>方法</th><th>使用</th><th>描述</th></tr></thead><tbody><tr><td><code>clear</code></td><td><code>adict.clear()</code></td><td>删除所有的字典项</td></tr><tr><td><code>copy</code></td><td><code>adict.copy()</code></td><td>浅复制</td></tr><tr><td><code>keys</code></td><td><code>adict.keys()</code></td><td>获取字典的键</td></tr><tr><td><code>values</code></td><td><code>adict.values()</code></td><td>获取字典的值</td></tr><tr><td><code>items</code></td><td><code>adict.items()</code></td><td>获取字典的键值对</td></tr><tr><td><code>get</code></td><td><code>adict.get(k)</code></td><td>返回 <code>k</code> 对应的值，如果没有，返回 <code>None</code></td></tr><tr><td><code>get</code></td><td><code>adict.get(k, alt)</code></td><td>返回 <code>k</code> 对应的值，如果没有，返回 <code>alt</code></td></tr><tr><td><code>pop</code></td><td><code>adict.pop(key)</code></td><td>弹出指定的键向关联的值，并从字典中删除</td></tr><tr><td><code>popitem</code></td><td><code>adict.popitem()</code></td><td>随机弹出一个字典项，并从字典中删除</td></tr><tr><td><code>setdefault</code></td><td><code>adict.setdefault(key, value)</code></td><td>获取与指定键相关联的值，如果不存在，在字典中添加指定的键值对</td></tr><tr><td><code>update</code></td><td><code>adict.update(otherdict)</code></td><td>使用一个字典项更新另一个字典</td></tr></tbody></table><ol><li><code>clear()</code></li></ol><p>删除所有的字典项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">item = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(item)</span><br><span class="line">item.clear()</span><br><span class="line">print(item)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'akashi'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>copy()</code></li></ol><p>浅复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">'list'</span>: [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">copy_item = item.copy()</span><br><span class="line">item[<span class="string">'addr'</span>] = <span class="string">'local'</span></span><br><span class="line">copy_item[<span class="string">'name'</span>] = <span class="string">'asuka'</span></span><br><span class="line">copy_item[<span class="string">'list'</span>].append(<span class="number">3</span>)</span><br><span class="line">print(item)</span><br><span class="line">print(copy_item)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'akashi'</span>, <span class="string">'age'</span>: <span class="number">22</span>, <span class="string">'list'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'addr'</span>: <span class="string">'local'</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'asuka'</span>, <span class="string">'age'</span>: <span class="number">22</span>, <span class="string">'list'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br></pre></td></tr></table></figure><p>当替换副本中的值时，原件不受影响，而如果修改副本中的值(就地修改而不是替换)，原件也会发生变化</p><p>深复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line">item = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">'list'</span>: [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">copy_item = deepcopy(item)</span><br><span class="line">item[<span class="string">'addr'</span>] = <span class="string">'local'</span></span><br><span class="line">copy_item[<span class="string">'name'</span>] = <span class="string">'asuka'</span></span><br><span class="line">copy_item[<span class="string">'list'</span>].append(<span class="number">3</span>)</span><br><span class="line">print(item)</span><br><span class="line">print(copy_item)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'akashi'</span>, <span class="string">'age'</span>: <span class="number">22</span>, <span class="string">'list'</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">'addr'</span>: <span class="string">'local'</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'asuka'</span>, <span class="string">'age'</span>: <span class="number">22</span>, <span class="string">'list'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>keys()</code></li></ol><p>获取字典中的键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">&#125;</span><br><span class="line">print(item.keys())</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict_keys([<span class="string">'name'</span>, <span class="string">'age'</span>])</span><br></pre></td></tr></table></figure><ol start="4"><li><code>values()</code></li></ol><p>获取字典中的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">&#125;</span><br><span class="line">print(item.values())</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict_values([<span class="string">'akashi'</span>, <span class="number">22</span>])</span><br></pre></td></tr></table></figure><ol start="5"><li><code>items()</code></li></ol><p>获取字典中的键值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">&#125;</span><br><span class="line">print(item.items())</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict_items([(<span class="string">'name'</span>, <span class="string">'akashi'</span>), (<span class="string">'age'</span>, <span class="number">22</span>)])</span><br></pre></td></tr></table></figure><ol start="6"><li><code>get()</code></li></ol><p>获取字典中的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">item = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(item.get(<span class="string">'name'</span>))</span><br></pre></td></tr></table></figure><p>输出： <code>akashi</code></p><p>当指定的键不存在时，会输出 <code>None</code></p><p>不存在时，指定默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">item = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(item.get(<span class="string">'nickname'</span>, <span class="string">'asuka'</span>))</span><br></pre></td></tr></table></figure><p>输出： <code>asuka</code></p><ol start="7"><li><code>pop()</code></li></ol><p>从字典中弹出一个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">item = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(item.pop(<span class="string">'name'</span>))</span><br><span class="line">print(item)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">akashi</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">22</span>&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li><code>popitem()</code></li></ol><p>从字典中随机弹出一个键值对</p><p>因为字典里面是无序的，弹出的值是随机的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">item = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(item.popitem())</span><br><span class="line">print(item)</span><br></pre></td></tr></table></figure><p>输出： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'age'</span>, <span class="number">22</span>)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'akashi'</span>&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li><code>setdefault()</code></li></ol><p>与 <code>get()</code> 类似，获取指定的键关联的值，但不同的是，如果不存在，会在字典中添加指定的键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">item = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(item.setdefault(<span class="string">'addr'</span>, <span class="string">'local'</span>))</span><br><span class="line">print(item)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'akashi'</span>, <span class="string">'age'</span>: <span class="number">22</span>, <span class="string">'addr'</span>: <span class="string">'local'</span>&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li><code>update()</code></li></ol><p>更新字典，有则替换，没有则添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">up_item = &#123;</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="string">'addr'</span>: <span class="string">'local'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item.update(up_item)</span><br><span class="line">print(item)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'akashi'</span>, <span class="string">'age'</span>: <span class="number">21</span>, <span class="string">'addr'</span>: <span class="string">'local'</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 上手指南之字符串</title>
      <link href="2019/11/04/python_adv_string/adv_string/"/>
      <url>2019/11/04/python_adv_string/adv_string/</url>
      
        <content type="html"><![CDATA[<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><blockquote><p>字符串的基本操作和方法。</p></blockquote><a id="more"></a><h5 id="设置字符串的格式"><a href="#设置字符串的格式" class="headerlink" title="设置字符串的格式"></a>设置字符串的格式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"&#123;foo&#125; &#123;&#125; &#123;bar&#125; &#123;&#125;"</span>.format(<span class="number">1</span>, <span class="number">2</span>, bar=<span class="number">4</span>, foo=<span class="number">3</span>)</span><br><span class="line"><span class="string">'3 1 4 2'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">me = <span class="string">'my name is &#123;name&#125;'</span>.format(name=<span class="string">'akashi'</span>)</span><br><span class="line">print(me)</span><br></pre></td></tr></table></figure><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><p>序列的基本操作(索引、切片、乘法、成员资格检查、长度、最小值、最大值)都适用于字符串</p><p>但是，字符串是不可变的，所有的元素赋值和切片赋值都是非法的。</p><h5 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h5><table><thead><tr><th>方法</th><th>使用</th><th>描述</th></tr></thead><tbody><tr><td><code>center</code></td><td><code>astring.center(w)</code></td><td>返回一个字符串，长度为 <code>w</code>，在两边填充字符(默认为空格)，让字符串居中</td></tr><tr><td><code>count</code></td><td><code>astring.count(item)</code></td><td>返回 <code>item</code> 出现的次数</td></tr><tr><td><code>lower</code></td><td><code>astring.lower()</code></td><td>返回均为小写字母的字符串</td></tr><tr><td><code>upper</code></td><td><code>astring.upper()</code></td><td>返回均为大写的字符串</td></tr><tr><td><code>title</code></td><td><code>astring.title()</code></td><td>字符串单词首字母大写，返回结果</td></tr><tr><td><code>find</code></td><td><code>astring.find(item)</code></td><td>返回 <code>item</code> 第一次出现时的下标</td></tr><tr><td><code>join</code></td><td><code>astring.join(sequence)</code></td><td>将两个字符串元素合并，并返回结果</td></tr><tr><td><code>replace</code></td><td><code>astring.replace(old, new)</code></td><td>将指定子串全部替换为另一个字符串返回</td></tr><tr><td><code>split</code></td><td><code>astring.split(schar)</code></td><td>在 <code>schar</code> 位置将字符串分割为子串</td></tr><tr><td><code>strip</code></td><td><code>astring.strip()</code></td><td>删除字符串开头和末尾的空白</td></tr></tbody></table><ol><li><code>center()</code></li></ol><p>字符串居中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">'string'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.center(<span class="number">10</span>)</span><br><span class="line"><span class="string">'  string  '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.center(<span class="number">20</span>, <span class="string">'='</span>)</span><br><span class="line"><span class="string">'=======string======='</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>count()</code></li></ol><p>计算字符出现个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">'akashi'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.count(<span class="string">'a'</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>lower()</code></li></ol><p>字符串转换成小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">'AKASHI'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.lower()</span><br><span class="line"><span class="string">'akashi'</span></span><br></pre></td></tr></table></figure><p>类似还有</p><p>字符串转换成大写 - <code>upper()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">'asuka'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.upper()</span><br><span class="line"><span class="string">'ASUKA'</span></span><br></pre></td></tr></table></figure><p>首字母大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">'gakki'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.title()</span><br><span class="line"><span class="string">'Gakki'</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>find()</code></li></ol><p>在字符串中查找子串，如果存在，返回第一次出现的第一个字符的索引，否则返回 <code>-1</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">'akashi'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.find(<span class="string">'ka'</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>注：值匹配一次，返回第一次的下标</p><p>类似还有 </p><p><code>index()</code>、<code>rindex()</code>、<code>rfind()</code></p><ol start="5"><li><code>join()</code></li></ol><p>合并序列元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">'akashi'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'-'</span>.join(x)</span><br><span class="line"><span class="string">'a-k-a-s-h-i'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>seq = [<span class="string">'akashi'</span>, <span class="string">'asuka'</span>, <span class="string">'gakki'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sep = <span class="string">'+'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sep.join(seq)</span><br><span class="line"><span class="string">'akashi+asuka+gakki'</span></span><br></pre></td></tr></table></figure><p>注：目的是将一个列表合并为一个字符串，可以指定中间的拼接字符。</p><ol start="6"><li><code>split()</code></li></ol><p>将字符串拆分为序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">'1+2+3+4'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.split(<span class="string">'+'</span>)</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</span><br></pre></td></tr></table></figure><p>注：和 <code>join()</code> 相反，<code>split()</code> 用于拆分字符串为列表。</p><ol start="7"><li><code>replace()</code></li></ol><p>替换字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">'akashi'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.replace(<span class="string">'kashi'</span>, <span class="string">'suka'</span>)</span><br><span class="line"><span class="string">'asuka'</span></span><br></pre></td></tr></table></figure><p>注：替换的是所有的字符串中出现的子串，一次执行替换全部。</p><ol start="8"><li><code>strip()</code></li></ol><p>取出字符串开始和结尾的空白</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">'  akahsi '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.strip()</span><br><span class="line"><span class="string">'akahsi'</span></span><br></pre></td></tr></table></figure><p>类似还有</p><p><code>lstrip()</code>、<code>rstrip()</code></p><h5 id="判断字符串是否满足特定的条件"><a href="#判断字符串是否满足特定的条件" class="headerlink" title="判断字符串是否满足特定的条件"></a>判断字符串是否满足特定的条件</h5><p>方法以 <code>is</code> 打头，判断为真返回 <code>True</code>，否则返回 <code>False</code></p><table><thead><tr><th>方法</th><th>使用</th><th>描述</th></tr></thead><tbody><tr><td><code>isalnum()</code></td><td><code>astring.isalnum()</code></td><td>检查字符串中字符是否都是字母或数</td></tr><tr><td><code>isalpha()</code></td><td><code>astring.isalpha()</code></td><td>检查字符串字符是否都是字母</td></tr><tr><td><code>isdigit()</code></td><td><code>astring.isdigit()</code></td><td>检查字符串字符是否都是数字</td></tr><tr><td><code>islower()</code></td><td><code>astring.islower()</code></td><td>检查字符串字符是否都是小写</td></tr><tr><td><code>isupper()</code></td><td><code>astring.isupper()</code></td><td>检查字符串字符是否都是大写</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 上手指南之列表</title>
      <link href="2019/11/03/python_adv_list_and_tuple/adv_list_and_tuple/"/>
      <url>2019/11/03/python_adv_list_and_tuple/adv_list_and_tuple/</url>
      
        <content type="html"><![CDATA[<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><blockquote><p>列表的基本操作和方法。</p></blockquote><a id="more"></a><h5 id="list"><a href="#list" class="headerlink" title="list"></a><code>list</code></h5><blockquote><p>因为不能像修改列表一样修改字符串，有些情况需要字符串来创建列表。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = list(<span class="string">'Hello'</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出：<code>[&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</code></p><p>序列的运算：</p><table><thead><tr><th>运算名</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>索引</td><td><code>[]</code></td><td>获取序列中的某个元素</td></tr><tr><td>连接</td><td><code>+</code></td><td>将序列连接在一起</td></tr><tr><td>重复</td><td><code>*</code></td><td>重复 <code>N</code> 次连接</td></tr><tr><td>成员</td><td><code>in</code></td><td>序列中是否有某元素</td></tr><tr><td>长度</td><td><code>len</code></td><td>序列元素个数</td></tr><tr><td>切片</td><td><code>[:]</code></td><td>取出序列的一部分</td></tr></tbody></table><h5 id="基本的列表操作"><a href="#基本的列表操作" class="headerlink" title="基本的列表操作"></a>基本的列表操作</h5><ol><li>修改列表：给元素赋值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">res[<span class="number">1</span>] = <span class="number">5</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li>删除元素</li></ol><p>使用 <code>del</code> 语句可以实现列表中元素删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> res[<span class="number">1</span>]</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><ol start="3"><li>给切片赋值</li></ol><ul><li>赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res = list(<span class="string">'akashi'</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">res[<span class="number">1</span>:] = list(<span class="string">'rashi'</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'k'</span>, <span class="string">'a'</span>, <span class="string">'s'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'r'</span>, <span class="string">'a'</span>, <span class="string">'s'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>]</span><br></pre></td></tr></table></figure><ul><li>替换序列，改变序列长度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res = list(<span class="string">'akashi'</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">res[<span class="number">1</span>:] = list(<span class="string">'suka'</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'k'</span>, <span class="string">'a'</span>, <span class="string">'s'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'s'</span>, <span class="string">'u'</span>, <span class="string">'k'</span>, <span class="string">'a'</span>]</span><br></pre></td></tr></table></figure><ul><li>不替换原有元素的情况下插入元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res = [<span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">res[<span class="number">1</span>:<span class="number">1</span>] = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><ul><li>删除切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">res[<span class="number">1</span>:<span class="number">4</span>] = []</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><ul><li>指定步长</li></ul><p><code>[start:stop:step]</code></p><p>注：<code>start</code> 缺省默认从头开始，<code>stop</code> 缺省默认至列表结尾，<code>step</code> 缺省默认为 <code>1</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">num = res[::<span class="number">2</span>]</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><ul><li>序列反转</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">num = res[::<span class="number">-1</span>]</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h5 id="列表方法"><a href="#列表方法" class="headerlink" title="列表方法"></a>列表方法</h5><table><thead><tr><th>方法名</th><th>用法</th><th>说明</th></tr></thead><tbody><tr><td><code>append</code></td><td><code>alist.append(item)</code></td><td>在列表末尾添加一个新元素</td></tr><tr><td><code>clear</code></td><td><code>alist.clear()</code></td><td>就地清空列表的内容</td></tr><tr><td><code>copy</code></td><td><code>alist.copy()</code></td><td>复制列表</td></tr><tr><td><code>count</code></td><td><code>alist.count(item)</code></td><td>返回 <code>item</code> 在列表中出现的次数</td></tr><tr><td><code>extend</code></td><td><code>alist.extend(otherlist)</code></td><td>同时将多个值附加到列表末尾</td></tr><tr><td><code>index</code></td><td><code>alist.index(item)</code></td><td>返回 <code>item</code> 第一次出现时的下标</td></tr><tr><td><code>insert</code></td><td><code>alist.insert(i, item)</code></td><td>在列表的第 <code>i</code> 个位置插入一个元素</td></tr><tr><td><code>pop</code></td><td><code>alist.pop()</code></td><td>删除并返回列表中最后一个元素</td></tr><tr><td><code>pop</code></td><td><code>alist.pop(i)</code></td><td>删除并返回列表中第 <code>i</code> 个位置的元素</td></tr><tr><td><code>del</code></td><td><code>del alist[i]</code></td><td>删除列表中第 <code>i</code> 个位置的元素</td></tr><tr><td><code>remove</code></td><td><code>alist.remove(item)</code></td><td>从列表中移除第一次出现的 <code>item</code></td></tr><tr><td><code>reverse</code></td><td><code>alist.reverse()</code></td><td>将列表元素倒序排列</td></tr><tr><td><code>sort</code></td><td><code>alist.sort()</code></td><td>将列表元素排序</td></tr></tbody></table><ol><li><code>append()</code></li></ol><p>用于将一个对象附加到列表末尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">lst.append(<span class="number">4</span>)</span><br><span class="line">print(lst)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li><code>clear()</code></li></ol><p>就地清空列表的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">lst.clear()</span><br><span class="line">print(lst)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><ol start="3"><li><code>copy()</code></li></ol><p>复制列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a.copy()</span><br><span class="line">b[<span class="number">1</span>] = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>等效于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a[:]</span><br></pre></td></tr></table></figure><p>常规复制只是将另一个名称关联到了列表，本质上还是同一个列表。</p><ol start="4"><li><code>count()</code></li></ol><p>计算指定的元素在列表中出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">res = lst.count(<span class="number">1</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出： <code>2</code></p><ol start="5"><li><code>extend()</code></li></ol><p>同时将多个值附加到列表末尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">a.extend(b)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><ol start="6"><li><code>index()</code></li></ol><p>在列表中查找指定的值第一次出现的索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="string">'akashi'</span>, <span class="string">'asuka'</span>, <span class="string">'asuka'</span>]</span><br><span class="line">print(name.index(<span class="string">'asuka'</span>))</span><br></pre></td></tr></table></figure><p>输出： <code>1</code></p><ol start="7"><li><code>insert()</code></li></ol><p>用于将一个对象插入列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">lst.insert(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(lst)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><ol start="8"><li><code>pop()</code></li></ol><p>从列表中删除一个元素(末尾为最后一个元素)，并返回这一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">print(lst.pop())</span><br></pre></td></tr></table></figure><p>输出： <code>4</code></p><p>注：<code>push</code> 和 <code>pop</code> 是普遍接受的两种栈操作，但是 <code>Python</code> 没有提供 <code>push</code>，可以使用 <code>append</code> 代替。</p><ol start="9"><li><code>remove()</code></li></ol><p>删除第一个为指定值的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">lst.remove(<span class="number">1</span>)</span><br><span class="line">print(lst)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><ol start="10"><li><code>reverse()</code></li></ol><p>按相反的顺序排列列表中的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">lst.reverse()</span><br><span class="line">print(lst)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><ol start="11"><li><code>sort()</code></li></ol><p>用于对列表就地排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">lst.sort()</span><br><span class="line">print(lst)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>因为是就地排序，修改了列表而不返回任何的值，如果像下面这样，就是得到一个 <code>None</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line">y = x.sort()</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><p>输出： <code>None</code></p><p>想要获取排序后的列表的副本，可以使用函数 <code>sorted()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line">y = sorted(x)</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><ol start="12"><li>高级排序</li></ol><p>方法 <code>sort()</code> 接受两个可选参数：<code>key</code> 和 <code>reverse</code></p><p>参数 <code>key</code> 可以设置为一个用于排序的函数(可以是自定义函数)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="string">'akashi'</span>, <span class="string">'asuka'</span>, <span class="string">'gakki'</span>]</span><br><span class="line">name.sort(key=len)</span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><p>参数 <code>reverse</code> 指定为 <code>True</code> 或 <code>False</code>，指出是否按相反顺序排序。</p><h4 id="元组：不可修改的序列"><a href="#元组：不可修改的序列" class="headerlink" title="元组：不可修改的序列"></a>元组：不可修改的序列</h4><blockquote><p>元组也是序列，与列表的差别在于不可修改。</p></blockquote><p>使用逗号分隔，自动创建一个元组</p><ul><li>创建</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><ul><li>表示一个值的元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>,</span><br><span class="line">(<span class="number">4</span>,)</span><br></pre></td></tr></table></figure><h5 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a><code>tuple</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = tuple(<span class="string">'123'</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>)</span><br></pre></td></tr></table></figure><p>元组操作与列表大体一致，也有切片</p><p>元组用作映射中的键(以及集合的成员)，而列表不行。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 应用 uWSGI + Nginx 部署</title>
      <link href="2019/10/30/Python_Deploy/deploy/"/>
      <url>2019/10/30/Python_Deploy/deploy/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>uWSGI</code> + <code>Nginx</code> 项目部署。</p></blockquote><a id="more"></a><h4 id="Python-应用-uWSGI-Nginx-部署"><a href="#Python-应用-uWSGI-Nginx-部署" class="headerlink" title="Python 应用 uWSGI + Nginx 部署"></a><code>Python</code> 应用 <code>uWSGI</code> + <code>Nginx</code> 部署</h4><h5 id="新建一个-Django-应用部署"><a href="#新建一个-Django-应用部署" class="headerlink" title="新建一个 Django 应用部署"></a>新建一个 <code>Django</code> 应用部署</h5><ul><li>使用 <code>py</code> 文件启动 <code>uWSGI</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(env, start_response)</span>:</span></span><br><span class="line">    start_response(<span class="string">'200 ok'</span>, [(<span class="string">'Content-type'</span>, <span class="string">'text/html'</span>)])</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b'Hello uWSGI.'</span>]</span><br></pre></td></tr></table></figure><p>启动:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http-socket :8000 --plugin python3 --wsgi-file uwsgi_test.py</span><br></pre></td></tr></table></figure><p>可能需要安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install uwsgi-plugin-common</span><br><span class="line">sudo apt install uwsgi-plugin-python3</span><br></pre></td></tr></table></figure><p>视情况也可能是 <code>apt install uwsgi-plugin-python</code>，看自己使用的 <code>Python</code> 版本和软连接情况。</p><p>这样，在对应的 <code>IP</code> 下的 <code>8000</code> 端口可以访问到文件。</p><ul><li>新建 <code>Django</code> 项目</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject django_deployment</span><br></pre></td></tr></table></figure><ul><li>通过修改配置允许外部访问</li></ul><p><code>setting.py</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS = ["*"]</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span></span><br></pre></td></tr></table></figure><h5 id="打通-Django-与-uWSGI-的链路"><a href="#打通-Django-与-uWSGI-的链路" class="headerlink" title="打通 Django 与 uWSGI 的链路"></a>打通 <code>Django</code> 与 <code>uWSGI</code> 的链路</h5><p>先停止应用</p><ul><li>启动 <code>uwsgi</code> 打通关系</li></ul><p>在项目根目录启动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http-socket :<span class="number">8000</span> --plugin python3 --module django_deployment.wsgi</span><br></pre></td></tr></table></figure><ul><li>将命令行配置改为文件配置</li></ul><p>新建 <code>django-uwsgi.ini</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch django-uwsgi.ini</span><br><span class="line">vim django-uwsgi.ini</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置域</span></span><br><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作目录</span></span><br><span class="line">chdir = /source/python/deployment/django_deployment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模块</span></span><br><span class="line">module = django_deployment.wsgi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求端口</span></span><br><span class="line">http-socket = :<span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># master</span></span><br><span class="line">master = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程</span></span><br><span class="line">processes = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程</span></span><br><span class="line">threads = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否退出是清理相关内容</span></span><br><span class="line">vacuum = true</span><br></pre></td></tr></table></figure><ul><li>启动 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini django-uwsgi-ini</span><br></pre></td></tr></table></figure><ul><li>后台启动</li></ul><p>后台运行程序并打印日志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置域</span></span><br><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作目录</span></span><br><span class="line">chdir = /source/python/deployment/django_deployment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模块</span></span><br><span class="line">module = django_deployment.wsgi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求端口</span></span><br><span class="line">http-socket = :<span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># master</span></span><br><span class="line">master = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程</span></span><br><span class="line">processes = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程</span></span><br><span class="line">threads = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否退出是清理相关内容</span></span><br><span class="line">vacuum = true</span><br><span class="line"></span><br><span class="line"><span class="comment"># backend run uwsgi</span></span><br><span class="line">daemonize = %(chdir)/log/uwsgi<span class="number">-8000.l</span>og</span><br><span class="line">log-maxsize = <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line">pidfile = %(chdir)/pid/uwsgi<span class="number">-8000.</span>pid</span><br></pre></td></tr></table></figure><p>创建文件夹 <code>log</code> 和 <code>pid</code></p><p>启动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini django-uwsgi.ini</span><br></pre></td></tr></table></figure><p>停止 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --stop pid/uwsgi<span class="number">-8000.</span>pid</span><br></pre></td></tr></table></figure><h4 id="Django-Nginx-uWSGI-部署"><a href="#Django-Nginx-uWSGI-部署" class="headerlink" title="Django Nginx + uWSGI 部署"></a><code>Django</code> <code>Nginx</code> + <code>uWSGI</code> 部署</h4><h5 id="uWSGI-启动-Django-服务器"><a href="#uWSGI-启动-Django-服务器" class="headerlink" title="uWSGI 启动 Django 服务器"></a><code>uWSGI</code> 启动 <code>Django</code> 服务器</h5><ul><li>启动并查看 <code>pid</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini django-uwsgi-ini</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat pid/uwsgi-8000.pid</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep xxx</span><br></pre></td></tr></table></figure><h5 id="修改-Nginx-配置文件，完成反向代理"><a href="#修改-Nginx-配置文件，完成反向代理" class="headerlink" title="修改 Nginx 配置文件，完成反向代理"></a>修改 <code>Nginx</code> 配置文件，完成反向代理</h5><p>复制备份配置文件 <code>nginx.conf</code> 为 <code>nginx.conf.back</code></p><p>修改 <code>nginx.conf</code></p><p>在 <code>63</code> 行处：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">upstream uwsgi &#123;</span><br><span class="line">    server <span class="number">122.51</span><span class="number">.1</span><span class="number">.19</span>:<span class="number">8000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name <span class="number">122.51</span><span class="number">.1</span><span class="number">.19</span>;</span><br><span class="line">    charset utf<span class="number">-8</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://uwsgi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>查看启动进程情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep nginx</span><br></pre></td></tr></table></figure></li><li><p>添加 <code>log</code> 配置文件</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">upstream uwsgi &#123;</span><br><span class="line">    server <span class="number">122.51</span><span class="number">.1</span><span class="number">.19</span>:<span class="number">8000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        server_name <span class="number">122.51</span><span class="number">.1</span><span class="number">.19</span>;</span><br><span class="line">        charset utf<span class="number">-8</span>;</span><br><span class="line">        access_log /var/log/nginx/nginx.log;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://uwsgi;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>查看日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /var/log/ngxin/</span><br><span class="line">ls</span><br><span class="line">tail -f nginx.log</span><br></pre></td></tr></table></figure><h5 id="收集静态文件，完成静态文件寻址配置"><a href="#收集静态文件，完成静态文件寻址配置" class="headerlink" title="收集静态文件，完成静态文件寻址配置"></a>收集静态文件，完成静态文件寻址配置</h5><ul><li>收集静态文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim django_deployment/settings.py</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'static'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><ul><li>配置静态文件路由</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">upstream uwsgi &#123;</span><br><span class="line">        server <span class="number">122.51</span><span class="number">.1</span><span class="number">.19</span>:<span class="number">8000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name <span class="number">122.51</span><span class="number">.1</span><span class="number">.19</span>;</span><br><span class="line">    charset utf<span class="number">-8</span>;</span><br><span class="line">    access_log /var/log/nginx/nginx.log;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://uwsgi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /static &#123;</span><br><span class="line">        allas /source/python/deployment/django_deployment/static;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新加载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h4 id="HTTPS-加密部署"><a href="#HTTPS-加密部署" class="headerlink" title="HTTPS 加密部署"></a><code>HTTPS</code> 加密部署</h4><p>使用 <code>443</code> 端口，协议加密传输报文。</p><ul><li>申请 <code>SSL</code> 证书</li></ul><p>在 <code>Nginx</code> 中新建文件夹 <code>ssl</code>，存放 <code>crt</code> 和 <code>key</code></p><p>远程拷贝到服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp 2_topic.akashi.org.cn.crt root@122.51.1.19:/etc/nginx/ssl/</span><br><span class="line">scp 3_topic.akashi.org.cn.key root@122.51.1.19:/etc/nginx/ssl</span><br></pre></td></tr></table></figure><ul><li>配置 <code>Nginx</code> 支持 <code>HTTPS</code></li></ul><p><code>nginx.conf</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">listen <span class="number">443</span> ssl;</span><br><span class="line">ssl_certificate /etc/nginx/ssl/domain.com.crt;</span><br><span class="line">ssl_certificate_key /etc/nginx/ssl/domain.com.key;</span><br><span class="line">ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;</span><br></pre></td></tr></table></figure><ul><li>定义 <code>80</code> 端口的返回</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name topic.akashi.org.cn;</span><br><span class="line">    rewrite ^(.*)$ https://$host$<span class="number">1</span> permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name topic.akashi.org.cn;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">301</span> https://topic.akashi.org.cn;$request_rui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启生效</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="部署高可用服务"><a href="#部署高可用服务" class="headerlink" title="部署高可用服务"></a>部署高可用服务</h3><p>添加配置的启动端口，开启多个服务，并且转发到 <code>nginx</code> 上，还可以通过权重分配达到负载均衡</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream uwsgi &#123;</span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span> weight=<span class="number">3</span>;</span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8001</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意事项</li></ul><ol><li><p>不要使用 <code>root</code> 权限启动 <code>uwsgi</code> 服务</p></li><li><p>关闭 <code>uwsgi</code> 外网访问</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http-scoket = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http-scoket = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8001</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 下 MySQL 的安装</title>
      <link href="2019/10/29/mysql-install-contos/mysql-install/"/>
      <url>2019/10/29/mysql-install-contos/mysql-install/</url>
      
        <content type="html"><![CDATA[<h3 id="Ubuntu-下-MySQL-的安装"><a href="#Ubuntu-下-MySQL-的安装" class="headerlink" title="Ubuntu 下 MySQL 的安装"></a><code>Ubuntu</code> 下 <code>MySQL</code> 的安装</h3><blockquote><p>记录服务器下 <code>MySQL</code> 的安装过程。</p></blockquote><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt install mysql-client-core-5.7</span><br><span class="line">apt install mysql-client-5.7</span><br><span class="line">apt install mysql-server-5.7</span><br></pre></td></tr></table></figure><p>停止、启动和重启 <code>mysql</code> 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service mysql stop</span><br><span class="line">service mysql start</span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><p>查看默认登录的用户名和密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure><p>使用默认用户登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u debian-sys-maint -p</span><br></pre></td></tr></table></figure><p>查看当前所有存在的用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user from mysql.user;</span><br></pre></td></tr></table></figure><p>修改密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update mysql.user set authentication_string=PASSWORD("这里输入你的密码") where User='root';</span><br></pre></td></tr></table></figure><p>更新所有操作权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update mysql.user set plugin="mysql_native_password";</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>退出并重新使用你设置的密码登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 环境安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 环境安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 解析库的使用</title>
      <link href="2019/10/28/pyquery_xpath/pyquery-xpath/"/>
      <url>2019/10/28/pyquery_xpath/pyquery-xpath/</url>
      
        <content type="html"><![CDATA[<h4 id="Python-解析库的使用"><a href="#Python-解析库的使用" class="headerlink" title="Python 解析库的使用"></a><code>Python</code> 解析库的使用</h4><blockquote><p><code>lxml</code>、<code>Beautiful Soup</code> 和 <code>pyquery</code> 的使用。</p></blockquote><a id="more"></a><h5 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a><code>XPath</code></h5><h6 id="XPath-常用规则"><a href="#XPath-常用规则" class="headerlink" title="XPath 常用规则"></a><code>XPath</code> 常用规则</h6><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td><code>nodename</code></td><td>选取此节点的所有子节点</td></tr><tr><td><code>/</code></td><td>从当前节点选取直接子节点</td></tr><tr><td><code>//</code></td><td>从当前节点选取子孙节点</td></tr><tr><td><code>.</code></td><td>选取当前节点</td></tr><tr><td><code>..</code></td><td>选取当前节点的父节点</td></tr><tr><td><code>@</code></td><td>选取属性</td></tr></tbody></table><h6 id="实例引入"><a href="#实例引入" class="headerlink" title="实例引入"></a>实例引入</h6><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="link.html"&gt;item&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = etree.tostring(html)</span><br><span class="line">print(result.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h6 id="所有节点"><a href="#所有节点" class="headerlink" title="所有节点"></a>所有节点</h6><p>使用 <code>//</code> 开头的 <code>XPath</code> 规则来匹配所有符合要求的节点</p><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://akashigakki.github.io'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">html = etree.HTML(response.text)</span><br><span class="line">result = html.xpath(<span class="string">'//div'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h6 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h6><p>使用 <code>/</code> 匹配子节点</p><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://akashigakki.github.io'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">html = etree.HTML(response.text)</span><br><span class="line">result = html.xpath(<span class="string">'//div/span'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h6 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h6><p>使用 <code>..</code> 匹配获取父节点</p><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="link.html"&gt;item&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li/a/../@class'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>也可以通过 <code>parent::</code> 来获取</p><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="link.html"&gt;item&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li/a/parent::*/@class'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h6 id="属性匹配"><a href="#属性匹配" class="headerlink" title="属性匹配"></a>属性匹配</h6><p>使用 <code>@</code> 进行属性过滤</p><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="link.html"&gt;item_1&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a class="item"&gt;item_2&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li/a[@class="item"]'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>以上 <code>xpath</code> 只有 <code>class</code> 是 <code>item</code> 的 <code>a</code> 标签可以匹配到，结果只有一个节点。</p><h6 id="文本获取"><a href="#文本获取" class="headerlink" title="文本获取"></a>文本获取</h6><p>使用 <code>text()</code> 进行文本获取</p><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="link.html"&gt;item_1&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a class="item"&gt;item_2&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li/a[@class="item"]/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h6 id="属性获取"><a href="#属性获取" class="headerlink" title="属性获取"></a>属性获取</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="link.html"&gt;item_1&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a class="item"&gt;item_2&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li/a/@href'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h6 id="属性多值匹配"><a href="#属性多值匹配" class="headerlink" title="属性多值匹配"></a>属性多值匹配</h6><p>使用 <code>contains()</code> 函数</p><p>如果一个节点的 <code>class</code> 属性有两个值，那么就无法通过属性匹配来获取了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item li-first"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="link.html"&gt;item_1&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a class="item"&gt;item_2&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="item"]/a/@href'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>输出为 <code>[]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item li-first"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="link.html"&gt;item_1&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a class="item"&gt;item_2&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[contains(@class, "item")]/a/@href'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这种方式在某个节点的某个属性有多个值时经常用到。</p><h6 id="多属性匹配"><a href="#多属性匹配" class="headerlink" title="多属性匹配"></a>多属性匹配</h6><p>使用 <code>and</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item li-first" name="li"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="link.html"&gt;item_1&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a class="item"&gt;item_2&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[contains(@class, "item") and @name="li"]/a/@href'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其他运算符介绍：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>返回值</th></tr></thead><tbody><tr><td><code>or</code></td><td>或</td><td><code>age=19 or age=20</code></td><td><code>true/false</code></td></tr><tr><td><code>and</code></td><td>与</td><td><code>age&gt;19 and age&lt;21</code></td><td><code>true/false</code></td></tr><tr><td><code>mod</code></td><td>计算除法的余数</td><td><code>5 mod 2</code></td><td>余数</td></tr><tr><td>`</td><td>`</td><td>计算两个节点集</td><td>`//book</td><td>//cd`</td><td>返回所有拥有 <code>book</code> 和 <code>cd</code> 元素的节点集</td></tr><tr><td><code>+</code></td><td>加法</td><td><code>6 + 4</code></td><td>对应值</td></tr><tr><td><code>-</code></td><td>减法</td><td><code>6 - 4</code></td><td>对应值</td></tr><tr><td><code>*</code></td><td>乘法</td><td><code>6 * 4</code></td><td>对应值</td></tr><tr><td><code>div</code></td><td>除法 <code>8 div 4</code></td><td>对应值</td></tr><tr><td><code>=</code></td><td>等于</td><td><code>age=19</code></td><td><code>true/false</code></td></tr><tr><td><code>!=</code></td><td>不等于</td><td><code>age!=19</code></td><td><code>true/false</code></td></tr><tr><td><code>&lt;</code></td><td>小于</td><td><code>age&lt;19</code></td><td><code>true/false</code></td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td><td><code>age&lt;=19</code></td><td><code>true/false</code></td></tr><tr><td><code>&gt;</code></td><td>大于</td><td><code>age&gt;19</code></td><td><code>true/false</code></td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td><td><code>age&gt;=19</code></td><td><code>true/false</code></td></tr></tbody></table><h6 id="按序选择"><a href="#按序选择" class="headerlink" title="按序选择"></a>按序选择</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item li-first" name="li"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="link.html"&gt;item_1&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a class="item"&gt;item_2&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result_1 = html.xpath(<span class="string">'//li/a[last()]/text()'</span>)</span><br><span class="line">result_2 = html.xpath(<span class="string">'//li/a[position()=1]/text()'</span>)</span><br><span class="line">print(result_1)</span><br><span class="line">print(result_2)</span><br></pre></td></tr></table></figure><p>具体参考 <code>http://www.w3cschool.com.cn/xpath/xpath_functions.asp</code></p><h5 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a><code>Beautiful Soup</code></h5><h6 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://akashigakki.github.io/'</span></span><br><span class="line">response = requests.get(url=url)</span><br><span class="line">html = response.text</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.prettify)</span><br><span class="line">print(soup.title.string)</span><br></pre></td></tr></table></figure><p><code>Beautiful Soup</code> 在使用时依赖于解析器，它除了支持 <code>Python</code> 标准库中的 <code>HTML</code> 解析器外(<code>html.parser</code>)，还支持第三方解析器如 <code>lxml</code> 和 <code>xml</code> 等。</p><p>初始化时，把第二个参数设置为解析器，如 <code>soup = BeautifulSoup(html, &#39;lxml&#39;)</code></p><h6 id="节点选择器"><a href="#节点选择器" class="headerlink" title="节点选择器"></a>节点选择器</h6><ul><li>选择元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Title&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;p class='item'&gt;Akashi&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;a href='https://example.com' class='site'&gt;site_1&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;a href='https://example.com' class='site'&gt;site_2&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.title)</span><br><span class="line">print(soup.title.string)</span><br><span class="line">print(soup.p)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>The Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">The Title</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Akashi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>提取信息</li></ul><p>(1) 获取节点名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Title&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;p class='item'&gt;Akashi&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;a href='https://example.com' class='site'&gt;site_1&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;a href='https://example.com' class='site'&gt;site_2&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.title.name)</span><br></pre></td></tr></table></figure><p>输出： <code>title</code></p><p>(2) 获取属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rom bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Title&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;p class='item'&gt;Akashi&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;a href='https://example.com' class='site'&gt;site_1&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;a href='https://example.com' class='site'&gt;site_2&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.attrs)</span><br><span class="line">print(soup.p.attrs[<span class="string">'class'</span>])</span><br></pre></td></tr></table></figure><p>输出： </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;'class': ['item']&#125;</span><br><span class="line">['item']</span><br></pre></td></tr></table></figure><ul><li>嵌套选择</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">rom bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Title&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;p class='item'&gt;Akashi&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;a href='https://example.com' class='site'&gt;site_1&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;a href='https://example.com' class='site'&gt;site_2&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.head.title)</span><br></pre></td></tr></table></figure><p>输出： <code>&lt;title&gt;The Title&lt;/title&gt;</code></p><ul><li>关联选择</li></ul><p>(1) 子节点和子孙节点</p><p>选取节点元素之后，如果想要获取它的直接子节点，可以调用 <code>contents</code> 属性</p><p>如果想要获取所有的子孙节点，可以使用 <code>children</code> 来获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Title&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;p class='item'&gt;Akashi&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;a href='https://r1.example.com' class='site'&gt;site_1&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;a href='https://r2.example.com' class='site'&gt;site_2&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.div.contents)</span><br><span class="line">print(soup.div.children)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> soup.div.children:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">['\n', <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Akashi<span class="tag">&lt;/<span class="name">p</span>&gt;</span>, '\n', <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"site"</span> <span class="attr">href</span>=<span class="string">"https://r1.example.com"</span>&gt;</span>site_1<span class="tag">&lt;/<span class="name">a</span>&gt;</span>, '\n', <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"site"</span> <span class="attr">href</span>=<span class="string">"https://r2.example.com"</span>&gt;</span>site_2<span class="tag">&lt;/<span class="name">a</span>&gt;</span>, '\n']</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">list_iterator</span> <span class="attr">object</span> <span class="attr">at</span> <span class="attr">0x1018f5810</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Akashi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"site"</span> <span class="attr">href</span>=<span class="string">"https://r1.example.com"</span>&gt;</span>site_1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"site"</span> <span class="attr">href</span>=<span class="string">"https://r2.example.com"</span>&gt;</span>site_2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2) 父节点和祖先节点</p><p>如果想要获取某个节点元素的父节点，可以使用 <code>parent</code> 属性</p><p>如果想要获取所有的祖先节点，可以使用 <code>parents</code> 属性</p><p>(3) 兄弟节点</p><p>如果想要获取同级节点，可以使用 <code>netx_sibling</code> 获取下一个兄弟元素，<code>previous_sibling</code> 获取上一个兄弟元素</p><p>使用 <code>next_siblings</code> 返回所有后面的兄弟节点，使用 <code>previous_sibling</code> 返回所有前面的兄弟节点</p><p>(4) 提取信息</p><p>调用 <code>string</code> 和 <code>attrs</code> 等属性获得其文本和属性</p><h6 id="方法选择器"><a href="#方法选择器" class="headerlink" title="方法选择器"></a>方法选择器</h6><ul><li><code>find_all()</code></li></ul><blockquote><p>查询所有符合条件的元素</p></blockquote><p>(1) <code>name</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(name=<span class="string">'li'</span>)</span><br></pre></td></tr></table></figure><p>(2) <code>attrs</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(attrs=&#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'list-1'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(id=<span class="string">'list-`'</span>)</span><br><span class="line">soup.fin_all(class_=<span class="string">'element'</span>)</span><br></pre></td></tr></table></figure><p>(3) <code>text</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(text=re.compile(<span class="string">'link'</span>))</span><br></pre></td></tr></table></figure><ul><li><code>find</code></li></ul><blockquote><p>匹配一个元素，参数与 <code>find_all</code> 一致</p></blockquote><p>其他方法：</p><p><code>find_parents()</code>、<code>find_parent()</code>、<code>find_next_sibling()</code>、<code>find_next_siblings()</code>、<code>find_previous_sibling()</code>、<code>find_previous_siblings()</code></p><h6 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a><code>CSS</code> 选择器</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import requests</span></span><br><span class="line"><span class="comment"># from bs4 import BeautifulSoup</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># url = 'https://akashigakki.github.io/'</span></span><br><span class="line"><span class="comment"># response = requests.get(url=url)</span></span><br><span class="line"><span class="comment"># html = response.text</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># soup = BeautifulSoup(html, 'lxml')</span></span><br><span class="line"><span class="comment"># print(soup.prettify)</span></span><br><span class="line"><span class="comment"># print(soup.title.string)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Title&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;p class='item'&gt;Akashi&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;a href='https://r1.example.com' class='site'&gt;site_1&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;a href='https://r2.example.com' class='site'&gt;site_2&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.select(<span class="string">'a'</span>))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"site"</span> <span class="attr">href</span>=<span class="string">"https://r1.example.com"</span>&gt;</span>site_1<span class="tag">&lt;/<span class="name">a</span>&gt;</span>, <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"site"</span> <span class="attr">href</span>=<span class="string">"https://r2.example.com"</span>&gt;</span>site_2<span class="tag">&lt;/<span class="name">a</span>&gt;</span>]</span><br></pre></td></tr></table></figure><ul><li>嵌套选择</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Title&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;p class='item'&gt;Akashi&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;a href='https://r1.example.com' class='site'&gt;site_1&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;a href='https://r2.example.com' class='site'&gt;site_2&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="keyword">for</span> div <span class="keyword">in</span> soup.select(<span class="string">'div'</span>):</span><br><span class="line">    print(soup.select(<span class="string">'a'</span>))</span><br></pre></td></tr></table></figure><ul><li>属性获取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> soup.select(<span class="string">'a'</span>):</span><br><span class="line">    print(a[<span class="string">'class'</span>])</span><br><span class="line">    print(a.attrs[<span class="string">'class'</span>])</span><br></pre></td></tr></table></figure><ul><li>文本获取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> soup.select(<span class="string">'a'</span>):</span><br><span class="line">    print(a.get_text())</span><br><span class="line">    print(a.string)</span><br></pre></td></tr></table></figure><h5 id="pyquery"><a href="#pyquery" class="headerlink" title="pyquery"></a><code>pyquery</code></h5><blockquote><p>如果使用 <code>jQuery</code> 操作 <code>css</code> 选择器比较熟悉，那么使用起 <code>pyquery</code> 就会非常顺手了，因为它们的语法基本是一样的。</p></blockquote><h6 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://akashigakki.github.io'</span></span><br><span class="line">html = requests.get(url=url)</span><br><span class="line">doc = pq(html.text)</span><br><span class="line">print(doc(<span class="string">'title'</span>))</span><br></pre></td></tr></table></figure><h6 id="基本-css-选择器"><a href="#基本-css-选择器" class="headerlink" title="基本 css 选择器"></a>基本 <code>css</code> 选择器</h6><p>使用起来和 <code>jQuery</code> 完全相同，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doc(<span class="string">'#container .list li'</span>)</span><br></pre></td></tr></table></figure><p>以上分别为 <code>id</code> 选择器、<code>class</code> 选择器和标签选择器。</p><h6 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h6><ul><li>需要查找子节点时，使用 <code>find()</code> 方法</li></ul><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doc = pq(html)</span><br><span class="line">items = doc(<span class="string">'.list'</span>)</span><br><span class="line">lis = items.find(<span class="string">'li'</span>)</span><br></pre></td></tr></table></figure><p><code>find()</code> 方法会返回符合条件的所有子孙节点，如果只是查找子节点，可以使用 <code>children()</code></p><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lis = items.children(<span class="string">'.active'</span>)</span><br></pre></td></tr></table></figure><ul><li>使用 <code>parent()</code> 获取某个节点的父节点</li></ul><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doc = pq(html)</span><br><span class="line">items = doc(<span class="string">'.list'</span>)</span><br><span class="line">contaier = items.parent()</span><br></pre></td></tr></table></figure><p>如果想获取所有祖先节点，使用 <code>parents()</code> 方法</p><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container = items.parents()</span><br></pre></td></tr></table></figure><ul><li>获取兄弟节点 <code>siblings()</code></li></ul><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doc = pq(html)</span><br><span class="line">li = doc(<span class="string">'.list'</span>)</span><br><span class="line">print(li.siblings())</span><br></pre></td></tr></table></figure><p>如果需要筛选，还可以继续传入参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(li.siblings(<span class="string">'.active'</span>))</span><br></pre></td></tr></table></figure><h6 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h6><ul><li>获取属性</li></ul><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">doc = pq(html)</span><br><span class="line">a = doc(<span class="string">'.item a'</span>)</span><br><span class="line">print(a.attr(<span class="string">'href'</span>))</span><br><span class="line">print(a.attr.href)</span><br></pre></td></tr></table></figure><p>以上两种方式都可以获取属性。</p><ul><li>获取文本</li></ul><p>使用 <code>text()</code> 来实现</p><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(a.text())</span><br></pre></td></tr></table></figure><p>也可以使用 <code>html()</code> 获取 <code>HTML</code> 文本</p><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(a.html())</span><br></pre></td></tr></table></figure><h6 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h6><ul><li><code>addClass</code> 和 <code>removeClass</code></li></ul><p>可以对节点进行动态修改</p><ul><li><code>attr</code>、<code>text</code> 和 <code>html</code></li></ul><p>对节点的内容进行修改</p><ul><li><code>remove()</code></li></ul><p>移除</p><h6 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h6><p><code>eg</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">doc = pq(html)</span><br><span class="line">li = doc(<span class="string">'li:first-child'</span>)</span><br><span class="line">li = doc(<span class="string">'li:last-child'</span>)</span><br><span class="line">li = doc(<span class="string">'li:nth-child(2)'</span>)</span><br></pre></td></tr></table></figure><p>依次选择了第一个 <code>li</code> 节点、最后一个 <code>li</code> 节点和第二个 <code>li</code> 节点。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pymysql 操作关系型数据库</title>
      <link href="2019/09/25/python_pymysql/pymysql/"/>
      <url>2019/09/25/python_pymysql/pymysql/</url>
      
        <content type="html"><![CDATA[<h4 id="pymysql-操作关系型数据库"><a href="#pymysql-操作关系型数据库" class="headerlink" title="pymysql 操作关系型数据库"></a><code>pymysql</code> 操作关系型数据库</h4><blockquote><p>关系型数据库 <code>MySQL</code> 的数据存储操作。</p></blockquote><a id="more"></a><h5 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个连接，新建数据库并且输出版本</span></span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, port=<span class="number">3306</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">cursor.execute(<span class="string">'select version()'</span>)</span><br><span class="line">data = cursor.fetchone()</span><br><span class="line">print(<span class="string">'Database version: '</span>, data)</span><br><span class="line">cursor.execute(<span class="string">'create database spiders default character set utf8mb4'</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>这里使用 <code>connect()</code> 方法声明一个 <code>MySQL</code> 连接对象 <code>db</code>，传入对应参数</p><p>连接成功后，调用 <code>cursor()</code> 方法获得 <code>MySQL</code> 的操作游标，利用游标来执行 <code>SQL</code> 语句，</p><p>执行操作使用 <code>execute()</code> 方法实现，首先获取了 <code>MySQL</code> 当前的版本，使用 <code>fetchone()</code> 获取结果的第一条数据，</p><p>然后创建一个数据库，命名为 <code>spider</code>，使用 <code>utf8mb4</code> 编码，</p><p>最终关闭数据库。</p><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'create table if not exists students (id varchar(255) not null, name varchar(255) not null, age int not null, primary key (id))'</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">id = <span class="string">'20190001'</span></span><br><span class="line">user = <span class="string">'Akashi'</span></span><br><span class="line">age = <span class="number">22</span></span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'insert into students(id, name, age) values(%s, %s, %s)'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql, (id, user, age))</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>这里最终需要执行对 <code>db</code> 对象的 <code>commit()</code> 方法才可以实现数据的插入，对于数据的插入、更新、删除操作都需要使用提交数据库才会保存生效。</p><p>我们还加入了异常处理，如果执行失败，打印异常并且执行数据回滚，保证了数据的一致性。</p><h5 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h5><p>一个事务中的命令，要么全部执行，要么都不执行，这样确保了数据的一致性。事务包括原子性、一致性、隔离性、和持久性。</p><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>原子性</td><td>事务是一个不可分割的工作单位，事务中的所有操作，要么都执行，要么都不执行。</td></tr><tr><td>一致性</td><td>事务必须使数据库从一个一致性状态变到另一个一致性状态。</td></tr><tr><td>隔离性</td><td>一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</td></tr><tr><td>持久性</td><td>也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的，接下来的其他操作或故障不应该对其有任何影响。</td></tr></tbody></table><p>下面对插入进一步的改进，使用字典进行传入，对 <code>sql</code> 语句做更好的封装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'20190002'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'Asuka'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys())</span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>] * len(data))</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">'insert into &#123;table&#125;(&#123;keys&#125;) values(&#123;values&#125;)'</span>.format(table=table, keys=keys, values=values)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql, tuple(data.values()))</span><br><span class="line">    print(<span class="string">'Successful'</span>)</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h5 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">'update students set age = %s where name = %s'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql, (<span class="number">21</span>, <span class="string">'Akashi'</span>))</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>如果数据存在，则更新数据，如果数据不存在，则插入数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'20190001'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'Akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys())</span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>] * len(data))</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">'insert into &#123;table&#125;(&#123;keys&#125;) values(&#123;values&#125;) on duplicate key update'</span>.format(table=table, keys=keys, values=values)</span><br><span class="line"></span><br><span class="line">update = <span class="string">','</span>.join([<span class="string">" &#123;key&#125; = %s"</span>.format(key=key) <span class="keyword">for</span> key <span class="keyword">in</span> data])</span><br><span class="line"></span><br><span class="line">sql += update</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql, tuple(data.values())*<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'Successful'</span>)</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">condition = <span class="string">'age &gt; 20'</span></span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">'delete from &#123;table&#125; where &#123;condition&#125;'</span>.format(table=table, condition=condition)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    print(<span class="string">'Successful'</span>)</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h5 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">'select * from students where age &gt;= 20'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    print(<span class="string">'Count:'</span>, cursor.rowcount)</span><br><span class="line">    one = cursor.fetchone()</span><br><span class="line">    print(<span class="string">'One:'</span>, one)</span><br><span class="line">    results = cursor.fetchall()</span><br><span class="line">    print(<span class="string">'Results:'</span>, results)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure><p>推荐逐条取数据:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">'select * from students where age &gt;= 20'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    print(<span class="string">'Count:'</span>, cursor.rowcount)</span><br><span class="line">    row = cursor.fetchone()</span><br><span class="line">    <span class="keyword">while</span> row:</span><br><span class="line">        print(<span class="string">'Row:'</span>, row)</span><br><span class="line">        row = cursor.fetchone()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure><p>利用内部的指针偏移获取查询结果。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象进阶</title>
      <link href="2019/09/16/Object_Oriented_Adv/object-oriented-adv/"/>
      <url>2019/09/16/Object_Oriented_Adv/object-oriented-adv/</url>
      
        <content type="html"><![CDATA[<h4 id="面向对象进阶"><a href="#面向对象进阶" class="headerlink" title="面向对象进阶"></a>面向对象进阶</h4><blockquote><p>类的继承、多态、抽象类与接口的具体使用。</p></blockquote><a id="more"></a><h5 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h5><blockquote><p>继承是面向对象的第二大特征，而继承性要解决的问题就是代码的重用问题，利用继承性可以从已有的类继续派生出新的子类，也可以利用子类扩展出更多的操作功能。</p></blockquote><p>继承是为了增强代码的复用性，扩充类的功能，具体实现为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>子类又被称为派生类</p></li><li><p>父类又被称为超类</p></li></ul><h6 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h6><p>父类：<code>Person</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类：<code>Student</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer sid;</span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSid</span><span class="params">(Integer sid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSchool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(String school)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用： <code>Main</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setName(<span class="string">"Akashi"</span>);</span><br><span class="line">        student.setAge(<span class="number">22</span>);</span><br><span class="line">        student.setSchool(<span class="string">"SMU"</span>);</span><br><span class="line">        student.setSid(<span class="number">123456</span>);</span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + student.getName() + <span class="string">" age: "</span> + student.getAge() + <span class="string">" school: "</span> + student.getSchool() + <span class="string">" sid: "</span> + student.getSid());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类实际上是将父类定义得更加具体化的一种手段。</p><h6 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h6><p>虽然继承可以进行类功能的扩充，但是其在定义的时候也会存在若干限制：</p><ul><li><code>Java</code> 不允许多继承，但是允许多层继承</li></ul><p>虽然可以多层继承，但是从实际开发角度讲，类之间的继承最多不要超过三层，太多继承关系会让类过于复杂。</p><ul><li>子类在继承父类的时候，严格上来讲会继承父类中的全部操作，但是对于所有的私有操作属于隐式继承，而所有的非私有操作属于显式继承。</li></ul><p>隐式继承即只可以利用 <code>setter</code> 和 <code>getter</code> 方法间接的访问私有属性，子类也并不可以直接访问父类的私有属性。</p><ul><li>在子类对象构造前一定会默认调用父类的构造(默认使用无参构造)，以保证父类的对象先实例化，子类的对象后实例化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A类的构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B类的构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A类的构造方法</span><br><span class="line">B类的构造方法</span><br></pre></td></tr></table></figure><h5 id="覆写"><a href="#覆写" class="headerlink" title="覆写"></a>覆写</h5><blockquote><p>继承性的主要特征是子类可以根据父类已有的功能进行功能的扩展，但是在子类定义属性或方法时，有可能出现定义的属性或方法与父类同名的情况，这样的操作被称为覆写。</p></blockquote><p>当子类定义了和父类的方法名称、返回值类型、参数类型及个数完全相同的方法时，就称为方法的覆写。</p><h6 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A类中的func方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B类中的func方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        b.func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B类中的func方法</span><br></pre></td></tr></table></figure><h6 id="覆写的执行问题"><a href="#覆写的执行问题" class="headerlink" title="覆写的执行问题"></a>覆写的执行问题</h6><ul><li><p>观察实例化的是那一个类</p></li><li><p>观察这个实例化的类里面调用的方法是否已经被覆写过，如果没有覆写过则调用父类的方法</p></li></ul><p>注意：父类方法中使用 <code>private</code> 声明的方法是无法被外部看见的，也是不能被覆写的。</p><h5 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a><code>final</code> 关键字</h5><ul><li><p>使用 <code>final</code> 定义的类不能再有子类，即：任何类都不能继承以 <code>final</code> 声明的父类。</p></li><li><p>使用 <code>final</code>定义的方法不能被子类所覆写。</p></li></ul><h5 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h5><ul><li><p>方法的多态性</p><ul><li>重载：同一个方法名称，根据不同的参数类型及个数可以完成不同的功能</li><li>覆写：同一个方法，根据实例化的子类不同，所完成的功能也不同</li></ul></li><li><p>对象的多态性</p><ul><li>向上转型：子类对象变为父类对象，格式：<code>父类 父类对象 = 子类实例</code>(自动转换)</li><li>向下转型：父类对象变为子类对象，格式：<code>子类 子类对象 = (子类)父类实例</code>(强制转换)</li></ul></li></ul><h6 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h6><p>向下转型(自动完成)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> B();</span><br><span class="line">        a.func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B类中的func方法</span><br></pre></td></tr></table></figure><p>判断最终的输出，要看是实例化的那一个类。这里实例化的是 <code>B</code> (<code>new B()</code>)</p><p>向上转型(强制转换)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> B();</span><br><span class="line">        B b = (B)a;</span><br><span class="line">        b.func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先向上转型，再强制向下转型，同样输出 <code>B类中的func方法</code>，在强制向下转型时是有条件的，必须先向上转型，不然会抛出类型转换异常 <code>ClassCastException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> B();</span><br><span class="line">        a.func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向下转型是会存在安全隐患的，开发中应尽量避免此操作。</p><h6 id="转型意义"><a href="#转型意义" class="headerlink" title="转型意义"></a>转型意义</h6><p>在实际开发中，对象向上转型的主要意义在于参数的统一，也是最为主要的用法。</p><p>而对象的向下转型指的是调用子类的个性化操作方法。</p><h5 id="抽象性"><a href="#抽象性" class="headerlink" title="抽象性"></a>抽象性</h5><blockquote><p>利用抽象类可以明确定义子类需要覆写的方法。</p></blockquote><p>普通类可以直接产生实例化对象，并且在普通类中可以包含构造方法、普通方法、<code>static</code> 方法、常量、变量等内容。而抽象类就是指在普通类里面增加了抽象方法的组成部分，抽象方法指的是没有方法体的方法，同时抽象方法还必须使用 <code>abstract</code> 定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A类中的func方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="抽象类不能直接实例化对象"><a href="#抽象类不能直接实例化对象" class="headerlink" title="抽象类不能直接实例化对象"></a>抽象类不能直接实例化对象</h6><ul><li><p>抽象类必须有子类，即每一个抽象类一定要被子类所继承(使用<code>extends</code>)，但同样的因为单继承的原因，一个子类只能继承一个抽象类，这个问题会在之后的接口中提出解决办法。</p></li><li><p>抽象类的子类必须覆写抽象类中的全部抽象方法。</p></li><li><p>依靠对象的向上转型概念，可以通过抽象类的子类完成抽象类的实例化对象操作。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B类中的func方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"覆写父类的抽象方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        b.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="抽象类的相关限制"><a href="#抽象类的相关限制" class="headerlink" title="抽象类的相关限制"></a>抽象类的相关限制</h6><ul><li><p>抽象类里面会存在一些属性，那么在抽象类里面一定会存在构造方法，目的是为了属性的初始化，并且子类对象实例化时依然满足先执行父类构造再调用子类构造的情况。</p></li><li><p>抽象类不能使用 <code>final</code> 定义，因为抽象类必须有子类，而 <code>final</code> 定义的类不能有子类。</p></li><li><p>抽象类中可以没有任何抽象方法，但是只要有抽象类，就不能直接使用关键字 <code>new</code> 实例化对象。</p></li></ul><h6 id="抽象类应用-——-模板设计模式"><a href="#抽象类应用-——-模板设计模式" class="headerlink" title="抽象类应用 —— 模板设计模式"></a>抽象类应用 <code>——</code> 模板设计模式</h6><p>抽象类的最主要特点相当于制约了子类必须覆写的方法，同时抽象类中也可以定义普通方法，而且最为关键的是，这些普通方法定义在抽象类时，可以直接调用类中定义的抽象方法，但是具体的抽象方法内容就必须由子类来提供。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"覆写父类的抽象方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> B();</span><br><span class="line">        a.getPrint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><blockquote><p>利用抽象类可以实现对子类覆写方法的控制，但是抽象类的子类存在单继承限制，所以需要 <code>Java</code> 的接口来解决。同时，在开发中为了将具体的代码的实现细节对调用者隐藏，也可以利用接口来进行方法视图的描述。</p></blockquote><h6 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>接口必须要有子类，但是此时一个子类可以使用 <code>implements</code> 关键字实现多个接口，避免单继承局限。</p></li><li><p>接口的子类(如果不是抽象类)，必须要覆写接口中的全部抽象方法。</p></li><li><p>接口的对象可以利用子类对象的向上转型进行实例化操作。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A接口的抽象方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> B();</span><br><span class="line">        a.func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="接口的应用-——-工厂设计模式-Factory"><a href="#接口的应用-——-工厂设计模式-Factory" class="headerlink" title="接口的应用 —— 工厂设计模式(Factory)"></a>接口的应用 <code>——</code> 工厂设计模式(<code>Factory</code>)</h6><p>一个良好的代码编写风格要求遵从于以下两个标准：</p><ul><li><p>客户端(示例中的主方法)调用简单，不需要关注具体的细节。</p></li><li><p>程序代码的修改，不影响客服端的调用，即：使用者可以不去关心代码是否变更。</p></li></ul><p>我们来看以下的一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eating apple."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fruit fruit = <span class="keyword">new</span> Apple();</span><br><span class="line">        fruit.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时我们再添加一个新的子类，想要调用新的子类就需要去修改实例化接口的子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">implements</span> <span class="title">Fruit</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eating orange."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fruit fruit = <span class="keyword">new</span> Orange();</span><br><span class="line">        fruit.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法是不推荐的，为了解决耦合，需要引入工厂模式的概念，即想办法让客户端只看见接口，而不让其看见子类，这时需要一个中间的工具类来取得接口对象。</p><p>这样客户端就不用再关心接口的子类，只要通过 <code>Facroty</code> (工厂类)就可取得接口对象。</p><p>增加一个工厂类进行过渡：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getInstance</span><span class="params">(String fruit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"apple"</span>.equals(fruit)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"orange"</span>.equals(fruit)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Orange();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fruit fruit = Factory.getInstance(<span class="string">"orange"</span>);</span><br><span class="line">        fruit.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改写后，客户端的操作上取消了 <code>new</code> 关键字的使用，而使用 <code>Factory.getInstance()</code> 方法根据指定的子类的标记取得接口实例化对象，这时客户端不再需要关注具体的子类，也不需要关注 <code>Factory</code> 类是怎样处理的，只需要关注如何获取接口对象并操作。</p><p>这样的设计在开发中就称为工厂设计模式。</p><h6 id="接口的应用-——-代理设计模式-Proxy"><a href="#接口的应用-——-代理设计模式-Proxy" class="headerlink" title="接口的应用 —— 代理设计模式(Proxy)"></a>接口的应用 <code>——</code> 代理设计模式(<code>Proxy</code>)</h6><p>代理设计就是指一个代理主题来操作真实主题，真实主题执行具体的业务操作，而代理主题负责其他相关业务的处理。</p><p>就好比代理上网，客户通过网络代理连接网络，由代理服务器完成用户权限、访问限制等与上网操作相关的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Network</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">browse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Network</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Network network;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Network network)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.network = network;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"检查用户是否合法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">browse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.check();</span><br><span class="line">        <span class="keyword">this</span>.network.browse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Real</span> <span class="keyword">implements</span> <span class="title">Network</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">browse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"上网浏览信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Network network = <span class="keyword">null</span>;</span><br><span class="line">        network = <span class="keyword">new</span> Proxy(<span class="keyword">new</span> Real());</span><br><span class="line">        network.browse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="抽象类与接口的区别"><a href="#抽象类与接口的区别" class="headerlink" title="抽象类与接口的区别"></a>抽象类与接口的区别</h5><p>比较：</p><table><thead><tr><th>区别</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>关键字</td><td><code>abstract class</code></td><td><code>interface</code></td></tr><tr><td>组成</td><td>构造方法、普通方法、抽象方法、<code>static</code> 方法、常量、变量</td><td>抽象方法、全局常量</td></tr><tr><td>子类使用</td><td><code>class 子类 extends 抽象类</code></td><td><code>class 子类 implements 接口, 接口...</code></td></tr><tr><td>关系</td><td>抽象类可以实现多个接口</td><td>接口不能继承抽象类，却可以继承多个父接口</td></tr><tr><td>权限</td><td>可以使用各种权限</td><td>只能使用 <code>public</code> 权限</td></tr><tr><td>限制</td><td>单继承局限</td><td>没有单继承局限</td></tr></tbody></table><p>相同：</p><p>子类：抽象类和子类都必须有子类，子类必须覆写全部的抽象方法<br>实例化对象：依靠子类对象的向上转型进行对象的实例化</p><p>建议；</p><ul><li><p>在进行某些公共操作时一定要定义出接口</p></li><li><p>有了接口就需要利用子类完善方法</p></li><li><p>如果是自己写的方法，那么绝对不要使用关键字 <code>new</code> 直接实例化接口子类，应该使用工厂类完成</p></li><li><p>接口是在类之上的标准，接口比类更加灵活，在考虑用什么实现时，优先考虑接口</p></li></ul><h5 id="Object-类"><a href="#Object-类" class="headerlink" title="Object 类"></a><code>Object</code> 类</h5><p><code>Object</code> 类是所有类的父类，也就是说任何一个类在定义时如果没有明确地继承一个父类，那么它就是 <code>Object</code> 的子类。</p><ul><li><code>Object</code> 类的 <code>3</code> 个覆写方法</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>public String toString()</code></td><td>取得对象信息</td></tr><tr><td><code>public Boolean equals(Object obj)</code></td><td>对象比较</td></tr><tr><td><code>public int hashCode()</code></td><td>取得对象哈希码</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="2019/09/14/Object_Oriented/object-oriented/"/>
      <url>2019/09/14/Object_Oriented/object-oriented/</url>
      
        <content type="html"><![CDATA[<h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><blockquote><p>定义简单 <code>Java</code> 类，<code>static</code> 与 <code>this</code> 的理解。</p></blockquote><a id="more"></a><h5 id="简单-Java-类"><a href="#简单-Java-类" class="headerlink" title="简单 Java 类"></a>简单 <code>Java</code> 类</h5><p>基本要求：</p><ol><li><p>类名称必须存在意义</p></li><li><p>类中的所有属性必须 <code>private</code> 封装，封装之后的属性必须提供 <code>setter</code>、<code>getter</code></p></li><li><p>类中可以提供任意多个构造方法，但是必须保留一个无参构造方法</p></li><li><p>类中不允许出现任何输出语句，所有信息输出必须交给被调用处输出</p></li><li><p>类中需要提供一个可以取得对象完整信息的方法，一般叫做 <code>getInfo()</code>，返回 <code>String</code> 型数据</p></li></ol><ul><li>创建 <code>Emp</code> 类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> empno;          <span class="comment">// 编号</span></span><br><span class="line">    <span class="keyword">private</span> String ename;       <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String job;         <span class="comment">// 职位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> sal;         <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> comm;        <span class="comment">// 奖金</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个无参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(<span class="keyword">int</span> empno, String ename, String job, <span class="keyword">double</span> sal, <span class="keyword">double</span> comm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">        <span class="keyword">this</span>.comm = comm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(<span class="keyword">int</span> empno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(<span class="keyword">double</span> sal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getComm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> comm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComm</span><span class="params">(<span class="keyword">double</span> comm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comm = comm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">"empno: "</span> + empno + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">"ename: "</span> + ename + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">"job: "</span> + job + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">"sal: "</span> + sal + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">"comm: "</span> + comm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Emp emp = <span class="keyword">new</span> Emp(<span class="number">7936</span>, <span class="string">"akashi"</span>, <span class="string">"Engineer"</span>, <span class="number">5000</span>, <span class="number">3000</span>);</span><br><span class="line">        System.out.println(emp.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><blockquote><p>数组属于引用类型，所以在数组的操作过程中，以有内存分配问题。</p></blockquote><ul><li>声明并开辟数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名称 [] = <span class="keyword">new</span> 数据类型 [长度];</span><br><span class="line">数据类型 [] 数组名称 = <span class="keyword">new</span> 数据类型 [长度];</span><br></pre></td></tr></table></figure><ul><li>分步完成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据类型 [] 数组名称 = <span class="keyword">null</span>;    <span class="comment">// 声明</span></span><br><span class="line">数组名称 = <span class="keyword">new</span> 数据类型 [长度]; <span class="comment">// 开辟空间</span></span><br></pre></td></tr></table></figure><p>内存分配中和对象保存唯一的区别在于：对象中的堆内存是保存属性，而数组中的堆内存保存的是一组信息。</p><p>数组长度不允许改变，所以使用时需注意数组越界。</p><p>不能使用未开辟空间的数组。</p><ul><li>初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据类型 [] 数组名称 = &#123;value, value, ....&#125;;</span><br><span class="line">数据类型 [] 数组名称 = <span class="keyword">new</span> 数据类型 [] &#123;value, value, ....&#125;;</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] data = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><h6 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] data = <span class="keyword">new</span> <span class="keyword">int</span>[][] &#123;</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; data[i].length; j++) &#123;</span><br><span class="line">                System.out.print(data[i][j] + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从二维数组开始其实就进入了一个多维数组的概念范畴，一维数组表示一行数据，二维数组描述一张表的数据，三维数据就可以描述一个三维图形的结构，也就是说数组维度越多概念越复杂。在开发中只有很少的情况会涉及多维开发，尽量使用一维数组来进行简洁高效的开发。</p><h6 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h6><ul><li>数组冒泡排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j] &gt; array[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp =array[j];</span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        show(array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : array) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">63</span>, <span class="number">8</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        BubbleSort sorter = <span class="keyword">new</span> BubbleSort();</span><br><span class="line">        sorter.sort(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数组转置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reverse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = array.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N/<span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = array[i];</span><br><span class="line">            array[i] = array[N-<span class="number">1</span>-i];</span><br><span class="line">            array[N-<span class="number">1</span>-i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        show(array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : array) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        Reverse sorter = <span class="keyword">new</span> Reverse();</span><br><span class="line">        sorter.reverse(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h6><p>数组是引用类型，而类也是引用类型，如果是对象数组的话表示一个引用类型里面嵌套其他的引用类型。</p><ul><li>对象数组动态初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名称 [] 对象数组名称 = <span class="keyword">new</span> 类名称 [长度];</span><br></pre></td></tr></table></figure><ul><li>对象数组的静态初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名称 [] 对象数组名称 = <span class="keyword">new</span> 类名称[] &#123;实例化对象, 实例化对象,....&#125;;</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Book[] books = <span class="keyword">new</span> Book[] &#123;</span><br><span class="line">            <span class="keyword">new</span> Book(<span class="string">"Java"</span>), <span class="keyword">new</span> Book(<span class="string">"Python"</span>), <span class="keyword">new</span> Book(<span class="string">"JavaScript"</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; books.length; i++) &#123;</span><br><span class="line">        books[i].getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="String-类的基本概念"><a href="#String-类的基本概念" class="headerlink" title="String 类的基本概念"></a><code>String</code> 类的基本概念</h5><blockquote><p><code>String</code> 是字符串的描述类型，虽然 <code>String</code> 本身不属于引用数据类型，但是可以像基本数据类型那要直接赋值，是一个特殊的类。</p></blockquote><h6 id="常用-API"><a href="#常用-API" class="headerlink" title="常用 API"></a>常用 <code>API</code></h6><table><thead><tr><th><code>public class String</code></th><th></th><th></th></tr></thead><tbody><tr><td></td><td><code>String()</code></td><td>创建一个空字符串</td></tr><tr><td><code>int</code></td><td><code>length()</code></td><td>获取字符串长度</td></tr><tr><td><code>int</code></td><td><code>charAt(int i)</code></td><td>获取第 <code>i</code> 个字符 </td></tr><tr><td><code>int</code></td><td><code>indexOf(String p)</code></td><td>获取 <code>p</code> 第一次出现的位置(没有则返回 <code>-1</code>)</td></tr><tr><td><code>int</code></td><td><code>indexOf(String p, int i)</code></td><td>获取 <code>p</code> 在 <code>i</code> 个字符后第一次出现的位置(没有则返回 <code>-1</code>)</td></tr><tr><td><code>String</code></td><td><code>concat(String t)</code></td><td>将 <code>t</code> 附在该字符串末尾(字符串连接)</td></tr><tr><td><code>String</code></td><td><code>sbustring(int i, int j)</code></td><td>使用字符串的子字符串(第 <code>i</code> 个字符到第 <code>j-1</code> 个字符)</td></tr><tr><td><code>String[]</code></td><td><code>split(String delim)</code></td><td>使用 <code>delim</code> 分隔符切分字符串</td></tr><tr><td><code>int</code></td><td><code>compareTo(String t)</code></td><td>比较字符串</td></tr><tr><td><code>boolean</code></td><td><code>equals(String t)</code></td><td>该字符串的是和 <code>t</code> 的值是否相同</td></tr><tr><td><code>int</code></td><td><code>hashCode()</code></td><td>散列值</td></tr><tr><td><code>boolean</code></td><td><code>contains(String t)</code></td><td>判断字符串是否存在</td></tr><tr><td><code>String</code></td><td><code>trim()</code></td><td>去掉字符串两边空格</td></tr><tr><td><code>String</code></td><td><code>replaceAll(String t, String rep_t)</code></td><td>用新的内容替换全部旧的内容</td></tr></tbody></table><h5 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a><code>this</code> 关键字</h5><blockquote><p><code>this</code> 可以完成 <code>3</code> 中方法：调用本类属性，调用本类方法，表示当前对象。</p></blockquote><h6 id="调用本类属性"><a href="#调用本类属性" class="headerlink" title="调用本类属性"></a>调用本类属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里为类中的属性赋值，如果参数名与属性名相同，在 <code>Java</code> 里会采用 <code>就近取用</code> 的原则，若没有对属性进行 <code>this</code> 的指定，就不能标记为属性，函数会把形参里面的值赋给形参，就无法对属性赋值了。</p><p>用 <code>this</code> 表示本类的属性，与形参区分，在名称相同的情况下也可以明确定位并赋值。</p><h6 id="调用本类方法"><a href="#调用本类方法" class="headerlink" title="调用本类方法"></a>调用本类方法</h6><p><code>this</code> 本质上就是明确进行本类结构的标记，而除了访问类中的属性外，也可以进行类中的方法调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.show();</span><br><span class="line">        System.out.println(<span class="string">"图书名称："</span> + title + <span class="string">"，价格："</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this 调用本类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"new 了一个新对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"图书名称："</span> + title + <span class="string">"，价格："</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="表示当前对象"><a href="#表示当前对象" class="headerlink" title="表示当前对象"></a>表示当前对象</h6><p>当前对象就是指当前正在调用的类中的方法的实例化对象。</p><h5 id="数据表与-简单-Java-类映射"><a href="#数据表与-简单-Java-类映射" class="headerlink" title="数据表与 简单 Java 类映射"></a>数据表与 简单 <code>Java</code> 类映射</h5><blockquote><p>简单 <code>Java</code> 类在实际的开发中都是根据其数据表的定义来实现的。</p></blockquote><p>下面我们需要实现主表与部门表的对应关系，即：一个部门可以有多个员工</p><p>我们使用一个外键 <code>deptno</code> 进行关联。</p><p><code>Dept</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> deptno;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">private</span> String loction;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(<span class="keyword">int</span> deptno, String dname, String loction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">        <span class="keyword">this</span>.loction = loction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(<span class="keyword">int</span> deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLoction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoction</span><span class="params">(String loction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loction = loction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">"deptno = "</span> + deptno + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">"dname = "</span> + dname + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">"loction = "</span> + loction;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Emp</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> empno;          <span class="comment">// 编号</span></span><br><span class="line">    <span class="keyword">private</span> String ename;       <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String job;         <span class="comment">// 职位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> sal;         <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> comm;        <span class="comment">// 奖金</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> deptno;         <span class="comment">// 部门编号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个无参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(<span class="keyword">int</span> empno, String ename, String job, <span class="keyword">double</span> sal, <span class="keyword">double</span> comm, <span class="keyword">int</span> deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">        <span class="keyword">this</span>.comm = comm;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(<span class="keyword">int</span> empno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(<span class="keyword">double</span> sal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getComm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> comm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComm</span><span class="params">(<span class="keyword">double</span> comm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comm = comm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(<span class="keyword">int</span> deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">"empno: "</span> + empno + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">"ename: "</span> + ename + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">"job: "</span> + job + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">"sal: "</span> + sal + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">"comm: "</span> + comm + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">"deptno: "</span> + deptno;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Main</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Emp emp1 = <span class="keyword">new</span> Emp(<span class="number">7936</span>, <span class="string">"akashi"</span>, <span class="string">"Engineer"</span>, <span class="number">5000</span>, <span class="number">3000</span>, <span class="number">10</span>);</span><br><span class="line">        Emp emp2 = <span class="keyword">new</span> Emp(<span class="number">7937</span>, <span class="string">"asuka"</span>, <span class="string">"Engineer"</span>, <span class="number">5000</span>, <span class="number">3000</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        Dept dept = <span class="keyword">new</span> Dept(<span class="number">10</span>, <span class="string">"IT"</span>, <span class="string">"Chengdu"</span>);</span><br><span class="line">        emp2.setDeptno(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"========================="</span>);</span><br><span class="line">        System.out.println(emp1.getInfo());</span><br><span class="line">        System.out.println(<span class="string">"========================="</span>);</span><br><span class="line">        System.out.println(emp2.getInfo());</span><br><span class="line">        System.out.println(<span class="string">"========================="</span>);</span><br><span class="line">        System.out.println(dept.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a><code>static</code> 关键字</h5><blockquote><p><code>static</code> 关键字可以用于定义属性及方法。</p></blockquote><h6 id="static-定义属性"><a href="#static-定义属性" class="headerlink" title="static 定义属性"></a><code>static</code> 定义属性</h6><p>如果类中的属性希望定义为公共属性(所有对象都可以使用的属性)，则可以在声明属性前加上 <code>static</code> 关键字。</p><p><code>eg</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> String pub = <span class="string">"人民邮电出版社"</span>;</span><br></pre></td></tr></table></figure><p>既然 <code>static</code> 是一个公共属性的概念，那么如果只是简单的由一个对象去修改 <code>static</code> 的做法不是很适合，最好的做法是由类来进行访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Book.pub = <span class="string">"电子工业出版社"</span>;</span><br></pre></td></tr></table></figure><p><code>static</code> 属性与非 <code>static</code> 属性最大的一个区别，所有非 <code>static</code> 属性必须产生实例化对象才可以进行访问，但是 <code>static</code> 属性不受实例化对象的控制，在没有实例化对象产生的情况下，也可以使用 <code>static</code> 属性。</p><p>在实际的开发中， <code>static</code> 定义的属性出现几率并不是很高。</p><h6 id="static-定义方法"><a href="#static-定义方法" class="headerlink" title="static 定义方法"></a><code>static</code> 定义方法</h6><p>使用 <code>static</code> 定义的方法也可以在没有实例化对象的情况下由类名称直接进行调用。</p><ul><li><p><code>static</code> 方法不能直接访问非 <code>static</code> 属性或方法，只能调用 <code>static</code> 属性或方法。</p></li><li><p>非 <code>static</code> 方法可以访问 <code>static</code> 的属性和方法，不受任何限制。</p></li></ul><p>当一个类中没有属性产生，就没有必要开辟堆内存保存属性内容了，这时候就可以考虑类中的方法使用 <code>static</code> 进行声明。</p><h6 id="主方法"><a href="#主方法" class="headerlink" title="主方法"></a>主方法</h6><ul><li><code>public</code></li></ul><p>主方法是程序的入口，所以这个方法对任何操作都一定是可见的，所以就必须使用 <code>public</code></p><p><code>类修饰符</code></p><table><thead><tr><th>访问包位置</th><th><code>private</code></th><th><code>protected</code></th><th><code>public</code></th></tr></thead><tbody><tr><td>本类</td><td>可见</td><td>可见</td><td>可见</td></tr><tr><td>同包其他类或子类</td><td>不可见</td><td>可见</td><td>可见</td></tr><tr><td>其他包的类或子类</td><td>不可见</td><td>不可见</td><td>可见</td></tr></tbody></table><ul><li><code>static</code></li></ul><p>证明此方法是由类名称调用的</p><ul><li><code>void</code></li></ul><p>没有返回值</p><ul><li><code>main</code></li></ul><p>是一个系统规定好的方法名称，不能修改</p><ul><li><code>String[] args</code></li></ul><p>指的是程序运行时传递的参数</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>典型算法处理实现</title>
      <link href="2019/09/12/Algorithmic_Basis/basis/"/>
      <url>2019/09/12/Algorithmic_Basis/basis/</url>
      
        <content type="html"><![CDATA[<h4 id="典型算法处理实现"><a href="#典型算法处理实现" class="headerlink" title="典型算法处理实现"></a>典型算法处理实现</h4><blockquote><p>记录几个常见算法实现。</p></blockquote><a id="more"></a><h5 id="典型的数组处理"><a href="#典型的数组处理" class="headerlink" title="典型的数组处理"></a>典型的数组处理</h5><h6 id="找出数组中最大的元素"><a href="#找出数组中最大的元素" class="headerlink" title="找出数组中最大的元素"></a>找出数组中最大的元素</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Max</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span>[] list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> max = list[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list[i] &gt; max) &#123;</span><br><span class="line">                max = list[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span>[] list = <span class="keyword">new</span> <span class="keyword">double</span>[] &#123;<span class="number">1.2</span>, <span class="number">3.0</span>, <span class="number">5</span>, <span class="number">0.4</span>, <span class="number">9</span>, <span class="number">6.8</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        System.out.println(max(list));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="计算数组元素的平均值"><a href="#计算数组元素的平均值" class="headerlink" title="计算数组元素的平均值"></a>计算数组元素的平均值</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Avg</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">avg</span><span class="params">(<span class="keyword">double</span>[] list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = list.length;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            sum += list[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> average = sum / N;</span><br><span class="line">        <span class="keyword">return</span> average;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span>[] list = <span class="keyword">new</span> <span class="keyword">double</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">double</span> avg = avg(list);</span><br><span class="line">        System.out.println(avg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CopyArray</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] copy(<span class="keyword">int</span>[] list) &#123;</span><br><span class="line">        <span class="keyword">int</span> N = list.length;</span><br><span class="line">        <span class="keyword">int</span>[] list_new = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            list_new[i] = list[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list_new;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] list1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] list2 = copy(list1);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : list2) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="颠倒数组元素的顺序"><a href="#颠倒数组元素的顺序" class="headerlink" title="颠倒数组元素的顺序"></a>颠倒数组元素的顺序</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reverse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span>[] rev(<span class="keyword">double</span>[] list) &#123;</span><br><span class="line">        <span class="keyword">int</span> N = list.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">double</span> temp = list[i];</span><br><span class="line">            list[i] = list[N-<span class="number">1</span>-i];</span><br><span class="line">            list[N-<span class="number">1</span>-i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span>[] list = <span class="keyword">new</span> <span class="keyword">double</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">double</span>[] rev_list = rev(list);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rev_list.length; i++) &#123;</span><br><span class="line">            System.out.println(rev_list[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="矩阵相乘"><a href="#矩阵相乘" class="headerlink" title="矩阵相乘"></a>矩阵相乘</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MatrixMult</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span>[][] multip(<span class="keyword">double</span>[][] array1, <span class="keyword">double</span>[][] array2) &#123;</span><br><span class="line">        <span class="keyword">int</span> N = array1.length;</span><br><span class="line">        <span class="keyword">double</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">double</span>[N][N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; k++) &#123;</span><br><span class="line">                    matrix[i][j] += array1[i][k] * array2[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span>[][] array1 = <span class="keyword">new</span> <span class="keyword">double</span>[][] &#123;</span><br><span class="line">            &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">double</span>[][] array2 = <span class="keyword">new</span> <span class="keyword">double</span>[][] &#123;</span><br><span class="line">            &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">double</span>[][] matrix = multip(array1, array2);</span><br><span class="line">        <span class="keyword">int</span> M = array1.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">                System.out.println(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="典型的静态方法的实现"><a href="#典型的静态方法的实现" class="headerlink" title="典型的静态方法的实现"></a>典型的静态方法的实现</h5><h6 id="计算一个整数的绝对值"><a href="#计算一个整数的绝对值" class="headerlink" title="计算一个整数的绝对值"></a>计算一个整数的绝对值</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = -<span class="number">2</span>;</span><br><span class="line">        System.out.println(abs(x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="计算一个浮点数的绝对值"><a href="#计算一个浮点数的绝对值" class="headerlink" title="计算一个浮点数的绝对值"></a>计算一个浮点数的绝对值</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbsDouble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">abs</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x = -<span class="number">2.3</span>;</span><br><span class="line">        System.out.println(abs(x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="判定一个数是否是素数"><a href="#判定一个数是否是素数" class="headerlink" title="判定一个数是否是素数"></a>判定一个数是否是素数</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">123</span>;</span><br><span class="line">        System.out.println(isPrime(x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="计算平方根"><a href="#计算平方根" class="headerlink" title="计算平方根"></a>计算平方根</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sqrt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Double.NaN;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> err = <span class="number">1e-15</span>;</span><br><span class="line">        <span class="keyword">double</span> t = x;</span><br><span class="line">        <span class="keyword">while</span>(Math.abs(t - x / t) &gt; err * t) &#123;</span><br><span class="line">            t = (x / t + t) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x = <span class="number">9</span>;</span><br><span class="line">        System.out.println(sqrt(x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="计算直角三角形的斜边"><a href="#计算直角三角形的斜边" class="headerlink" title="计算直角三角形的斜边"></a>计算直角三角形的斜边</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hypotenuse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">hypotense</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(a * a + b * b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">double</span> y = <span class="number">4</span>;</span><br><span class="line">        System.out.println(hypotense(x,y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 基本概念</title>
      <link href="2019/09/11/basic-java/java-basic/"/>
      <url>2019/09/11/basic-java/java-basic/</url>
      
        <content type="html"><![CDATA[<h4 id="Java-基本概念"><a href="#Java-基本概念" class="headerlink" title="Java 基本概念"></a><code>Java</code> 基本概念</h4><blockquote><p>从 <code>Java</code> 语法开始，理解面向对象的基本概念。</p></blockquote><a id="more"></a><h5 id="数据类型划分"><a href="#数据类型划分" class="headerlink" title="数据类型划分"></a>数据类型划分</h5><ul><li>数据类型<ul><li>基本数据类型<ul><li>数值型<ul><li>整数类型(<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>)</li><li>浮点类型(<code>float</code>、<code>double</code>)</li></ul></li><li>字符型(<code>char</code>)</li><li>布尔型(<code>boolean</code>)</li></ul></li><li>引用数据类型<ul><li>类(<code>class</code>)</li><li>接口(<code>interface</code>)</li><li>数组(<code>[]</code>)</li></ul></li></ul></li></ul><h5 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h5><blockquote><p>方法也被称为函数，是一段可以重复调用的代码块。</p></blockquote><p>方法的主要功能是封装可执行的一段代码，这样不仅仅可以进行重复调用，更可以方便的实现代码的维护，定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public[权限修饰符] static[属性] 返回值类型[关键字] 方法名称(参数类型, 参数变量, ...) 抛出异常类型 &#123;</span><br><span class="line">    方法体 (本方法要执行的若干操作);</span><br><span class="line">    [return [返回值];]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h5><blockquote><p>方法重载是指方法名称相同，参数的类型不同或个数不同，调用的时候将会按照传递的参数类型和个数完成不同方法体的执行。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FuncOverload</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现两个整型类型的相加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现三个整型类型的相加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> z</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y + z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现两个小数类型的相加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"两个整型参数相加："</span> + add(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">        System.out.println(<span class="string">"三个整型参数相加："</span> + add(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line">        System.out.println(<span class="string">"两个浮点型参数相加："</span> + add(<span class="number">10.2</span>, <span class="number">20.3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法的递归调用"><a href="#方法的递归调用" class="headerlink" title="方法的递归调用"></a>方法的递归调用</h5><blockquote><p>递归调用是一种特殊的调用形式，指的是方法自己调用自己的形式。</p></blockquote><p>注意：在项目应用的开发中避免过多的使用递归，因为如果处理不当，就有可能出现内存溢出问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursiveCall</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现从 1 到 n 的累加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> num + sum(num - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(sum(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="面向对象程序设计的特性"><a href="#面向对象程序设计的特性" class="headerlink" title="面向对象程序设计的特性"></a>面向对象程序设计的特性</h5><h6 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h6><p>一层含义是指把对象的属性和行为看成一个密不可分的整体，将两者封装在一个不可分割的独立单位(即对象)中；</p><p>另一层含义指信息隐蔽，把不需要让外界知道的信息隐藏起来，有些对象的属性和行为允许外界知道或使用，但不允许更改，而另一些对象的属性及行为，则不允许外界知晓，或只允许使用对象的功能，而尽可能隐蔽对象的功能实现细节。</p><h6 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h6><p>继承性是指首先拥有反应事物一般性质的类，然后在其基础上派生出反应特殊事物的类。</p><p>面向对象程序设计的继承机制，大大增强了程序代码的可复用性，提高了软件开发的效率，降低了程序产生错误的可能，也为程序的修改扩展提供了便利。</p><p>若一个子类只允许继承一个父类，称为单继承；若允许继承多个父类，称为多继承。目前许多面向对象程序设计语言不支持多继承。<code>Java</code> 通过接口 <code>interface</code> 的方式弥补由于 <code>Java</code> 不支持多继承而带来的子类不能使用多个父类成员的缺憾。</p><h6 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h6><p>多态是指允许程序中出现重名现象。 <code>Java</code> 中含有方法重载和对象多态两种形式的多态。</p><ol><li><p>方法重载：在一个类中，允许多个方法使用同一个名字，但方法的参数不同，完成的功能也不同。</p></li><li><p>对象多态：子类对象可以与父类对象相互转换，而且根据其使用的子类不同完成不同的功能也不同。</p></li></ol><p>多态的特性使程序的抽象程度和简洁程度更高，有助于程序设计人员对程序的分组协同开发。</p><h5 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h5><h6 id="类与对象的基本定义"><a href="#类与对象的基本定义" class="headerlink" title="类与对象的基本定义"></a>类与对象的基本定义</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名称 </span>&#123;</span><br><span class="line">    数据类型 属性(变量);</span><br><span class="line"></span><br><span class="line">    权限修饰符 返回值的数据类型 方法名称 (形式参数列表) &#123;</span><br><span class="line">        执行语句;</span><br><span class="line">        [<span class="keyword">return</span> 返回值;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    String title;</span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printLn(<span class="string">"图书名称："</span> + title, <span class="string">"价格："</span> +price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类定义完成之后，需要使用还需要对象声明和实例化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名称 对象名称 = <span class="keyword">new</span> 类名称();</span><br></pre></td></tr></table></figure><p>分步完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名称 对象名称 = <span class="keyword">null</span>;     <span class="comment">// 声明对象</span></span><br><span class="line">对象名称 = <span class="keyword">new</span> 类名称();    <span class="comment">// 实例化对象</span></span><br></pre></td></tr></table></figure><p>因为类属于引用数据类型，而引用数据类型和基本数据类型最大的不同就在于需要内存的开辟及使用，关键字 <code>new</code> 的主要功能就是开辟内存空间，只要使用引用数据类型，就必须使用 <code>new</code> 关键字来开辟空间。</p><p>对象实例化后可进行的操作：</p><p>对象.属性： 表示操作类中的属性的内容；<br>对象.方法()： 表示调用类中的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.title = <span class="string">"Java"</span>;</span><br><span class="line">        book.price = <span class="number">89.0</span>;</span><br><span class="line">        book.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="引用数据的初步分析"><a href="#引用数据的初步分析" class="headerlink" title="引用数据的初步分析"></a>引用数据的初步分析</h6><p>引用传递是整个 <code>Java</code> 中的精髓所在，而引用传递的核心概念也只有一点：一块堆内存空间(保存对象的属性信息)可以同时被多个栈内存共同指向，则每一个栈内存都可以修改同一块堆内存空间的属性值。</p><ul><li><p>堆内存(<code>heap</code>)：保存每一个对象的属性内容，堆内存需要用关键字 <code>new</code> 才可以开辟，如果一个对象没有对应的堆内存指向，将无法使用。</p></li><li><p>栈内存(<code>stack</code>)：保存的是一块堆内存的地址数值，每一块栈内存只能保存一块堆内存地址。</p></li></ul><p>对象引用传递：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Book book1 = <span class="keyword">new</span> Book();</span><br><span class="line">        book1.title = <span class="string">"Java"</span>;</span><br><span class="line">        book1.price = <span class="number">89.0</span>;</span><br><span class="line"></span><br><span class="line">        Book book2 = <span class="keyword">new</span> Book();</span><br><span class="line">        book2 = book1;</span><br><span class="line">        book2.price = <span class="number">69.8</span>;</span><br><span class="line"></span><br><span class="line">        book1.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里打印 <code>book1</code> 的结果，价格变成了 <code>69.8</code>，这就是两个不同的栈内存指向了同一块堆内存空间(引用传递)，所以当 <code>book2</code> 修改属性内容时，会直接影响 <code>book1</code>对象的内容。</p><p>我们还可以发现，我们开始为 <code>book2</code> <code>new</code> 了一个内存空间，但是没有使用，而是使用引用传递(<code>book2 = book1</code>)，这样原本 <code>book2</code> 的内存空间没有任何指向，就会成为垃圾空间。</p><p>所有的垃圾会不定期的被垃圾收集器(<code>Garbage Collector</code>)回收，回收后会被释放掉其所占用的空间。</p><h5 id="封装性初步分析"><a href="#封装性初步分析" class="headerlink" title="封装性初步分析"></a>封装性初步分析</h5><p>需要让用户看不见操作的东西，就需要使用 <code>private</code> 关键字进行封装，将类中的属性进行私有化操作。</p><p><code>Book.java</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"图书名称："</span> + title + <span class="string">"，价格："</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Main.java</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.title = <span class="string">"Java"</span>;</span><br><span class="line">        book.pirce = <span class="number">89.9</span>;</span><br><span class="line">        book.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样运行项目是会报错的，在声明了 <code>private</code> 关键字之后，属性只能在 <code>Book</code> 类中被访问，就不可以对属性进行直接调用了，所以主类需要使用，就需要定义 <code>setter</code>、<code>getter</code> 方法。</p><p>下面改写 <code>Book</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"图书名称："</span> + title + <span class="string">"，价格："</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>Main</code> 中调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setTitle(<span class="string">"Java"</span>);</span><br><span class="line">        book.setPrice(<span class="number">89.9</span>);</span><br><span class="line">        book.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><p>如果实例化新的对象，需要使用关键字 <code>new</code> 来完成，但是除了 <code>new</code> 这个关键字之外，还有可能在对象实例化时为其进行一些初始化操作，直观时候就需要构造方法的支持。</p><p>构造方法是一种特殊的方法，它只在新对象实例化的时候调用，其定义原则是：方法名称与类名称相同，没有返回类型声明，同时构造方法也可以进行重载。</p><p>与普通方法的区别：</p><ul><li><p>构造方法是在实例化新对象(<code>new</code>)的时候只调用一次；</p></li><li><p>普通方法是在实例化对象产生之后，通过 <code>Object.function</code> 的方式多次调用。</p></li></ul><p>利用构造方法为属性赋值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"图书名称："</span> + title + <span class="string">"，价格："</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Main</code> 调用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book(<span class="string">"Java"</span>, <span class="number">89.8</span>);</span><br><span class="line">        book.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法重载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"图书名称："</span> + title + <span class="string">"，价格："</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在方法被我们重载了 <code>3</code> 次，我们可传入不同的形参：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book(<span class="string">"Java"</span>, <span class="number">89.8</span>);</span><br><span class="line">        book.getInfo();</span><br><span class="line">        Book book1 = <span class="keyword">new</span> Book(<span class="string">"Python"</span>);</span><br><span class="line">        book1.getInfo();</span><br><span class="line">        Book book2 = <span class="keyword">new</span> Book();</span><br><span class="line">        book2.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FlH5UJS2ItY-VJKCOGwGckSx6a1V" alt="方法重载"></p><h5 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h5><p>按之前的内存关系来讲，对象的名字可以解释为在栈内存中保存，而对象的具体内容(属性)在堆内存中保存，这样一来，没有栈内存指向堆内存空间，就是一个匿名对象。</p><ul><li>匿名对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Book(<span class="string">"Java"</span>, <span class="number">89.9</span>).getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过匿名对象调用了类中的方法，但由于匿名对象没有对应的栈内存指向，所以只能使用一次，一次之后就将成为垃圾，并且等待被 <code>GC</code> 回收释放。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib 数据可视化</title>
      <link href="2019/09/07/python_matplotlib/matplotlib/"/>
      <url>2019/09/07/python_matplotlib/matplotlib/</url>
      
        <content type="html"><![CDATA[<h4 id="matplotlib-数据可视化"><a href="#matplotlib-数据可视化" class="headerlink" title="matplotlib 数据可视化"></a><code>matplotlib</code> 数据可视化</h4><blockquote><p>使用 <code>Python</code> 的数学绘图库工具 <code>matplotlib</code> 生成图表。</p></blockquote><a id="more"></a><h5 id="安装-matplotlib"><a href="#安装-matplotlib" class="headerlink" title="安装 matplotlib"></a>安装 <code>matplotlib</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install matplotlib</span><br></pre></td></tr></table></figure><h5 id="绘制简单的折线图"><a href="#绘制简单的折线图" class="headerlink" title="绘制简单的折线图"></a>绘制简单的折线图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">squates = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line">pyplot.plot(squates)</span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FisBWQcbLkZSqA9JNhsjP9gd932i" alt="pyplot"></p><h6 id="修改标签文字和线条粗细"><a href="#修改标签文字和线条粗细" class="headerlink" title="修改标签文字和线条粗细"></a>修改标签文字和线条粗细</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">squates = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line">pyplot.plot(squates, linewidth=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题，并给坐标轴加上标签</span></span><br><span class="line">pyplot.title(<span class="string">'Square Numbers'</span>, fontsize=<span class="number">17</span>)</span><br><span class="line">pyplot.xlabel(<span class="string">'Value'</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">pyplot.ylabel(<span class="string">'Square of Value'</span>,fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置刻度标记的大小</span></span><br><span class="line">pyplot.tick_params(axis=<span class="string">'both'</span>, labelsize=<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FsZWlxb-OrPD3ypakWDyno_W3Sef" alt="pyplot-2"></p><h6 id="校正图形"><a href="#校正图形" class="headerlink" title="校正图形"></a>校正图形</h6><p>我们发现向 <code>plot()</code> 提供一系列数字时，它假设第一个数据点对应的 <code>x</code> 轴的值为 <code>0</code>，但是我们的第一个值为 <code>1</code>，我们需要同时提供输入值和输出值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">squates = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line">input_values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">pyplot.plot(input_values, squates, linewidth=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题，并给坐标轴加上标签</span></span><br><span class="line">pyplot.title(<span class="string">'Square Numbers'</span>, fontsize=<span class="number">17</span>)</span><br><span class="line">pyplot.xlabel(<span class="string">'Value'</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">pyplot.ylabel(<span class="string">'Square of Value'</span>,fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置刻度标记的大小</span></span><br><span class="line">pyplot.tick_params(axis=<span class="string">'both'</span>, labelsize=<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FtGOe9qkN4jknnpLnPIEUf-9Ym20" alt="pyplot-3"></p><h6 id="使用-scatter-绘制散点图并设置其样式"><a href="#使用-scatter-绘制散点图并设置其样式" class="headerlink" title="使用 scatter() 绘制散点图并设置其样式"></a>使用 <code>scatter()</code> 绘制散点图并设置其样式</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pyplot.scatter(<span class="number">2</span>, <span class="number">4</span>, s=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题，并给坐标轴加上标签</span></span><br><span class="line">pyplot.title(<span class="string">'Square Numbers'</span>, fontsize=<span class="number">17</span>)</span><br><span class="line">pyplot.xlabel(<span class="string">'Value'</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">pyplot.ylabel(<span class="string">'Square of Value'</span>,fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置刻度标记的大小</span></span><br><span class="line">pyplot.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'major'</span>, labelsize=<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><h6 id="绘制一系列点"><a href="#绘制一系列点" class="headerlink" title="绘制一系列点"></a>绘制一系列点</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x_values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y_values = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line">pyplot.scatter(x_values, y_values, s=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题，并给坐标轴加上标签</span></span><br><span class="line">pyplot.title(<span class="string">'Square Numbers'</span>, fontsize=<span class="number">17</span>)</span><br><span class="line">pyplot.xlabel(<span class="string">'Value'</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">pyplot.ylabel(<span class="string">'Square of Value'</span>,fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置刻度标记的大小</span></span><br><span class="line">pyplot.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'major'</span>, labelsize=<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fjuyzu9QkCJlzF5CWeU6jMzSJPuU" alt="scatter"></p><h6 id="自动计算数据"><a href="#自动计算数据" class="headerlink" title="自动计算数据"></a>自动计算数据</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x_values = list(range(<span class="number">1</span>, <span class="number">1001</span>))</span><br><span class="line">y_values = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> x_values]</span><br><span class="line">pyplot.scatter(x_values, y_values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题，并给坐标轴加上标签</span></span><br><span class="line">pyplot.title(<span class="string">'Square Numbers'</span>, fontsize=<span class="number">17</span>)</span><br><span class="line">pyplot.xlabel(<span class="string">'Value'</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">pyplot.ylabel(<span class="string">'Square of Value'</span>,fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置刻度标记的大小</span></span><br><span class="line">pyplot.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'major'</span>, labelsize=<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置每个坐标轴的取值范围</span></span><br><span class="line">pyplot.axis([<span class="number">0</span>, <span class="number">1100</span>, <span class="number">0</span>, <span class="number">1100000</span>])</span><br><span class="line"></span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FgMkMeqMp_DHf56fKHVfasdQc7Ry" alt="自动计算"></p><h6 id="删除数据点轮廓"><a href="#删除数据点轮廓" class="headerlink" title="删除数据点轮廓"></a>删除数据点轮廓</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyplot.scatter(x_values, y_values, edgecolors=<span class="string">'none'</span>, s=<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h6 id="自定义颜色"><a href="#自定义颜色" class="headerlink" title="自定义颜色"></a>自定义颜色</h6><p>向 <code>scatter()</code> 传递参数 <code>c</code> 设置颜色的名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyplot.scatter(x_values, y_values, c=<span class="string">'red'</span>, edgecolors=<span class="string">'none'</span>, s=<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p><code>RGBA</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyplot.scatter(x_values, y_values, c=(<span class="number">0.8</span>, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.4</span>), edgecolors=<span class="string">'none'</span>, s=<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h6 id="使用颜色映射"><a href="#使用颜色映射" class="headerlink" title="使用颜色映射"></a>使用颜色映射</h6><p>示例通过 <code>y</code> 的值设置颜色：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x_values = list(range(<span class="number">1</span>, <span class="number">1001</span>))</span><br><span class="line">y_values = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> x_values]</span><br><span class="line">pyplot.scatter(x_values, y_values, c=y_values, cmap=pyplot.cm.Blues, edgecolors=<span class="string">'none'</span>, s=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题，并给坐标轴加上标签</span></span><br><span class="line">pyplot.title(<span class="string">'Square Numbers'</span>, fontsize=<span class="number">17</span>)</span><br><span class="line">pyplot.xlabel(<span class="string">'Value'</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">pyplot.ylabel(<span class="string">'Square of Value'</span>,fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置刻度标记的大小</span></span><br><span class="line">pyplot.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'major'</span>, labelsize=<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置每个坐标轴的取值范围</span></span><br><span class="line">pyplot.axis([<span class="number">0</span>, <span class="number">1100</span>, <span class="number">0</span>, <span class="number">1100000</span>])</span><br><span class="line"></span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FnRQMzlsYi43OsFqr5fzvk8uNtMu" alt="color"></p><h6 id="自动保存图表"><a href="#自动保存图表" class="headerlink" title="自动保存图表"></a>自动保存图表</h6><p>要让程序自动将图表保存到文件中，可以将 <code>pyplot.show()</code> 替换为 <code>pyplot.savefig()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyplot.savefig(<span class="string">'squares_plot.png'</span>, bbox_inches=<span class="string">'tight'</span>)</span><br></pre></td></tr></table></figure><h5 id="随机漫步"><a href="#随机漫步" class="headerlink" title="随机漫步"></a>随机漫步</h5><p>随机漫步每次行走都完全是随机的，没有明确的方向，结果是由一系列随机决策决定的。</p><h6 id="创建-RandomWalk-类"><a href="#创建-RandomWalk-类" class="headerlink" title="创建 RandomWalk() 类"></a>创建 <code>RandomWalk()</code> 类</h6><p>为模拟随机漫步，我们将创建一个 <code>RandomWalk</code> 类，它随机的选择前进方向。这个类需要三个属性，其中一个是存储随机漫步次数的变量，另外两个是列表，分别存储随机漫步经过的每个点的 <code>x</code> 和 <code>y</code> 坐标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWalk</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_points=<span class="number">5000</span>)</span>:</span></span><br><span class="line">        self.num_points = num_points</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从(0, 0)开始</span></span><br><span class="line">        self.x_values = [<span class="number">0</span>]</span><br><span class="line">        self.y_values = [<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h6 id="选择方向"><a href="#选择方向" class="headerlink" title="选择方向"></a>选择方向</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWalk</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_points=<span class="number">5000</span>)</span>:</span></span><br><span class="line">        self.num_points = num_points</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从(0, 0)开始</span></span><br><span class="line">        self.x_values = [<span class="number">0</span>]</span><br><span class="line">        self.y_values = [<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fill_walk</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 漫步直到指定长度</span></span><br><span class="line">        <span class="keyword">while</span> len(self.x_values) &lt; self.num_points:</span><br><span class="line">            <span class="comment"># 决定前进的方向及距离</span></span><br><span class="line">            x_direction = choice([<span class="number">1</span>, <span class="number">-1</span>])</span><br><span class="line">            x_distance = choice([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">            x_step = x_direction * x_distance</span><br><span class="line"></span><br><span class="line">            y_direction = choice([<span class="number">1</span>, <span class="number">-1</span>])</span><br><span class="line">            y_distance = choice([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">            y_step = y_direction * y_distance</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 拒绝原地踏步</span></span><br><span class="line">            <span class="keyword">if</span> x_step == <span class="number">0</span> <span class="keyword">and</span> y_step == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算下一个点的 x 和 y 的值</span></span><br><span class="line">            next_x = self.x_values[<span class="number">-1</span>] + x_step</span><br><span class="line">            next_y = self.y_values[<span class="number">-1</span>] + y_step</span><br><span class="line"></span><br><span class="line">            self.x_values.append(next_x)</span><br><span class="line">            self.y_values.append(next_y)</span><br></pre></td></tr></table></figure><p><code>rw_visual</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"><span class="keyword">from</span> random_walk <span class="keyword">import</span> RandomWalk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rw = RandomWalk()</span><br><span class="line">rw.fill_walk()</span><br><span class="line">pyplot.scatter(rw.x_values, rw.y_values, s=<span class="number">7</span>)</span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fi_KhhRBi6-z_d0tdsZOoolmis9O" alt="rw_visual"></p><h6 id="模拟多次"><a href="#模拟多次" class="headerlink" title="模拟多次"></a>模拟多次</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"><span class="keyword">from</span> random_walk <span class="keyword">import</span> RandomWalk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    rw = RandomWalk()</span><br><span class="line">    rw.fill_walk()</span><br><span class="line">    pyplot.scatter(rw.x_values, rw.y_values, s=<span class="number">7</span>)</span><br><span class="line">    pyplot.show()</span><br><span class="line"></span><br><span class="line">    keep_running = input(<span class="string">"Make anther walk? (y/n): "</span>)</span><br><span class="line">    <span class="keyword">if</span> keep_running == <span class="string">'n'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h6 id="给点着色"><a href="#给点着色" class="headerlink" title="给点着色"></a>给点着色</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from matplotlib import pyplot</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> random_walk <span class="keyword">import</span> RandomWalk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    rw = RandomWalk()</span><br><span class="line">    rw.fill_walk()</span><br><span class="line"></span><br><span class="line">    point_numbers = list(range(rw.num_points))</span><br><span class="line">    plt.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.Reds, edgecolors=<span class="string">'none'</span>, s=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    keep_running = input(<span class="string">"Make anther walk? (y/n): "</span>)</span><br><span class="line">    <span class="keyword">if</span> keep_running == <span class="string">'n'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FiEOQFzpY-tZz8H3_J5QJ7w5SyNj" alt="着色"></p><h6 id="重新绘制起点和终点"><a href="#重新绘制起点和终点" class="headerlink" title="重新绘制起点和终点"></a>重新绘制起点和终点</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(<span class="number">0</span>, <span class="number">0</span>, c=<span class="string">'green'</span>, edgecolors=<span class="string">'none'</span>, s=<span class="number">30</span>)</span><br><span class="line">plt.scatter(rw.x_values[<span class="number">-1</span>], rw.y_values[<span class="number">-1</span>], c=<span class="string">'red'</span>, edgecolors=<span class="string">'none'</span>, s=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fgor0V_avlfCElQuXdk-1VIcC2GZ" alt="起点、终点"></p><h6 id="隐藏坐标轴"><a href="#隐藏坐标轴" class="headerlink" title="隐藏坐标轴"></a>隐藏坐标轴</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.axes().get_xaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line">plt.axes().get_yaxis().set_visible(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fuv4aCn_Qyn34annNLyJx8KHtXST" alt="隐藏"></p><h6 id="增加点数"><a href="#增加点数" class="headerlink" title="增加点数"></a>增加点数</h6><p><code>rw = RandomWalk(50000)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from matplotlib import pyplot</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> random_walk <span class="keyword">import</span> RandomWalk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    rw = RandomWalk(<span class="number">50000</span>)</span><br><span class="line">    rw.fill_walk()</span><br><span class="line"></span><br><span class="line">    point_numbers = list(range(rw.num_points))</span><br><span class="line">    plt.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.Blues, edgecolors=<span class="string">'none'</span>, s=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 突出起点和终点</span></span><br><span class="line">    plt.scatter(<span class="number">0</span>, <span class="number">0</span>, c=<span class="string">'green'</span>, edgecolors=<span class="string">'none'</span>, s=<span class="number">30</span>)</span><br><span class="line">    plt.scatter(rw.x_values[<span class="number">-1</span>], rw.y_values[<span class="number">-1</span>], c=<span class="string">'red'</span>, edgecolors=<span class="string">'none'</span>, s=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    plt.axes().get_xaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line">    plt.axes().get_yaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    keep_running = input(<span class="string">"Make anther walk? (y/n): "</span>)</span><br><span class="line">    <span class="keyword">if</span> keep_running == <span class="string">'n'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/Fh4ksyIdv4xcBo7tjGkX4G2UGRVg" alt="增加点数"></p><h6 id="调整尺寸"><a href="#调整尺寸" class="headerlink" title="调整尺寸"></a>调整尺寸</h6><p><code>plt.figure(figsize=(10, 6))</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from matplotlib import pyplot</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> random_walk <span class="keyword">import</span> RandomWalk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    rw = RandomWalk(<span class="number">50000</span>)</span><br><span class="line">    rw.fill_walk()</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">    point_numbers = list(range(rw.num_points))</span><br><span class="line">    plt.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.Blues, edgecolors=<span class="string">'none'</span>, s=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 突出起点和终点</span></span><br><span class="line">    plt.scatter(<span class="number">0</span>, <span class="number">0</span>, c=<span class="string">'green'</span>, edgecolors=<span class="string">'none'</span>, s=<span class="number">30</span>)</span><br><span class="line">    plt.scatter(rw.x_values[<span class="number">-1</span>], rw.y_values[<span class="number">-1</span>], c=<span class="string">'red'</span>, edgecolors=<span class="string">'none'</span>, s=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    plt.axes().get_xaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line">    plt.axes().get_yaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    keep_running = input(<span class="string">"Make anther walk? (y/n): "</span>)</span><br><span class="line">    <span class="keyword">if</span> keep_running == <span class="string">'n'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FiY1r3KLTEnbPiLjhxs3qhEetPxK" alt="调整尺寸"></p><h5 id="使用-Pygal-模拟掷骰子"><a href="#使用-Pygal-模拟掷骰子" class="headerlink" title="使用 Pygal 模拟掷骰子"></a>使用 <code>Pygal</code> 模拟掷骰子</h5><p><code>Pygal</code> 可以生成可缩放的矢量图形文件。</p><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pygal</span><br></pre></td></tr></table></figure><h6 id="画廊"><a href="#画廊" class="headerlink" title="画廊"></a>画廊</h6><p>查看 <code>pygal</code> 文档 ：<code>http://pygal.org/</code></p><h6 id="创建-Die-类"><a href="#创建-Die-类" class="headerlink" title="创建 Die 类"></a>创建 <code>Die</code> 类</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Die</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_sides=<span class="number">6</span>)</span>:</span></span><br><span class="line">        self.num_sides = num_sides</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> randint(<span class="number">1</span>, self.num_sides)</span><br></pre></td></tr></table></figure><h6 id="掷骰子"><a href="#掷骰子" class="headerlink" title="掷骰子"></a>掷骰子</h6><p>掷一个 <code>6</code> 面的骰子，将结果打印出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> die <span class="keyword">import</span> Die</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">die = Die()</span><br><span class="line"></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> roll_num <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    result = die.roll()</span><br><span class="line">    results.append(result)</span><br><span class="line"></span><br><span class="line">print(results)</span><br></pre></td></tr></table></figure><h6 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h6><p>计算每个点出现的次数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> die <span class="keyword">import</span> Die</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">die = Die()</span><br><span class="line"></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> roll_num <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    result = die.roll()</span><br><span class="line">    results.append(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(results)</span></span><br><span class="line"></span><br><span class="line">frequencies = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, die.num_sides+<span class="number">1</span>):</span><br><span class="line">    frequency = results.count(value)</span><br><span class="line">    frequencies.append(frequency)</span><br><span class="line"></span><br><span class="line">print(frequencies)</span><br></pre></td></tr></table></figure><h6 id="绘制直方图"><a href="#绘制直方图" class="headerlink" title="绘制直方图"></a>绘制直方图</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> die <span class="keyword">import</span> Die</span><br><span class="line"><span class="keyword">import</span> pygal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">die = Die()</span><br><span class="line"></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> roll_num <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    result = die.roll()</span><br><span class="line">    results.append(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(results)</span></span><br><span class="line"></span><br><span class="line">frequencies = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, die.num_sides+<span class="number">1</span>):</span><br><span class="line">    frequency = results.count(value)</span><br><span class="line">    frequencies.append(frequency)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(frequencies)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对结果进行可视化</span></span><br><span class="line">hist = pygal.Bar()</span><br><span class="line"></span><br><span class="line">hist.title = <span class="string">"Results of rolling one D6 1000 times."</span></span><br><span class="line">hist.x_labels = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>]</span><br><span class="line">hist.x_title = <span class="string">"Result"</span></span><br><span class="line">hist.y_title = <span class="string">"Frequencies"</span></span><br><span class="line"></span><br><span class="line">hist.add(<span class="string">'D6'</span>, frequencies)</span><br><span class="line">hist.render_to_file(<span class="string">'die_visual.svg'</span>)</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FgemYP2Q0zobw9OyDujsnvM1uTBR" alt="d6"></p><h6 id="同时掷两个骰子"><a href="#同时掷两个骰子" class="headerlink" title="同时掷两个骰子"></a>同时掷两个骰子</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> die <span class="keyword">import</span> Die</span><br><span class="line"><span class="keyword">import</span> pygal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">die_1 = Die()</span><br><span class="line">die_2 = Die()</span><br><span class="line"></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> roll_num <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    result = die_1.roll() + die_2.roll()</span><br><span class="line">    results.append(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(results)</span></span><br><span class="line"></span><br><span class="line">frequencies = []</span><br><span class="line">max_result = die_1.num_sides + die_2.num_sides</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, max_result+<span class="number">1</span>):</span><br><span class="line">    frequency = results.count(value)</span><br><span class="line">    frequencies.append(frequency)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(frequencies)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对结果进行可视化</span></span><br><span class="line">hist = pygal.Bar()</span><br><span class="line"></span><br><span class="line">hist.title = <span class="string">"Results of rolling two D6 1000 times."</span></span><br><span class="line">hist.x_labels = [<span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'10'</span>, <span class="string">'11'</span>, <span class="string">'12'</span>]</span><br><span class="line">hist.x_title = <span class="string">"Result"</span></span><br><span class="line">hist.y_title = <span class="string">"Frequencies"</span></span><br><span class="line"></span><br><span class="line">hist.add(<span class="string">'D6 +D6'</span>, frequencies)</span><br><span class="line">hist.render_to_file(<span class="string">'die_visual_2d6.svg'</span>)</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FkoEEj2duI9N8gmT9P8021KvinGx" alt="2d6"></p><h5 id="同时掷两个不同面数的骰子"><a href="#同时掷两个不同面数的骰子" class="headerlink" title="同时掷两个不同面数的骰子"></a>同时掷两个不同面数的骰子</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> die <span class="keyword">import</span> Die</span><br><span class="line"><span class="keyword">import</span> pygal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">die_1 = Die()</span><br><span class="line">die_2 = Die(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> roll_num <span class="keyword">in</span> range(<span class="number">5000</span>):</span><br><span class="line">    result = die_1.roll() + die_2.roll()</span><br><span class="line">    results.append(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(results)</span></span><br><span class="line"></span><br><span class="line">frequencies = []</span><br><span class="line">max_result = die_1.num_sides + die_2.num_sides</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, max_result+<span class="number">1</span>):</span><br><span class="line">    frequency = results.count(value)</span><br><span class="line">    frequencies.append(frequency)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(frequencies)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对结果进行可视化</span></span><br><span class="line">hist = pygal.Bar()</span><br><span class="line"></span><br><span class="line">hist.title = <span class="string">"Results of rolling a D6 and D10 5000 times."</span></span><br><span class="line">hist.x_labels = [<span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'10'</span>, <span class="string">'11'</span>, <span class="string">'12'</span>, <span class="string">'13'</span>, <span class="string">'14'</span>, <span class="string">'15'</span>, <span class="string">'16'</span>]</span><br><span class="line">hist.x_title = <span class="string">"Result"</span></span><br><span class="line">hist.y_title = <span class="string">"Frequencies"</span></span><br><span class="line"></span><br><span class="line">hist.add(<span class="string">'D6 +D6'</span>, frequencies)</span><br><span class="line">hist.render_to_file(<span class="string">'die_visual_d6_d10.svg'</span>)</span><br></pre></td></tr></table></figure><p><img src="http://images.akashi.org.cn/FiyLRW9cHj7qu5RkoZMZx0UrLG7B" alt="d6d10"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 包管理工具 pipenv 构建虚拟环境</title>
      <link href="2019/09/03/python_pipenv/pipenv/"/>
      <url>2019/09/03/python_pipenv/pipenv/</url>
      
        <content type="html"><![CDATA[<h4 id="Python-包管理工具-pipenv-构建虚拟环境"><a href="#Python-包管理工具-pipenv-构建虚拟环境" class="headerlink" title="Python 包管理工具 pipenv 构建虚拟环境"></a><code>Python</code> 包管理工具 <code>pipenv</code> 构建虚拟环境</h4><blockquote><p>又一 <code>Python</code> 虚拟环境和包管理工具，<code>requests</code> 的作者 <code>Kenneth Reitz</code> 的作品，相当于 <code>virtualenv</code> 和 <code>pip</code> 的合体，解决 <code>requirements.txt</code> 的不确定构建问题。</p></blockquote><a id="more"></a><h5 id="为什么使用-pipenv"><a href="#为什么使用-pipenv" class="headerlink" title="为什么使用 pipenv"></a>为什么使用 <code>pipenv</code></h5><ol><li><code>requirements.txt</code> 依赖管理存在局限。</li></ol><p>当我们通过 <code>pip install -r requirements.txt</code> 安装依赖模块时，会默认安装最新的版本，但如果你的库有存在不兼容旧版本的接口时，代码在新的环境下就不能运行了。这就是不确定构建。</p><ol start="2"><li>依赖关系的复杂性</li></ol><p>当我们的项目使用了包 <code>A</code>，它依赖于包 <code>B</code> 的 <code>2.x</code> 系列，这时候 <code>requirements.txt</code> 会长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A==1.0</span><br><span class="line">B==2.5.1</span><br></pre></td></tr></table></figure><p>当我们需要使用包 <code>C</code>，而它依赖于 <code>B</code> 的 <code>3.0</code> 的 <code>API</code>，在这种情况下 <code>pip install C</code> 就会变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A==1.0</span><br><span class="line">B==3.0.0</span><br><span class="line">C==1.0</span><br></pre></td></tr></table></figure><p>这时候 <code>A</code> 很可能就没办法使用。而通过 <code>Pipfile.lock</code> 的确定构建就可以解决这个问题。</p><p>自己的使用感受是，相对于 <code>virtualenv</code>， 启动和使用更加方便。</p><p>因为 <code>virtualenv</code> 的项目和虚拟环境是分开管理的，在使用 <code>virtualenv</code> 一段时间以后，就可能分不清哪个项目对应哪个虚拟环境，而使用 <code>pipenv</code> 就不用关心这个问题，直接在项目下 <code>pipenv shell</code> 就搞定了。</p><p>但为保证包的完整性，加入到 <code>Pipfile</code> 的操作就比较耗时间。</p><h5 id="安装-pipenv"><a href="#安装-pipenv" class="headerlink" title="安装 pipenv"></a>安装 <code>pipenv</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pipenv</span><br></pre></td></tr></table></figure><h5 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir project</span><br><span class="line">cd project</span><br><span class="line">pipenv install</span><br></pre></td></tr></table></figure><p>初始化好虚拟环境后，会在项目目录下生成 <code>2个</code> 文件 <code>Pipfile</code> 和 <code>Pipfile.lock</code>。为 <code>pipenv</code> 包的配置文件，代替原来的 <code>requirement.txt</code>。</p><p>项目提交时，可将 <code>Pipfile</code> 文件和 <code>Pipfile.lock</code> 文件一并提交，待其他开发克隆下载，根据此 <code>Pipfile</code> 运行命令 <code>pipenv install --dev</code> 生成自己的虚拟环境。</p><p><code>Pipfile.lock</code> 文件是通过 <code>hash</code> 算法将包的名称和版本，及依赖关系生成哈希值，可以保证包的完整性。</p><h5 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv shell</span><br></pre></td></tr></table></figure><p><code>pipenv</code> 很智能，如果你进入了一个项目文件没有安装虚拟环境，直接启动虚拟环境，那么它会新建一个虚拟环境。</p><p>也就是说，创建过程是可以直接省略的。</p><h5 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h5 id="安装-卸载包"><a href="#安装-卸载包" class="headerlink" title="安装/卸载包"></a>安装/卸载包</h5><p>安装相关模块并加入到 <code>Pipfile</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pipenv install xxx</span><br><span class="line">pipenv uninstall xxx</span><br></pre></td></tr></table></figure><h5 id="查看安装包依赖关系"><a href="#查看安装包依赖关系" class="headerlink" title="查看安装包依赖关系"></a>查看安装包依赖关系</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv graph</span><br></pre></td></tr></table></figure><h5 id="查看虚拟环境安装目录"><a href="#查看虚拟环境安装目录" class="headerlink" title="查看虚拟环境安装目录"></a>查看虚拟环境安装目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv --venv</span><br></pre></td></tr></table></figure><h5 id="显示目录信息"><a href="#显示目录信息" class="headerlink" title="显示目录信息"></a>显示目录信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv --where</span><br></pre></td></tr></table></figure><h5 id="生成-lockfile"><a href="#生成-lockfile" class="headerlink" title="生成 lockfile"></a>生成 <code>lockfile</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv lock</span><br></pre></td></tr></table></figure><h5 id="运行-Python-文件"><a href="#运行-Python-文件" class="headerlink" title="运行 Python 文件"></a>运行 <code>Python</code> 文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv run python xxx.py</span><br></pre></td></tr></table></figure><h5 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv --rm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
            <tag> 虚拟环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自建图床方案</title>
      <link href="2019/08/30/picture-bed/picture-bed/"/>
      <url>2019/08/30/picture-bed/picture-bed/</url>
      
        <content type="html"><![CDATA[<h4 id="自建图床方案"><a href="#自建图床方案" class="headerlink" title="自建图床方案"></a>自建图床方案</h4><blockquote><p>原使用的新浪微博图床不再支持外链，虽然还有补救的方法，但最安全的还是自建图床，本篇在图床的使用上提供了一些选择。</p></blockquote><a id="more"></a><h5 id="维持原有方案"><a href="#维持原有方案" class="headerlink" title="维持原有方案"></a>维持原有方案</h5><p>对于 <code>Markdown</code> 的重度依赖者来说，图床简直就是刚需，对图床的选择一般考量的无非就是方便、安全且免费，但这个需求原本就是矛盾的，想要数据安全就没有免费的说法。</p><p>免费图床方案一般有：<a href="https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">新浪微博图床</a>、<a href="https://chrome.google.com/webstore/detail/%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/pinjkilghdfhnkibhcangnpmcpdpmehk?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">微博图床</a>、<a href="https://chrome.google.com/webstore/detail/smms%E5%9B%BE%E5%BA%8A%E6%8F%92%E4%BB%B6/fbamdjnnaaiidpgcfanfcboaanfmjfjk?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">SMMS图床</a></p><p>当然除了插件使用也可以直接在网站上使用：<a href="https://sm.ms/" target="_blank" rel="noopener">SM·MS</a>、<a href="https://imgur.com/" target="_blank" rel="noopener">Imgur</a></p><p>微博图床配合 <code>Chrome</code> 插件使用完全符合方便的理念，但从微博限制外链开始，很多站点的图片就无法显示了，解决办法也有很多，但都存在缺陷，而且最重要的是,不是自己的图床终究没有办法掌控，万一哪一天微博将你图片删了也完全没有办法，所以使用免费图床，图片备份还是很重要的。</p><ol><li>从 <code>https</code> 回到 <code>http</code></li></ol><p>这个是折腾最少的方法，改了协议以后，原微博图床上的图片就可以正常显示了，但缺点也很明显，在都转为加密协议的潮流之下，使用回 <code>http</code> 会有诸多限制，类似于微信公众号等平台是不再支持不加密的图片显示的，同时也存在安全风险。</p><ol start="2"><li>设置 <code>no-referrer</code></li></ol><p>在文章页面源码加上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"no-referrer"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这种做法也存在缺陷，这样的话站点就识别不了你，对 <code>SEO</code> 优化很不友好。</p><h5 id="自建付费图床"><a href="#自建付费图床" class="headerlink" title="自建付费图床"></a>自建付费图床</h5><p>直接购买一个对象存储服务自建图床是最安全的做法，推荐的有阿里云的 <code>OSS</code> 对象存储、腾讯云的 <code>COS</code> 对象存储、七牛云和又拍云等。实测阿里云 <code>OSS</code> 一年 <code>40GB</code> 只需 <code>9</code> 元，还是很划算的。</p><p><img src="http://images.akashi.org.cn/FrStDjhOtt9WyrLvheFqUQDrFf3G" alt="阿里云OSS"></p><h5 id="七牛云搭建免费图床"><a href="#七牛云搭建免费图床" class="headerlink" title="七牛云搭建免费图床"></a>七牛云搭建免费图床</h5><p>那有没有既免费又安全的图床呢，当然也是有的。</p><p>七牛云的对象存储服务在实名认证之后可以免费领取 <code>10GB</code> 的云存储空间和每个月 <code>10GB</code> 的 <code>CDN</code> 加速流量，对于个人写作完全是足够了，我们可以用它来搭建一个自用的图床。</p><p>首先，注册并完成认证：<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a></p><p>进入对象存储，新建存储空间，设置空间名称和选择区域</p><p><img src="http://images.akashi.org.cn/Fgxt56AgROtKS4fY9cYtgeBQDa5F" alt="七牛云"></p><p>配置完成后，其实就可以在 <code>内容管理</code> 上传和查看图片了。但开始之前我们需要先绑定一个域名，七牛云提供的域名仅供测试使用，时间到了以后会自动回收。所以配置一个自己的域名可以一直使用。</p><p><img src="http://images.akashi.org.cn/Fm8m1dIuIsfaIqfdjisH3dia5rW5" alt="配置"></p><p>完成基本配置之后是配置域名的 <code>CNAME</code></p><p>详情可参考官方文档：<a href="https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name" target="_blank" rel="noopener">配置CNAME</a></p><p>这里以阿里云的为例，添加 <code>CNAME</code> 记录：</p><p><img src="http://images.akashi.org.cn/FvkI1szGLEeFoKo5ZiyFOQcZehiH" alt="CNAME"></p><p>配置成功以后就可以配合插件或应用使用了。</p><p><img src="http://images.akashi.org.cn/FpaXX6qlqleV_JTd51pUyFYYZFZa" alt="成功"></p><p>可以使用插件<a href="https://chrome.google.com/webstore/detail/%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E5%BA%8A/fmpbbmjlniogoldpglopponaibclkjdg/reviews" target="_blank" rel="noopener">七牛云图床</a>自动上传七牛云和获取 <code>Markdown</code> 格式图片</p><p><img src="http://images.akashi.org.cn/FgyxskILg3stJQbF5UESq7as0OGE" alt="七牛云图床"></p><p>也可以使用<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a>配置来实现七牛云上传：</p><p><img src="http://images.akashi.org.cn/FuXgMjDGpH7HJFaUGoXpAjMMKGuq" alt="picgo"></p><p>在配置前我们需要获取七牛云的密钥：</p><p><img src="http://images.akashi.org.cn/FhR8nzolFxtvhqcX_LEV7gWFjaH0" alt="密钥"></p><p>在应用中填入详细配置</p><p><img src="http://images.akashi.org.cn/FkeirgmMNavwes07RDYgDhcbSJ_I" alt="配置"></p><p><img src="http://images.akashi.org.cn/Snipaste_2019-08-29_12-35-41.png" alt="完成"></p><p>这样我们就可以开始使用了。</p><h5 id="GitHub-搭建免费图床"><a href="#GitHub-搭建免费图床" class="headerlink" title="GitHub 搭建免费图床"></a><code>GitHub</code> 搭建免费图床</h5><!-- 344c1f2fdf8a0ec5b1466e8edcdb94bf3751b0bf --><p>当然我们还有更多的选择，还可以同样使用 <code>PicGo</code> + <code>Github</code> 实现自建图床。</p><ul><li>创建仓库</li></ul><!-- ![创建仓库](https://raw.githubusercontent.com/AkashiGakki/image/master/markdown/Snipaste_2019-08-29_15-34-19.png?token=AH3S4BH5CDVMGUT67NI7ADS5M6DAA) --><p><img src="https://gitee.com/akashi_sai/image/raw/master/markdown/Snipaste_2019-08-29_15-34-19.png" alt="创建仓库"></p><ul><li>设置</li></ul><!-- ![设置](https://raw.githubusercontent.com/AkashiGakki/image/master/markdown/Snipaste_2019-08-29_15-35-17.png?token=AH3S4BGZVLHKDVMWRVBFMVC5M6DEG) --><p><img src="https://gitee.com/akashi_sai/image/raw/master/markdown/Snipaste_2019-08-29_15-35-17.png" alt="设置"></p><ul><li>拷贝仓库到本地（可省略）</li></ul><!-- ![get ssh](https://raw.githubusercontent.com/AkashiGakki/image/master/markdown/Snipaste_2019-08-29_15-37-05.png?token=AH3S4BCFZ4TRAOOO4BYAGDC5M6DH2) --><!-- ![clone](https://raw.githubusercontent.com/AkashiGakki/image/master/markdown/Snipaste_2019-08-29_15-42-06.png?token=AH3S4BDU4W622FHTWK25Q5C5M6DJE) --><p><img src="https://gitee.com/akashi_sai/image/raw/master/markdown/Snipaste_2019-08-29_15-37-05.png" alt="ssh"></p><p><img src="https://gitee.com/akashi_sai/image/raw/master/markdown/Snipaste_2019-08-29_15-42-06.png" alt="clone"></p><ul><li>获取 <code>token</code></li></ul><p>访问 <code>https://github.com/settings/tokens/new</code>，创建 <code>token</code></p><!-- ![创建](https://raw.githubusercontent.com/AkashiGakki/image/master/markdown/Snipaste_2019-08-29_15-49-03.png?token=AH3S4BAZ2E6AQEDPQX6PQTC5M6DNO) --><p><img src="https://gitee.com/akashi_sai/image/raw/master/markdown/Snipaste_2019-08-29_15-49-03.png" alt="创建"></p><p>获取到 <code>token</code></p><!-- ![保存](https://raw.githubusercontent.com/AkashiGakki/image/master/markdown/Snipaste_2019-08-29_15-49-39.png?token=AH3S4BAJ47WBPPS52UIWW7K5M6DO2) --><p><img src="https://gitee.com/akashi_sai/image/raw/master/markdown/Snipaste_2019-08-29_15-49-39.png" alt="保存"></p><ul><li>设置 <code>PicGo</code></li></ul><p>配置 <code>PicGo</code> 的相关参数</p><!-- ![github](https://raw.githubusercontent.com/AkashiGakki/image/master/markdown/Snipaste_2019-08-29_15-51-19.png?token=AH3S4BDREFBCAQULC6A6BJK5M6CEG) --><p><img src="https://gitee.com/akashi_sai/image/raw/master/markdown/Snipaste_2019-08-29_15-51-19.png" alt="gitee"></p><p>这样，一个 <code>Github</code> 的图床也创建好了。</p><p>但是，国内访问 <code>Github</code> 的速度还是比较缓慢，其实我们可以把 <code>Github</code> 换成国内的码云，这样速度就上来了，具体操作和搭建 <code>Github</code> 的图床大致相同。</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费申请 Google Cloud 服务器一年 300 刀攻略</title>
      <link href="2019/08/29/google_cloud/google-cloud/"/>
      <url>2019/08/29/google_cloud/google-cloud/</url>
      
        <content type="html"><![CDATA[<h4 id="免费申请-Google-Cloud-服务器一年-300-刀攻略"><a href="#免费申请-Google-Cloud-服务器一年-300-刀攻略" class="headerlink" title="免费申请 Google Cloud 服务器一年 300 刀攻略"></a>免费申请 <code>Google Cloud</code> 服务器一年 <code>300</code> 刀攻略</h4><blockquote><p>没有双币信用卡也可以免费申请 <code>Google Cloud</code> 服务器教程。</p></blockquote><a id="more"></a><h5 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h5><ol><li>首先，你需要有一个 <code>Google</code> 账号</li><li>可以访问 <code>Google Cloud</code>，也就是科学上网（翻墙）</li><li>拥有一张双币信用卡，或者是虚拟外币信用卡也可以（<code>Google</code>需要验证身份，会先扣除<code>1</code>美元，不过很快会退回，实际不收费）</li></ol><p>因为博主并没有信用卡，所以申请了 <code>payonner</code> 的电子银行账号，同样也通过了验证。</p><h5 id="注册-payonner"><a href="#注册-payonner" class="headerlink" title="注册 payonner"></a>注册 <code>payonner</code></h5><p>官网：</p><p><code>www.payoneer.com</code></p><p>没有什么难度，按照要求注册就行。</p><p>详细注册参考指引链接：<code>https://aibing.cc/jiaocheng/52280.shtml</code></p><p>经验证，美国地区任意银行账户都是可以的（博主按照参考教程多申请了几个账户都可以收到 <code>Google</code> 的付款），无需多申请。</p><p><img src="http://images.akashi.org.cn/FuDtjGzSnJwSfpp983C-JeWE0hkj" alt="pay"></p><h5 id="激活-Google-Cloud"><a href="#激活-Google-Cloud" class="headerlink" title="激活 Google Cloud"></a>激活 <code>Google Cloud</code></h5><p>官网：</p><p><code>https://console.cloud.google.com/freetrial</code></p><p><img src="http://images.akashi.org.cn/FtD0le5hNHdNSqOTNGijXdhD0L1h" alt="官网"></p><p>进入官网，登录 <code>Google</code> 账号，就可以开始激活：</p><p><img src="http://images.akashi.org.cn/Fnsqt2tr0olgBzNNqwTWuIufLScU" alt="google"></p><p>截止到博主现在的时间，<code>Google</code> 已经取消了中国区域的用户注册，因为国内薅羊毛实在太多。如果有支持外币的信用卡可以直接选取香港或台湾地区进行激活，因为我申请的 <code>payonner</code> 美国区的银行账号，选取美国区域进行激活。</p><ul><li>地址选取</li></ul><p>谷歌地图搜索一个真实的美国地址就行，或者直接 <code>google</code>： <code>美国地址生成器</code>，就可以获得一个随机的美国地址。</p><p><img src="http://images.akashi.org.cn/FnGSAnETV_lPTOnFqd70M9TTsXBQ" alt="地址"></p><ul><li>付款方式</li></ul><p>付款方式是最关键的，没有双币信用卡就需要选择银行账户进行验证：</p><p><img src="http://images.akashi.org.cn/FvyLBwQePHV_W4-M_6wpuXhzMr19" alt="付款方式"></p><p>仔细填好之前在 <code>payonner</code> 注册获得的银行账户就可以开始免费试用了。</p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>如果通过信用卡进行激活，那么 <code>Google</code> 会先扣除 <code>1</code> 美元进行验证，验证成功后 <code>$300</code>，就到账了，扣除的金额也会退回。</p><p>如果通过美国区域银行账户进行激活，需要等待 <code>2~3</code> 天， <code>Google</code> 会通过银行账户打款不足 <code>1</code> 美元的金额，我们需要拿到具体的金额数字到 <code>Google Cloud</code> 控制台 =&gt; <code>结算</code> =&gt; <code>付款方法</code> 进行验证，输入正确的金额就可以验证成功，获取免费 <code>$300</code> 的额度。</p><p><img src="http://images.akashi.org.cn/Fs0hn9YdwxC3pAy9EXIrAQ5alcZl" alt="success"></p><p>一般用户 <code>$300</code> 是完全够用一年的，如果你只是搭一个 <code>ssr</code> 看油管 <code>4K</code> 视频和简单的服务器搭建学习，但为了防止超出付费还是进入 结算 =&gt; 预算和提醒 设置一个提醒。</p><blockquote><p>当然，网上还有很多使用一年以后继续不换账号和银行卡再续一年的骚操作，就不知道到时限快用完的时候还是否有效(逃)。</p></blockquote><p>以上，就是全部的激活教程。</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
          <category> 云服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
            <tag> 云服务 </tag>
            
            <tag> Google Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH 远程登录 Google Cloud 应用实例</title>
      <link href="2019/08/29/google_cloud_ssh/ssh/"/>
      <url>2019/08/29/google_cloud_ssh/ssh/</url>
      
        <content type="html"><![CDATA[<h4 id="ssh-远程登录-Google-Cloud-应用实例"><a href="#ssh-远程登录-Google-Cloud-应用实例" class="headerlink" title="ssh 远程登录 Google Cloud 应用实例"></a><code>ssh</code> 远程登录 <code>Google Cloud</code> 应用实例</h4><blockquote><p>配置 <code>ssh</code> 实现远程登录访问 <code>Google</code> 服务器。</p></blockquote><a id="more"></a><p>首先，创建实例后，切换到 <code>root</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><h5 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h5><p>查看当前用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">who</span><br></pre></td></tr></table></figure><p>为当前用户设置新密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd xxx</span><br></pre></td></tr></table></figure><p>注意：<code>xxx</code> 是你的用户名，也可以设置 <code>root</code> 用户的密码： <code>sudo passwd root</code></p><p>也可以在 <code>root</code> 用户权限下新增加一个用户并设置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser akashi</span><br><span class="line">passwd akashi</span><br></pre></td></tr></table></figure><h5 id="编辑-ssh-配置文件"><a href="#编辑-ssh-配置文件" class="headerlink" title="编辑 ssh 配置文件"></a>编辑 <code>ssh</code> 配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>修改以下内容为 <code>yes</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin yes</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure><p>重启生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service sshd reload</span><br></pre></td></tr></table></figure><h5 id="使用-ssh-密码登录"><a href="#使用-ssh-密码登录" class="headerlink" title="使用 ssh 密码登录"></a>使用 <code>ssh</code> 密码登录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@公网IP</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh akashi@35.201.201.156</span><br></pre></td></tr></table></figure><p>输入上面设置的密码实现登录。</p><h5 id="本地生成公钥和私钥"><a href="#本地生成公钥和私钥" class="headerlink" title="本地生成公钥和私钥"></a>本地生成公钥和私钥</h5><p>接下来介绍第二种方法，通过密钥实现登录。</p><p>在本地终端使用 ssh-keygen 命令生成新的密钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ~/.ssh/[KEY_FILENAME] -C [USERNAME]</span><br></pre></td></tr></table></figure><p>注意：<code>[KEY_FILENAME]</code> 是要用于 <code>SSH</code> 密钥文件的名称，<code>[USERNAME]</code> 是连接到该实例的用户的用户名。</p><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd .ssh</span><br><span class="line">ssh-keygen -t rsa -f cloudkey -C akashi</span><br></pre></td></tr></table></figure><p>注意：生成密钥时的 <code>passphrase</code> 是给 <code>private key</code> 设置一个密码，避免私钥被人盗用的风险。</p><h5 id="获取密钥"><a href="#获取密钥" class="headerlink" title="获取密钥"></a>获取密钥</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">公钥文件：~/.ssh/[KEY_FILENAME].pub</span><br><span class="line">私钥文件：~/.ssh/[KEY_FILENAME]</span><br></pre></td></tr></table></figure><p>为下一步准备，获取公钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat [KEY_FILENAME].pub</span><br></pre></td></tr></table></figure><p>复制获取到的整串字符。</p><h5 id="修改-SSH-公钥元数据"><a href="#修改-SSH-公钥元数据" class="headerlink" title="修改 SSH 公钥元数据"></a>修改 <code>SSH</code> 公钥元数据</h5><p>拿着获取的公钥，访问 <code>Google Cloud</code>，进入谷歌云平台页面 -&gt; 计算引擎 -&gt; 元数据 -&gt; SSH 密钥，粘贴保存：</p><p><img src="http://images.akashi.org.cn/FljhalIw4XFbIq642iCzH1jr3kz0" alt="元数据"></p><p><img src="http://images.akashi.org.cn/FoxFEbJNY-H_FAX1BWA1wtaOxyDy" alt="粘贴"></p><p>修改完成之后，<code>Google</code> 就会把上面这段 <code>public key</code> 写入到 <code>~/.ssh/authorized_keys</code> 中</p><p>接下来就可以通过密钥登录了。</p><h5 id="本地通过私钥登录"><a href="#本地通过私钥登录" class="headerlink" title="本地通过私钥登录"></a>本地通过私钥登录</h5><p>赋予私钥文件仅本人可读权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 &lt;下载的与云服务器关联的私钥的绝对路径&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/[KEY_FILENAME] [USERNAME]@[IP]</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/cloudkey -p 22 akashi@35.201.201.156</span><br></pre></td></tr></table></figure><p>至此，两种远程登录的方法介绍完毕。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> SSH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Cloud 搭建 SSR 服务器</title>
      <link href="2019/08/28/google_cloud_ssr/ssr/"/>
      <url>2019/08/28/google_cloud_ssr/ssr/</url>
      
        <content type="html"><![CDATA[<h4 id="Google-Cloud-搭建-SSR-服务器"><a href="#Google-Cloud-搭建-SSR-服务器" class="headerlink" title="Google Cloud 搭建 SSR 服务器"></a><code>Google Cloud</code> 搭建 <code>SSR</code> 服务器</h4><blockquote><p>使用 <code>Google Cloud</code> 搭建属于自己的 <code>SSR</code> 服务器，实现愉快的科学上网。</p></blockquote><a id="more"></a><h5 id="创建-VM-实例"><a href="#创建-VM-实例" class="headerlink" title="创建 VM 实例"></a>创建 <code>VM</code> 实例</h5><ul><li>创建</li></ul><p>首先，进入 <code>Google Cloud</code> 控制台，创建 <code>VM</code> 实例。</p><p><img src="http://images.akashi.org.cn/Fv5IdWRtAC-VYCOuiEXM7oFbD22j" alt="VM实例"></p><p><code>计算</code> =&gt; <code>Computer Engine</code> =&gt; <code>VM 实例</code></p><p><img src="http://images.akashi.org.cn/FvoG2kuHjY-qBYkk_3hVjlEemena" alt="创建"></p><ul><li>配置</li></ul><p>选取配置：</p><p><img src="http://images.akashi.org.cn/FklsyL57OQM581TkKZVJi30dMjmm" alt="配置"></p><p>实际尝试后，台湾的速度是最快的。选择最小的内存，只是用于 <code>SSR</code> 服务端安装是足够的，预计每月 <code>$5</code>，一年就是 <code>$60</code>。</p><p>防火墙需要勾选允许 <code>http</code> 和 <code>https</code></p><p><img src="http://images.akashi.org.cn/Fkf6GdnkX2vay8szF6aJ8VWNKx7E" alt="防火墙"></p><p>点击创建，这样，服务器就创建成功了。</p><h5 id="安装-BBR"><a href="#安装-BBR" class="headerlink" title="安装 BBR"></a>安装 <code>BBR</code></h5><ul><li>远程登录</li></ul><p><code>BBR</code> 是 <code>Google</code> 发布的拥塞控制算法，可以有效缓解服务器连接速度慢等问题，下面我们通过脚本进行安装。</p><p>点击实例的 <code>ssh</code>，在浏览器进行远程登录：</p><p><img src="http://images.akashi.org.cn/Fo3dd7hJtuMNda7AWG6KxAvLUpgX" alt="ssh"></p><p><img src="http://images.akashi.org.cn/Fna8I_fiNCnCc_GqY2BniYfdv774" alt="远程登录"></p><ul><li>获取 <code>root</code> 权限</li></ul><p>连接到服务器后，获取 <code>root</code> 用户权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><p>安装一些基本的工具：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install git</span><br><span class="line">sudo yum install wget</span><br><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><ul><li>安装 <code>BBR</code> 加速</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N –no-check-certificate https://raw.githubusercontent.com/FunctionClub/YankeeBBR/master/bbr.sh &amp;&amp; bash bbr.sh install</span><br></pre></td></tr></table></figure><p>完成后重启服务器，并且重新连接，获取 <code>root</code> 用户权限后，开启 <code>BBR</code> 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash bbr.sh start</span><br></pre></td></tr></table></figure><h5 id="安装-SSR"><a href="#安装-SSR" class="headerlink" title="安装 SSR"></a>安装 <code>SSR</code></h5><p>接下来，就是 <code>SSR</code> 服务端的安装。</p><ul><li><code>ssr</code> 脚本安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh</span><br></pre></td></tr></table></figure><p>按照要求配置 <code>ip</code>，用户，端口，密码、加密方式，协议等等。</p><p><img src="http://images.akashi.org.cn/FlQCayRBArmNJom7ZvOqQHFyEh3B" alt="ssr配置"></p><p>然后，记住你的配置，之后需要在本地的客户端输入配置实现科学上网。</p><ul><li>设置外部 <code>IP</code> 为静态</li></ul><p><img src="http://images.akashi.org.cn/FvmUToxLRUyPskVVXP_a1jk4fRIq" alt="静态IP"></p><ul><li>添加防火墙规则</li></ul><p><img src="http://images.akashi.org.cn/FnhP2ZcMsYZCglsZi5sY3u7axcFT" alt="防火墙"></p><p>注意：设置的端口需要与刚才 <code>ssr</code> 设置的端口一致。</p><p>以我的为例，我设置的是 <code>8989</code> 端口，端口原则上可以自由设置，但尽量设置大于 <code>1000</code> 的端口，而且不要和一些自己开发常用的端口冲突。</p><p><img src="http://images.akashi.org.cn/Fmw_DxcDSm_T4CtPvXvn0Wys1wIg" alt="入站"></p><p><img src="http://images.akashi.org.cn/Flsf5qUWc9-fOubbyxFixCfSa1wr" alt="出站"></p><p>至此，服务端的配置已经全部完成，接下来就可以在 <code>Mac</code>、<code>PC</code>、<code>IOS</code>、<code>安卓</code> 等设备上安装 <code>shadowsocks</code> 客户端，填写你的配置，实现科学上网了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> SSR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 云服务 </tag>
            
            <tag> Google Cloud </tag>
            
            <tag> SSR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 使用笔记</title>
      <link href="2019/08/24/redis/redis/"/>
      <url>2019/08/24/redis/redis/</url>
      
        <content type="html"><![CDATA[<h4 id="Redis-使用笔记"><a href="#Redis-使用笔记" class="headerlink" title="Redis 使用笔记"></a><code>Redis</code> 使用笔记</h4><blockquote><p><code>Redis</code> 是一个开源的、高性能的、基于键值对的缓存与存储系统，通过提供多种键值数据类型来适应不同场景下的缓存与存储需求。同时， <code>Redis</code> 的诸多高级功能使其可以胜任消息队列、任务队列等不同的角色。</p></blockquote><a id="more"></a><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><h6 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h6><p><code>Redis</code> 是 <code>Remote Dictionary Server</code> （远程字典服务器）的缩写，它以字典结构存储数据，并允许其他应用通过 <code>TCP</code> 协议读写字典中的内容。与大多数脚本语言中的字典一样， <code>Redis</code> 字典中的键值除了可以使字符串，还可以是其他数据类型。它支持的键值数据类型如下：</p><ul><li><p>字符串类型</p></li><li><p>散列表类型</p></li><li><p>列表类型</p></li><li><p>集合类型</p></li><li><p>有序集合类型</p></li></ul><h6 id="内存存储与持久化"><a href="#内存存储与持久化" class="headerlink" title="内存存储与持久化"></a>内存存储与持久化</h6><p><code>Redis</code> 数据库中的所有数据都存储在内存中。由于内存的读写速度远快于硬盘，因此 <code>Redis</code> 在性能上对比其他的基于硬盘存储的数据库有明显的优势，一台普通的笔记本电脑上， <code>Redis</code> 可以在一秒内读写超过 <code>10</code> 万个键值。</p><p>将数据存储在内存中也存在问题，比如程序退出后内存中的数据会丢失。不过 <code>Redis</code> 提供了对持久化的支持，即可以将内存中的数据异步写入到硬盘中，同时不影响继续提供服务。</p><h6 id="缓存、队列系统"><a href="#缓存、队列系统" class="headerlink" title="缓存、队列系统"></a>缓存、队列系统</h6><p>由于 <code>Redis</code> 提供了丰富的功能，越来越多的人将其用作缓存、队列系统。</p><p><code>Redis</code> 可以为每个键设置生存时间（<code>Time To Live TTL</code>），生存时间到期后键会自动被删除。可以限定数据占用的最大内存空间，在数据达到空间限制之后可以按照一定的规则自动淘汰掉不需要的键。用作缓存系统性能非常出色。</p><p>除此之外， <code>Redis</code> 的列表类型键可以用来实现队列，并且支持阻塞式读取，可以很容易的实现一个高性能的优先级队列。同时在更高的层面上，<code>Redis</code> 还支持 “<code>发布/订阅&quot;</code> 的消息模式。</p><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><p>在 <code>OS X</code> 系统中安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure><h6 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g69qd2xmlxj21ts0pun0s.jpg" alt></p><p>可以重新打开一个终端窗口，查看 <code>redis</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure><p>或者通过端口号检查 <code>Redis</code> 服务器状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nlt|grep 6379</span><br></pre></td></tr></table></figure><p><code>Redis</code> 服务器默认使用 <code>6379</code> 端口，当然可以通过 <code>--port</code> 自定义端口号。</p><h6 id="启动-Redis-client"><a href="#启动-Redis-client" class="headerlink" title="启动 Redis-client"></a>启动 <code>Redis-client</code></h6><p>启动完服务器以后，重新打开一个窗口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>即可以启动 <code>Redis</code> 客服端。</p><p>查看连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli ping</span><br></pre></td></tr></table></figure><p>如果连接正常，会输出 <code>PONG</code></p><p><code>redis-cli</code> 的一些使用：</p><p>自定义地址和端口号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure><p>测试连接（不带运行参数 <code>redis-cli</code>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PING</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo hi</span><br></pre></td></tr></table></figure><h6 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h6><p>终端运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis shutdown</span><br></pre></td></tr></table></figure><p>考虑到 <code>Redis</code> 有可能正在将内存中的数据同步到硬盘中，强行终止 <code>Redis</code> 进程可能会导致数据丢失。通过 <code>SHUTDOWN</code> 命令， <code>Redis</code> 会先断开所有的客服端连接，然后根据配置执行持久化，最后完成退出。</p><h6 id="Redis-可执行文件说明"><a href="#Redis-可执行文件说明" class="headerlink" title="Redis 可执行文件说明"></a><code>Redis</code> 可执行文件说明</h6><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><code>redis-server</code></td><td><code>Redis</code> 服务器</td></tr><tr><td><code>redis-cli</code></td><td><code>Redis</code> 命令行客服端</td></tr><tr><td><code>redis-benchmark</code></td><td><code>Redis</code> 性能测试工具</td></tr><tr><td><code>redis-check-aof</code></td><td><code>AOF</code> 文件修复工具</td></tr><tr><td><code>redis-check-dump</code></td><td><code>RDB</code> 文件检查工具</td></tr><tr><td><code>redis-sentinel</code></td><td><code>Sentinel</code> 服务器</td></tr></tbody></table><h5 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a><code>Redis</code> 数据类型</h5><h6 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h6><p>以下我们在开启 <code>Redis</code> 服务器的情况下，另外再开一个终端启动 <code>redis-cli</code> 客户端进行下面的学习：</p><ul><li>键值存储</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set key value</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set bar 1</span><br></pre></td></tr></table></figure><p>存入了一个键为 <code>bar</code>，值为 <code>1</code> 的键值。</p><ul><li>获取键名列表</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys pattern</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure><p>使用上面的命令我们获得了 <code>Redis</code> 中所有的键。</p><blockquote><p>注意：<code>keys</code> 命令需要遍历 <code>Redis</code> 中所有的键， 当键的数量较多时会影响性能，不建议在生产环境中使用。</p></blockquote><ul><li>判断键是否存储</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exists key [key ...]</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exists bar</span><br></pre></td></tr></table></figure><p>如果存在，返回整数类型 <code>1</code>，否则返回 <code>0</code>。</p><ul><li>获取数据类型</li></ul><p><code>type</code> 用来获取键值的数据类型，返回值可能是 <code>string</code> (字符串类型)、<code>hash</code>(散列类型)、<code>list</code>(列表类型)、<code>set</code>(集合类型)、<code>zset</code>(有序集合类型)</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type key</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type bar</span><br></pre></td></tr></table></figure><p>返回的值是 <code>string</code>。</p><ul><li>删除键</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del key [key ...]</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del bar</span><br></pre></td></tr></table></figure><p>这样就删除了我们刚刚存入的 <code>{&#39;bar&#39;: &#39;1&#39;}</code></p><h6 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h6><ul><li>赋值与取值</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set key value</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure><p><code>set</code> 和 <code>get</code> 是 <code>Redis</code> 里面最基础的两个命令，用来设置和获取键值。</p><ul><li>递增</li></ul><p>当存储的字符串是整数形式时，<code>Redis</code> 提供了一个实现当前键值递增的命名 <code>incr</code>，返回递增后的值。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incr key</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incr num</span><br></pre></td></tr></table></figure><p>当操作的键不存在时默认键值为 <code>0</code>，所以输出结果是递增后的 <code>1</code>。当键值不是整数时会提示错误。</p><ul><li>增加指定的整数</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incrby key increment</span><br></pre></td></tr></table></figure><p><code>incrby</code> 命令和 <code>incr</code> 命令基本一样，只不过前者可以通过参数 <code>increment</code> 指定一次增加的数值，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incrby num 3</span><br></pre></td></tr></table></figure><p>在上一次（<code>1</code>） 的结果上再增加 <code>3</code>，那么输出应该为 <code>4</code>。</p><ul><li>减少指定的整数</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decr key</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decrby key decrement</span><br></pre></td></tr></table></figure><p>同样的，<code>decr</code> 和 <code>decrby</code> 可以实现让键值递减。</p><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decrby num 2</span><br></pre></td></tr></table></figure><p>继续使用上面的参数例子，在 <code>4</code> 的基础上减去 <code>2</code>，输出结果是 <code>2</code>。</p><ul><li>增加指定浮点数</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incrbyfloat key increment</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incrbyflodt num 2.7</span><br></pre></td></tr></table></figure><p>输出结果为 <code>4.7</code>。</p><ul><li>向尾部追加值</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">append key value</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set say hello</span><br><span class="line">append say ' asuka!'</span><br><span class="line">get say</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g69qe12yrlj20vo05wab9.jpg" alt></p><p><code>append</code> 的作用是向键值的末尾追加 <code>value</code>。例子中使用了引号是因为参数包含了空格，也可以输入类似于：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set name akashi</span><br><span class="line">append name sai</span><br><span class="line">get name</span><br></pre></td></tr></table></figure><p>输出为： <code>akashisai</code></p><ul><li>获取字符串长度</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strlen key</span><br></pre></td></tr></table></figure><p><code>strlen</code> 命令返回键值的长度，如果键不存在则返回 <code>0</code>。</p><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strlen say</span><br></pre></td></tr></table></figure><ul><li>同时获取/设置多个键值</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mget key [key ...]</span><br><span class="line">mset key value [key value ...]</span><br></pre></td></tr></table></figure><ul><li>位操作</li></ul><p>一个字节由 <code>8</code> 个二进制位组成， <code>Redis</code> 提供了 <code>4</code> 个命令可以直接对二进制位进行操作。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getbit key offset</span><br><span class="line">setbit key offset value</span><br><span class="line">bitcount key [start] [end]</span><br><span class="line">bitop operation destkey key [key ...]</span><br></pre></td></tr></table></figure><p><code>getbit</code> 命令可以获得一个字符串类型键指定位置的二进制位的值（ <code>0</code> 或 <code>1</code>）。</p><p><code>bitcount</code> 命令可以获得字符串类型键中值是 <code>1</code> 的二进制位个数。</p><h6 id="散列类型"><a href="#散列类型" class="headerlink" title="散列类型"></a>散列类型</h6><blockquote><p>散列表(<code>hash</code>)的键值是一种字典结构，其存储了字段(<code>field</code>)和字段值的映射，但字段值只能是字符串，不支持其他数据类型，也就是说，散列类型不能嵌套其他类型。</p></blockquote><p>注意：其实 <code>Redis</code> 的其他数据类型同样不支持数据类型的嵌套。比如集合类型的每个元素都只能是字符串，不能是另一个集合或者散列表等。</p><p>散列类型适合存储对象。</p><ul><li>赋值与取值</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hset key field value</span><br><span class="line">hget key field</span><br><span class="line">hmset key field value [field value ...]</span><br><span class="line">hmget key field [field ...]</span><br><span class="line">hgetall key</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hset user name akashi</span><br><span class="line">hget user name</span><br></pre></td></tr></table></figure><p><code>hset</code> 的方便之处在于不区分插入和删除操作，这意味着不用事先判断字段是否存在来决定执行的是插入(<code>insert</code>)还是更新(<code>update</code>)操作。当字段不存在时，执行插入操作，返回 <code>1</code>，当字段存在时，执行更新操作，返回 <code>0</code>；当键本身不存在时，还会自动建立。</p><p>当需要设置/查找多个字段时：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hmset user age 21 email akashi_sai@163.com</span><br><span class="line">hmget user name age email</span><br></pre></td></tr></table></figure><p>如果想获取键中的所有字段和字段的值却不知道键中有哪些字段时，可以使用 <code>hgetall</code> 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgetall user</span><br></pre></td></tr></table></figure><ul><li>判断字段是否存在</li></ul><p>语法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexists key field</span><br></pre></td></tr></table></figure><p><code>hexists</code> 用来判断一个字段是否存在，如果存在返回 <code>1</code>，否则返回 <code>0</code>。</p><ul><li>当字段不存在时赋值</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hsetnx key field value</span><br></pre></td></tr></table></figure><p><code>nx</code> 表示 <code>if not exisits</code></p><p><code>hsetnx</code> 与 <code>hset</code> 类似，区别在于如果字段已经存在，<code>hsetnx</code> 将不再执行任何操作。</p><ul><li>增加数字</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hincrby key field increment</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hincrby user age 1</span><br></pre></td></tr></table></figure><ul><li>删除字段</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdel key field [field ...]</span><br></pre></td></tr></table></figure><p><code>hdel</code> 命令可以删除一个或多个字段，返回值是被删除的字段个数。</p><ul><li>只获取字段名或字段值</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hkeys key</span><br><span class="line">hvals key</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hkeys user</span><br><span class="line">hvals user</span><br></pre></td></tr></table></figure><ul><li>获取字段数量</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">klen key</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hlen user</span><br></pre></td></tr></table></figure><h6 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h6><blockquote><p>列表类型(<code>list</code>)可以存储一个有序的字符串列表，常用的操作是向两端添加元素，或者获得列表的某一个片段。</p></blockquote><ul><li>向列表两端增加元素</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lpush key value [value ...]</span><br><span class="line">rpush key value [value ...]</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lpush list 1</span><br><span class="line">lpush list 0</span><br></pre></td></tr></table></figure><p>在列表左边增加元素，完成后，列表 <code>list</code> 的元素为 <code>0 1</code>。</p><p>继续从右边增加元素：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpush list 2 3</span><br></pre></td></tr></table></figure><p>现在列表中的元素排列为: <code>0 1 2 3</code>。</p><ul><li>从列表两端弹出元素</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lpop key</span><br><span class="line">rpop key</span><br></pre></td></tr></table></figure><p>以上面声明的 <code>list</code> 为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpop list</span><br></pre></td></tr></table></figure><p>我们知道现在最左边的数字是 <code>0</code>，所以输入命令，返回了 <code>0</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpop list</span><br></pre></td></tr></table></figure><p>同样，返回最右边的数字 <code>3</code>。现在我们弹出了列表两端的两个数字，还存在列表中的还有 <code>1 2</code>。</p><ul><li>获取列表中元素的个数</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llen key</span><br></pre></td></tr></table></figure><p>当键不存在时返回 <code>0</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llen list</span><br></pre></td></tr></table></figure><p>返回了当前的列表元素个数 <code>2</code>。</p><ul><li>获取列表片段</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrange key start stop</span><br></pre></td></tr></table></figure><p><code>Redis</code> 的列表索引从 <code>0</code>开始，返回包括两端的元素。为了演示，我们先往列表里添加一些元素：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpush 3 4 5 6 7</span><br><span class="line">lrange list 2 5</span><br></pre></td></tr></table></figure><p>现在列表里的元素分别有 <code>1 2 3 4 5 6 7</code>，返回索引从 <code>2</code> 开始，<code>5</code> 结束的元素，有：<code>3 4 5 6</code>。</p><ul><li>删除列表中指定的值</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrem key count value</span><br></pre></td></tr></table></figure><p><code>lrem</code> 会删除列表中前 <code>count</code> 个值为 <code>value</code> 的元素，返回值是实际删除的元素个数。根据 <code>count</code> 的值的不同，分为以下几种情况：</p><ol><li><p><code>count &gt; 0</code> 时，<code>lrem</code> 会从列表左边开始删除前 <code>count</code> 个值为 <code>value</code> 的元素。</p></li><li><p><code>count &lt; 0</code> 时，<code>lrem</code> 会从列表右边开始删除前 <code>|count|</code> 个值为 <code>value</code> 的元素。</p></li><li><p><code>count = 0</code> 时，<code>lrem</code> 会删除所有值为 <code>value</code> 的元素。</p></li></ol><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrem key 0 7</span><br></pre></td></tr></table></figure><p>以上例子删除了所有值为 <code>7</code> 的元素。</p><ul><li>获取/设置指定索引的元素值</li></ul><p>如果要将列表类型当做数组来用，<code>lindex</code> 是必不可少的，<code>lindex</code> 用来返回指定元素的索引，索引从 <code>0</code> 开始。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lindex key index</span><br><span class="line">lset key index value</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lindex list 1</span><br><span class="line">lindex list -1</span><br></pre></td></tr></table></figure><p><code>-1</code> 表示最右边的索引，以此类推，<code>-2</code> 即为列表里面倒数第二个元素。</p><ul><li>只保留列表指定片段</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ltrim key start end</span><br></pre></td></tr></table></figure><p><code>ltrim</code> 可以删除指定索引范围之外的所有元素，其指定列表范围的方法和 <code>lrange</code> 相同。</p><ul><li>向列表中插入元素</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linsert key before|after pivot value</span><br></pre></td></tr></table></figure><p><code>linsert</code> 先从左到右查找 <code>pivot</code> 元素位置，然后根据参数决定在之前或者之后插入。</p><ul><li>将元素从一个列表转到另一个列表</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpoplpush source destination</span><br></pre></td></tr></table></figure><p>即先执行 <code>rpop</code> 再执行 <code>lpush</code>命令先从 <code>source</code> 列表类型键的右边弹出一个元素，然后将其加入到 <code>destination</code> 列表类型的左边，并返回这个元素的值。</p><p>当把列表类型当做队列使用时，<code>rpoplpush</code> 可以直观的在多个队列中传递数据；</p><p>当 <code>source</code> 和 <code>destination</code> 相同时，会不断执行队尾元素移到队首，借助这个特性可以实现一个网站监控系统。</p><h6 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h6><blockquote><p>集合类型的常用操作是向集合中加入或删除元素、判断某个元素是否存在等，由于集合类型在 <code>Redis</code> 内部是使用值为空的散列表实现的，所以这些操作的时间复杂度都是 <code>O(1)</code>。最方便的是多个集合类型之间还可以进行并集、交集和差集运算。</p></blockquote><p>集合与列表类型的比较：</p><table><thead><tr><th></th><th>集合类型</th><th>列表类型</th></tr></thead><tbody><tr><td>存储内容</td><td>字符串</td><td>字符串</td></tr><tr><td>有序性</td><td>否</td><td>是</td></tr><tr><td>唯一性</td><td>是</td><td>否</td></tr></tbody></table><ul><li>增加/删除元素</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sadd key member [member ...]</span><br><span class="line">srem key member [member ...]</span><br></pre></td></tr></table></figure><p><code>sadd</code> 用来向集合中增加一个或多个元素，如果键不存在则会自动创建。因为在一个集合中不能有相同的元素，所以如果加入的元素已经存在就会忽略这个元素，返回值是成功加入的元素的数量。</p><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sadd letters a</span><br><span class="line">sadd letters a b c</span><br></pre></td></tr></table></figure><p>第一条成功加入一个元素，返回 <code>1</code>，第二条加入的 <code>a</code> 元素已经存在，忽略，新加入了 <code>2</code> 个元素，返回 <code>2</code>。</p><p>同理的 <code>srem</code> 用来从集合中删除一个或多个元素，并返回删除成功的个数。</p><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srem letters a</span><br></pre></td></tr></table></figure><ul><li>获得集合中的所有元素</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smembers key</span><br></pre></td></tr></table></figure><ul><li>判断元素是否在集合中</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sismember key member</span><br></pre></td></tr></table></figure><p>判断一个元素是否存在集合中的时间复杂度为 <code>O(1)</code>， 当存在时返回 <code>1</code>，否则返回 <code>0</code>。</p><ul><li>集合间运算</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sdiff key [key ...]</span><br><span class="line">sinter key [key ...]</span><br><span class="line">sunion key [key ...]</span><br></pre></td></tr></table></figure><p><code>sdiff</code> 表示执行集合的差集运算、<code>sinter</code> 表示执行集合的交集运算、<code>sunion</code> 表示执行集合的并集运算。</p><ul><li>获取集合中元素个数</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scard key</span><br></pre></td></tr></table></figure><ul><li>进行集合运算并将结果存储</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sdiffstore destination key [key ...]</span><br><span class="line">sinterstore destination key [key ...]</span><br><span class="line">sunionstore destination key [key ...]</span><br></pre></td></tr></table></figure><ul><li>随机获取集合中的元素</li></ul><p>语法；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srandmember key [count]</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">srandmember letters</span><br><span class="line">srandmember letters 2</span><br></pre></td></tr></table></figure><p>可选参数 <code>count</code> 用来随机获取多个元素，</p><p>当 <code>count</code> 为正数时，随机获取集合里 <code>count</code> 个不重复的元素；</p><p>当 <code>count</code> 为负数时，随机获取集合里 <code>|count|</code> 个元素，有可能相同；</p><ul><li>从集合中弹出一个元素</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spop key</span><br></pre></td></tr></table></figure><p><code>eg</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spop letters</span><br></pre></td></tr></table></figure><h6 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h6><blockquote><p>有序集合就是在集合类型的基础上将集合中的每个元素都关联到了一个分数，分数可以是相同的。</p></blockquote><p>有序集合与列表有些类似，下面介绍它们的不同之处：</p><ol><li><p>列表类型是通过链表实现的，获取靠近两端的数据速度极快，而当元素增多以后，访问中间数据的速度会较慢，它合适实现如 “新鲜事”,”日志”等很少访问中间元素的应用，或者是时效性比较强的应用。</p></li><li><p>有序集合类型是使用散列表和跳表(<code>skip list</code>)实现的，即使读取中间数据速度也很快(时间复杂度为<code>O(log(n))</code>)</p></li><li><p>列表中不能简单地调整某个元素的位置，但是有序集合可以(通过更改元素关联的分数)</p></li><li><p>有序集合要比列表类型更耗费内存</p></li></ol><ul><li>增加元素</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd key score member [score member ...]</span><br></pre></td></tr></table></figure><p><code>zadd</code> 用来向有序集合加入一个元素和该元素的分数，如果该元素已存在则会用新的分数替换原有的分数，返回新加入到集合中的元素个数。</p><ul><li>获得元素分数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zscore key member</span><br></pre></td></tr></table></figure><ul><li>获取排名在某个范围的元素列表</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrange key start stop [withscores]</span><br><span class="line">zrevrange key start stop [withscores]</span><br></pre></td></tr></table></figure><p><code>zrevrange</code> 和 <code>zrange</code> 的唯一不同在于 <code>zrevrange</code> 是按照元素分数从大到小的顺序给出结果的。</p><ul><li>获得指定分数范围内的元素</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrangebyscore key min max [withscores] [limit offset count]</span><br></pre></td></tr></table></figure><p>第一个可选参数就和字面的意思一样，是带上分数返回，第二个可选参数表示在获得的元素列表的基础上向后偏移 <code>offset</code> 个元素，并且只获取前 <code>count</code> 个元素。</p><ul><li>增加某个元素的分数</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zincrby key increment member</span><br></pre></td></tr></table></figure><p><code>zincrby</code> 可以增加一个元素的分数，返回值是更改后的分数。</p><ul><li>获取集合中元素的数量</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcard key</span><br></pre></td></tr></table></figure><ul><li>获得指定分数范围内的元素个数</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcount key min max</span><br></pre></td></tr></table></figure><ul><li>删除一个或多个元素</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrem key member [member ...]</span><br></pre></td></tr></table></figure><ul><li>按照排名范围删除元素</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zremrangebyrank key start stop</span><br></pre></td></tr></table></figure><ul><li>按照分数范围删除元素</li></ul><p>语法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zremrangebyscore key min max</span><br></pre></td></tr></table></figure><ul><li>获得元素排名</li></ul><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrank key member</span><br><span class="line">zrevrank key member</span><br></pre></td></tr></table></figure><p><code>zrank</code> 会按照元素从小到大的顺序获得元素排名，相反， <code>zrevrank</code> 会按照从大到小的顺序排名。</p><ul><li>计算有序集合的交集</li></ul><p>语法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zinterstore destination numkeys key [key ...] [weights weight [weight ...]] [aggregatesum|min|max]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy 实战：广度优先策略抓取</title>
      <link href="2019/08/22/scrapy-vcbstudio/bf-scrapy/"/>
      <url>2019/08/22/scrapy-vcbstudio/bf-scrapy/</url>
      
        <content type="html"><![CDATA[<h4 id="Scrapy-实战：广度优先策略抓取"><a href="#Scrapy-实战：广度优先策略抓取" class="headerlink" title="Scrapy 实战：广度优先策略抓取"></a><code>Scrapy</code> 实战：广度优先策略抓取</h4><blockquote><p>通过广度优先策略抓取 <code>VCB-Studio</code> 站点文章信息。</p></blockquote><a id="more"></a><h5 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h5><p>首先，选取本次爬取的站点： <code>https://vcb-s.com/</code>，通过观察分析，站点文章采用分页的形式，我们可以先遍历每一页抓取到所有的文章 <code>URL</code> 列表，之后再进入具体文章抓取需要的信息。以上就是广度优先策略抓取。</p><ul><li><code>CrawlSpider</code> </li></ul><p>本次我们以通用爬虫为例， <code>ScrawlSpider</code> 是 <code>Scrapy</code> 提供的一个通用 <code>Spider</code>，在 <code>Spider</code> 里，我们可以指定一些爬取规则来实现页面的爬取，这些爬取规则由一个专门的数据结构 <code>Rule</code> 表示。 <code>Rule</code> 里面包含提取和跟进页面的配置，<code>Spider</code> 会根据 <code>Rule</code> 来确定当前页面中的那些链接需要继续爬取、那些页面的爬取结果需要用哪个方法解析等。</p><p>首先，创建一个 <code>CrawlSpider</code>，我们需要定制一个模板，可以通过以下命令查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider -l</span><br></pre></td></tr></table></figure><p>之前默认使用 <code>basic</code>，现在我们使用 <code>crawl</code> 进行创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider -t crawl source vcb-s.com</span><br></pre></td></tr></table></figure><p>简单修改生成后的模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SourceSpider</span><span class="params">(CrawlSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'source'</span></span><br><span class="line">    allowed_domains = [<span class="string">'vcb-s.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'https://vcb-s.com/'</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r'Items/'</span>), callback=<span class="string">'parse_item'</span>, follow=<span class="literal">True</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = &#123;&#125;</span><br><span class="line">        <span class="comment">#item['domain_id'] = response.xpath('//input[@id="sid"]/@value').get()</span></span><br><span class="line">        <span class="comment">#item['name'] = response.xpath('//div[@id="name"]').get()</span></span><br><span class="line">        <span class="comment">#item['description'] = response.xpath('//div[@id="description"]').get()</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><h5 id="定义-Rule"><a href="#定义-Rule" class="headerlink" title="定义 Rule"></a>定义 <code>Rule</code></h5><p>在 <code>Rule</code> 里面定义规则，爬取当前分页下面的文章链接和后一页的连接，返回到回调函数之后，就可以获取所有分页下的文章链接了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">'archives\/.*'</span>, restrict_css=<span class="string">'#article-list .title-article a'</span>), callback=<span class="string">'parse_item'</span>),</span><br><span class="line">        Rule(LinkExtractor(restrict_css=<span class="string">'.pagination li:last-child a'</span>))</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>使用正则表达式传递给 <code>allow</code> 做参数进行提取。</p><p>运行项目之前我们先设置 <code>settings.py</code>，不读取 <code>robots.txt</code> 和添加 <code>user-agent</code> 伪装为浏览器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">USER_AGENT = <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span></span><br></pre></td></tr></table></figure><p>接下来运行项目，就发现下一页和详情页都被抓取到了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl source</span><br></pre></td></tr></table></figure><p><code>Rule</code> 规则定义十分强大，我们仅用了两行就实现了所有文章链接的提取和下一页的提取。</p><h5 id="定义容器"><a href="#定义容器" class="headerlink" title="定义容器"></a>定义容器</h5><p>在 <code>items.py</code> 中定义我们要提取的字段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VcbstudioItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    collection = <span class="string">'source_list'</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    date = scrapy.Field()</span><br><span class="line">    image = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br><span class="line">    source_url = scrapy.Field()</span><br></pre></td></tr></table></figure><p>这里我们定义了一个 <code>collection</code>，因为之后需要使用 <code>MongoDB</code> 进行存储，在这里先定义一个集合。</p><h5 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h5><p>在提取页面信息的时候，我们不清楚自己定义的规则是否提取到准确的信息时，我们可以通过以下两种方式进行调试：</p><ul><li><code>Scrapy shell</code></li></ul><p>在终端输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell https://vcb-s.com</span><br></pre></td></tr></table></figure><p>这里的 <code>URL</code> 就是我们需要测试的 <code>URL</code>，通过这样来模拟 <code>Scrapy</code> 的请求过程，就可以测试 <code>response</code> 调用的 <code>xpath()</code> 和 <code>css()</code> 的数据提取了</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.css('.title-article h1 a::text').getall()</span><br><span class="line"></span><br><span class="line">response.css('.label i.fa.fa-calendar::text').get()</span><br></pre></td></tr></table></figure><p>查看数据是否被规则正确提取。</p><ul><li>断点调试</li></ul><p>在项目起始目录新建一个测试用例，通过打断点的形式进行测试，查看规则是否正确提取。</p><p>新建 <code>test.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入命令行执行函数模块</span></span><br><span class="line"><span class="keyword">from</span> scrapy.cmdline <span class="keyword">import</span> execute</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调试测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取项目文件位置</span></span><br><span class="line"><span class="comment"># 思路：获取当前位置文件的父文件目录</span></span><br><span class="line">path = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"><span class="comment"># 设置项目的运行起始位置</span></span><br><span class="line">run_path = sys.path.append(path)</span><br><span class="line"><span class="comment"># 执行spider命令进入调试的断点</span></span><br><span class="line">execute([<span class="string">'scrapy'</span>, <span class="string">'crawl'</span>, <span class="string">'source'</span>])</span><br></pre></td></tr></table></figure><p>执行命令中的列表参数就是我们启动项目输入的命令， <code>debug</code> 运行 <code>test.py</code> 就可以在自己设置的断点处查看当前数据的提取情况。</p><h5 id="解析页面"><a href="#解析页面" class="headerlink" title="解析页面"></a>解析页面</h5><p>结合使用调试测试，就可以通过 <code>xpath()</code> 和 <code>css()</code> 提取数据，这里我们换一个方式，让提取信息更规整，使用 <code>ItemLoader</code> 实现配置化提取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> vcbstudio.items <span class="keyword">import</span> VcbstudioItem</span><br><span class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line"></span><br><span class="line">    loader = ItemLoader(item=VcbstudioItem(), response=response)</span><br><span class="line">    loader.add_css(<span class="string">'title'</span>, <span class="string">'.title-article h1 a::text'</span>)</span><br><span class="line">    loader.add_css(<span class="string">'date'</span>, <span class="string">'.label i.fa.fa-calendar::text'</span>)</span><br><span class="line">    loader.add_css(<span class="string">'image'</span>, <span class="string">'.thumbnail img::attr("src")'</span>)</span><br><span class="line">    loader.add_css(<span class="string">'content'</span>, <span class="string">'.centent-article p::text'</span>)</span><br><span class="line">    loader.add_css(<span class="string">'source_url'</span>, <span class="string">'.dw-box.dw-box-download p a::attr("href")'</span>)</span><br><span class="line">    <span class="keyword">yield</span> loader.load_item()</span><br></pre></td></tr></table></figure><p>运行项目，至此，我们已经实现了站点文章信息的全部提取。</p><h5 id="存储文件"><a href="#存储文件" class="headerlink" title="存储文件"></a>存储文件</h5><p>在管道中定义存储方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> vcbstudio.items <span class="keyword">import</span> VcbstudioItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mongo_url, mongo_db)</span>:</span></span><br><span class="line">        self.mongo_url = mongo_url</span><br><span class="line">        self.mongo_db = mongo_db</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls(</span><br><span class="line">            mongo_url=crawler.settings.get(<span class="string">'MONGO_URL'</span>),</span><br><span class="line">            mongo_db=crawler.settings.get(<span class="string">'MONGO_DB'</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.client = pymongo.MongoClient(self.mongo_url)</span><br><span class="line">        self.db = self.client[self.mongo_db]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.client.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(item, VcbstudioItem):</span><br><span class="line">            self.db[item.collection].save(dict(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>同时添加 <code>MongoDB</code> 配置参数到 <code>settings.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MONGO_URL = <span class="string">'localhost'</span></span><br><span class="line">MONGO_DB = <span class="string">'vcb-studio'</span></span><br></pre></td></tr></table></figure><p>启用 <code>Item Pipeline</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">'vcbstudio.pipelines.MongoPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="图片下载"><a href="#图片下载" class="headerlink" title="图片下载"></a>图片下载</h5><p><code>Scrapy</code> 还提供了专门处理下载的 <code>Pipeline</code>，包括文件下载和图片下载，同时支持异步和多线程，十分高效。</p><p>首先，定义文件存储路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IMAGES_STORE = <span class="string">'./images'</span></span><br></pre></td></tr></table></figure><p>定义<code>ImagePipeline</code>:</p><p>内置的 <code>ImagesPipeline</code> 会默认读取 <code>Item</code> 的 <code>image_urls</code> 字段，并认为该字段是一个列表形式，它会遍历 <code>Item</code> 的 <code>image_urls</code> 字段，然后取出每个 <code>URL</code> 进行下载。</p><p>但是现在生成 <code>Item</code> 的图片链接的字段并不是 <code>image_urls</code> 字段， 所以为了实现下载，需要重新定义下载的部分逻辑。我们自定义一个 <code>ImagePipeline</code> ，继承内置的 <code>ImagesPipeline</code> ， 重写几个方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImagePipeline</span><span class="params">(ImagesPipeline)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_path</span><span class="params">(self, request, response=None, info=None)</span>:</span></span><br><span class="line">        url = request.url</span><br><span class="line">        file_name = url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> file_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">item_completed</span><span class="params">(self, results, item, info)</span>:</span></span><br><span class="line">        image_path = [x[<span class="string">'path'</span>] <span class="keyword">for</span> ok, x <span class="keyword">in</span> results <span class="keyword">if</span> ok]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> image_path:</span><br><span class="line">            <span class="keyword">raise</span> DropItem(<span class="string">'Image Downloaded Failed.'</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span><span class="params">(self, item, info)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> item[<span class="string">'image'</span>]:</span><br><span class="line">            <span class="keyword">yield</span> Request(url)</span><br></pre></td></tr></table></figure><p>设置启用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'vcbstudio.pipelines.MongoPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="string">'vcbstudio.pipelines.ImagePipeline'</span>: <span class="number">301</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次启动爬虫，就可以实现边抓取边下载图片了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl source</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scrapy </tag>
            
            <tag> Spider </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy 实现豆瓣图片爬取</title>
      <link href="2019/08/19/scrapy-douban/scrapy/"/>
      <url>2019/08/19/scrapy-douban/scrapy/</url>
      
        <content type="html"><![CDATA[<h4 id="Scrapy-实现豆瓣图片爬取"><a href="#Scrapy-实现豆瓣图片爬取" class="headerlink" title="Scrapy 实现豆瓣图片爬取"></a><code>Scrapy</code> 实现豆瓣图片爬取</h4><blockquote><p>使用 <code>Scrapy</code> 框架爬取豆瓣网站小姐姐图片资源（逃ﾚ(ﾟ∀ﾟ;)ﾍ=3=3=3）。</p></blockquote><a id="more"></a><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><ul><li><code>Scrapy</code> 框架安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install scrapy</span><br></pre></td></tr></table></figure><p>终端输入 <code>scrapy</code> 验证安装成功。</p><ul><li><code>MongoDB</code> 安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mongodb</span><br></pre></td></tr></table></figure><p>终端输入 <code>mongo</code> 验证安装成功。</p><ul><li><code>PyMongo</code> 安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pymongo</span><br></pre></td></tr></table></figure><p>验证安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">pymongo.version</span><br></pre></td></tr></table></figure><h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><p>首先，确定我们爬取的目标，我们以 豆瓣上 <code>gakki</code> 的所有图片为例，从 <code>https://movie.douban.com/celebrity/1018562/photos/</code> 页面开始，爬取所有相关图片页的图片。然后开始创建项目：</p><p>创建一个 <code>Scrapy</code> 项目，项目初始文件可以直接用 <code>scrpay</code> 命令生成，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject gakkiDouban</span><br></pre></td></tr></table></figure><h5 id="创建-Spider"><a href="#创建-Spider" class="headerlink" title="创建 Spider"></a>创建 <code>Spider</code></h5><p><code>Spider</code> 是自己定义的类， <code>Scrapy</code> 用它来从网页里抓取内容，并解析抓取的结果。</p><p><code>Spider</code> 继承 <code>Scrapy</code> 提供的 <code>Spider</code> 类 <code>scrapy.Spider</code>，还要定义 <code>Spider</code> 的名称和起始请求，以及怎样处理爬取后的结果的方法。</p><p>使用命令行创建一个 <code>Spider</code>，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd gakkiDouban</span><br><span class="line">scrapy genspider images movie.douban.com/celebrity/1018562/photos/\?start\=0</span><br></pre></td></tr></table></figure><p>进入刚才创建的文件夹，然后执行 <code>genspider</code> 命令。第一个参数是 <code>Spider</code> 的名称，第二个参数是网站的域名。这里为 <code>?</code> 和 <code>=</code> 添加了转义字符。</p><h5 id="创建-Item"><a href="#创建-Item" class="headerlink" title="创建 Item"></a>创建 <code>Item</code></h5><p><code>Item</code> 是保存爬取数据的容器，它的使用方法和字典类似。不过，相比字典，<code>Item</code> 多了额外的保护机制，可以避免拼写错误或者定义字段错误。</p><p>创建 <code>Item</code> 需要继承 <code>scrapy.Item</code> 类，并且定义类型为 <code>scrapy.Field</code> 的字段。观察目标网站，我们需要获取的内容有 <code>url</code>、<code>page</code>。</p><p>定义 <code>Item</code>，修改 <code>item.py</code> 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GakkidoubanItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    url = scrapy.Field()</span><br><span class="line">    page = scrapy.Field()</span><br></pre></td></tr></table></figure><p>这里定义了两个字段，接下来爬取时我们会使用到这个 <code>Item</code>。</p><h5 id="解析-Response"><a href="#解析-Response" class="headerlink" title="解析 Response"></a>解析 <code>Response</code></h5><p>在创建 <code>Spider</code> 步骤时，我们看到有一个 <code>parse</code> 方法，它的参数 <code>resposne</code> 是 <code>start_urls</code> 里面的链接爬取后的结果。所以在 <code>parse()</code> 方法中，我们可以直接对 <code>response</code> 变量包含的内容进行解析，比如浏览器请求结果的网页源代码，或者进一步分析源代码的内容，或者找出结果中的链接而得到下一个请求。</p><p>这里我们先需要获得定义的字段内容 <code>url</code> 和 <code>page</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line"></span><br><span class="line">    root = response.css(<span class="string">'.article'</span>)</span><br><span class="line">    </span><br><span class="line">    page = root.css(<span class="string">'.thispage::text'</span>).extract_first()</span><br><span class="line">    urls = root.css(<span class="string">'.cover'</span>)</span><br><span class="line">    <span class="keyword">for</span> uri <span class="keyword">in</span> urls:</span><br><span class="line">        url = uri.css(<span class="string">'img::attr("src")'</span>).extract()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>这里的 <code>extract_first()</code> 方法来获取第一个元素， <code>extract()</code> 方法获取整个列表。</p><h5 id="使用-Item"><a href="#使用-Item" class="headerlink" title="使用 Item"></a>使用 <code>Item</code></h5><p><code>Item</code> 可以理解为一个字典，不过在声明的时候需要实例化，然后依次用刚才解析的结果赋值给 <code>Item</code>的每一个字段，最后将 <code>Item</code> 返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gakkiDouban.items <span class="keyword">import</span> GakkidoubanItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line"></span><br><span class="line">    root = response.css(<span class="string">'.article'</span>)</span><br><span class="line">    item = GakkidoubanItem()</span><br><span class="line">    item[<span class="string">'page'</span>] = root.css(<span class="string">'.thispage::text'</span>).extract_first()</span><br><span class="line">    urls = root.css(<span class="string">'.cover'</span>)</span><br><span class="line">    <span class="keyword">for</span> uri <span class="keyword">in</span> urls:</span><br><span class="line">        item[<span class="string">'url'</span>] = uri.css(<span class="string">'img::attr("src")'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><h5 id="后续-Request"><a href="#后续-Request" class="headerlink" title="后续 Request"></a>后续 <code>Request</code></h5><p>获取了页面内容抓取之后，我们还需要从当前页中找到信息生成下一个请求，这样循环往复迭代，实现整站的爬取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line"></span><br><span class="line">    root = response.css(<span class="string">'.article'</span>)</span><br><span class="line">    item = GakkidoubanItem()</span><br><span class="line">    item[<span class="string">'page'</span>] = root.css(<span class="string">'.thispage::text'</span>).extract_first()</span><br><span class="line">    urls = root.css(<span class="string">'.cover'</span>)</span><br><span class="line">    <span class="keyword">for</span> uri <span class="keyword">in</span> urls:</span><br><span class="line">        item[<span class="string">'url'</span>] = uri.css(<span class="string">'img::attr("src")'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">    next_url = response.css(<span class="string">'.paginator .next a::attr("href")'</span>).extract_first()</span><br><span class="line">    url = response.urljoin(next_url)</span><br><span class="line">    <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</span><br></pre></td></tr></table></figure><p>这里我们获取了下一页的链接，然后调用 <code>urljoin()</code> 方法实现了下一个请求，这个方法在 <code>URL</code> 是相对地址时构造一个绝对地址，而如果是绝对地址又保持原样返回。</p><p>最后利用回调函数(<code>callback</code>)再次进入 <code>pares()</code>，就进入了下一页的爬取和解析。</p><h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><p>在 <code>settings.py</code> 中设置 <code>user-agent</code>，伪装成浏览器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT ='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span><br></pre></td></tr></table></figure><p>这里因为域的问题修改一下 <code>spider</code> 文件，使其允许域名为豆瓣主目录，避免提取下一页时地址被过滤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImagesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'images'</span></span><br><span class="line">    allowed_domains = [<span class="string">'movie.douban.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'https://movie.douban.com/celebrity/1018562/photos/]</span></span><br></pre></td></tr></table></figure><p>终端进入项目爬虫目录运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl images</span><br></pre></td></tr></table></figure><p><code>images</code> 是我们上面自定义的 <code>Spider</code> 名称。</p><h5 id="保存到文件"><a href="#保存到文件" class="headerlink" title="保存到文件"></a>保存到文件</h5><p>现在运行完 <code>Scpary</code> 后，我们只能在控制台看到输出结果，如果要将结果保存下来改怎么做呢？</p><p>如需保存成 <code>Json</code> 文件，可以执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl images -o images.json</span><br></pre></td></tr></table></figure><p>这样，运行完成之后，项目内多了一个 <code>images.json</code> 文件，包含了刚才抓取的所有内容。</p><p>如果需要以每个 <code>Item</code> 输入一行 <code>Json</code> ，输出后缀为 <code>jl</code>，为 <code>jsonline</code> 的缩写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl images -o images.jl</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl images -o images.jsonlines</span><br></pre></td></tr></table></figure><p>除了以上格式，还可以自定义其他输出，如 <code>csv</code>, <code>xml</code>, <code>pickle</code>, <code>marshal</code> 和 <code>ftp</code> 远程输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl images -o images.csv</span><br><span class="line">scrapy crawl images -o images.xml</span><br><span class="line">scrapy crawl images -o images.pickle</span><br><span class="line">scrapy crawl images -o images.marshal</span><br><span class="line">scrapy crawl images -o ftp://user:pass@ftp.example.com/path/to/images.csv</span><br></pre></td></tr></table></figure><p>其中，<code>ftp</code> 输出需正确配置用户名、密码、地址、书城路径。</p><h5 id="使用-Item-Pipeline"><a href="#使用-Item-Pipeline" class="headerlink" title="使用 Item Pipeline"></a>使用 <code>Item Pipeline</code></h5><p>如果需要实现更复杂的操作，如将结果保存到数据库，筛选 <code>item</code> 等需要定义 <code>Item Pipeline</code> 来实现。</p><p><code>Item Pipeline</code> 为项目管道，当 <code>Item</code> 生成后，它会自动被送到 <code>Item Pipeline</code> 进行处理，我们常用 <code>Item Pipeline</code> 来实现下面操作：</p><ul><li>清理 <code>HTML</code> 数据</li><li>验证爬取数据，检查爬取字段</li><li>查重并丢弃重复内容</li><li>将爬取结果保存到数据库</li></ul><p>要实现 <code>Item Pipeline</code> ，只需定义一个类并实现 <code>process_item()</code> 方法即可。启用 <code>Item Pipeline</code> 后，<code>Item Pipeline</code> 会自动调用这个方法。<code>process_item()</code> 方法必须返回包含数据的字典或 <code>Item</code> 对象，或者抛出 <code>DropItem</code> 异常。</p><p>实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mongo_url, mongo_db)</span>:</span></span><br><span class="line">        self.mongo_url = mongo_url</span><br><span class="line">        self.mongo_db = mongo_db</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls(</span><br><span class="line">            mongo_url=crawler.settings.get(<span class="string">'MONGO_URL'</span>),</span><br><span class="line">            mongo_db=crawler.settings.get(<span class="string">'MONGO_DB'</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.client = pymongo.MongoClient(self.mongo_url)</span><br><span class="line">        self.db = self.client[self.mongo_db]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.db[self.mongo_db].insert(dict(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.client.close()</span><br></pre></td></tr></table></figure><p>定义好 <code>MongoPipeline</code> 之后，还需要在 <code>settings.py</code> 中使用它，需要定义 <code>MongoDB</code> 连接常量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    'gakkiDouban.pipelines.MongoPipeline': 300,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MONGO_URL = 'localhost'</span><br><span class="line">MONGO_DB = 'gakki_images'</span><br></pre></td></tr></table></figure><p>在重新执行爬取，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl images</span><br></pre></td></tr></table></figure><p>爬取完成之后， <code>MongoDB</code> 中就创建了一个 <code>gakki_images</code> 数据库和 <code>gakki_images</code> 集合。</p><h5 id="一些自定义"><a href="#一些自定义" class="headerlink" title="一些自定义"></a>一些自定义</h5><p>仔细分析豆瓣的 <code>URL</code> 我们会发现，以 <code>https://img3.doubanio.com/view/photo/r/public/p747045173.jpg</code> 为例，网站是通过字符串下标的第 <code>37</code> 位控制加载图片的大小的，豆瓣服务器的图片存储分为 <code>m</code>, <code>l</code>, <code>r</code> 等不同的格式，而 <code>r</code> 对应的就是 <code>row</code>，是存储的最高清的图片格式。</p><p>我们在所有图片页进行爬取，抓到的是 <code>m</code> 缩略图格式，现在需要将 <code>URL</code> 进行修改，获取原生的图片。</p><p>定义一个新的图片处理管道：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SplitPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        url_split = list(item[<span class="string">'url'</span>])</span><br><span class="line">        url_split[<span class="number">37</span>] = <span class="string">'r'</span></span><br><span class="line">        item[<span class="string">'url'</span>] = <span class="string">''</span>.join(url_split)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>同样，在 <code>settings.py</code> 中定义使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    'gakkiDouban.pipelines.SplitPipeline': 300,</span><br><span class="line">    'gakkiDouban.pipelines.MongoPipeline': 400,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次执行爬取，就可以得到 <code>row</code> 豆瓣最高清格式的图片。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scrapy </tag>
            
            <tag> Spider </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云服务器 ftp 的搭建和使用</title>
      <link href="2019/08/17/centos-ftp/ftp-link/"/>
      <url>2019/08/17/centos-ftp/ftp-link/</url>
      
        <content type="html"><![CDATA[<h4 id="云服务器-ftp-的搭建和使用"><a href="#云服务器-ftp-的搭建和使用" class="headerlink" title="云服务器 ftp 的搭建和使用"></a>云服务器 <code>ftp</code> 的搭建和使用</h4><blockquote><p>记录一下 <code>CentOS</code> 远程服务器上 <code>ftp</code> 的搭建和使用，实现上传和下载。</p></blockquote><a id="more"></a><h5 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h5><p><code>FTP</code> 采用客户端/服务端的工作模式（<code>C/S结构</code>），通过 <code>TCP</code> 协议建立客户端和服务器之间的连接，但与其他大多数应用协议不同，FTP协议在客户端和服务端之间建立了两条通信链路，分别是控制链路和数据链路。</p><p>其中，控制链路负责 <code>FTP</code> 会话过程中 <code>FTP</code> 命令的发送和接收，数据链路则负责数据的传输。 <code>FTP</code> 会话包含了两个通道，控制通道和数据通道。</p><p><code>FTP</code> 的工作有两种方式，一种是主动模式，一种是被动模式，以 <code>FTPServer</code> 为参照物，主动模式，服务器主动连接客户端传输，被动模式，等待客户端的的连接 。（无论是主动模式还是被动模式，首先的控制通道都是先建立起来的，只是在数据传输模式上的区别）。</p><h5 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h5><p><code>vsftpd</code> 是 <code>linux</code> 下的一款小巧轻快，安全易用的 <code>FTP</code> 服务器软件，首先我们需要安装它。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y vsftpd</span><br></pre></td></tr></table></figure><p>安装完成后进入文件查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd etc/vsftpd</span><br></pre></td></tr></table></figure><p>相关配置文件：</p><ul><li>主配置文件</li></ul><p><code>/etc/vsftpd/vsftpd.conf</code></p><ul><li>黑名单</li></ul><p><code>/etc/vsftpd/ftpusers</code></p><p>里面的用户不允许访问 <code>FTP</code> 服务器</p><ul><li>白名单</li></ul><p><code>/etc/vsftpd/user_list</code></p><p>允许访问 <code>FTP</code> 服务器的用户列表</p><h5 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h5><ul><li>设置开机自启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable vsftpd.service</span><br></pre></td></tr></table></figure><ul><li>启动 <code>ftp</code> 服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start vsftpd.service</span><br></pre></td></tr></table></figure><ul><li>查看 <code>ftp</code> 服务端口</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -antup | grep ftp</span><br></pre></td></tr></table></figure><p>开通服务器对应的 <code>ftp</code> 端口(<code>21</code>)，便可以使用 <code>ftp</code> 登录。</p><p>登录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 连接到ftp服务器</span></span><br><span class="line">ftp 公网IP</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到pub目录</span></span><br><span class="line">cd pub/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传文件</span></span><br><span class="line">put etc/xxx/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载文件</span></span><br><span class="line">get xxx</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><ul><li>更改权限</li></ul><p>更改 <code>/var/ftp/pub</code> 目录的权限，为 <code>ftp</code> 用户添加写权限，并重新加载配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">更改/var/ftp/pub目录的权限</span></span><br><span class="line">chmod o+w /var/ftp/pub/  </span><br><span class="line"><span class="meta">#</span><span class="bash">重启ftp服务</span></span><br><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure><ul><li>配置本地用户登录</li></ul><p>本地用户登录就是指使用 <code>Linux</code> 操作系统中的用户账号和密码登录 <code>ftp</code> 服务器，<code>vsftp</code> 安装后默只支持匿名 <code>ftp</code> 登录，用户如果试图使用 <code>Linux</code> 操作系统中的账号登录服务器，将会被 <code>vsftpd</code> 拒绝</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建用户akashi</span></span><br><span class="line">useradd akashi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改用户akashi的密码</span></span><br><span class="line">passwd akashi</span><br></pre></td></tr></table></figure><p>回车后根据提示输入新密码完成创建。</p><p>修改 <code>/etc/vsftpd/vsftpd.conf</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">anonymous enable=NO</span><br><span class="line">local_enable=YES</span><br></pre></td></tr></table></figure><p>这样，就可以通过本地用户进行登录了。</p><h5 id="一些参数说明"><a href="#一些参数说明" class="headerlink" title="一些参数说明"></a>一些参数说明</h5><ul><li>用户登陆控制</li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>anonymous_enable=YES</code></td><td>接受匿名用户</td></tr><tr><td><code>no_anon_password=YES</code></td><td>匿名用户 <code>login</code> 时不询问口令</td></tr><tr><td><code>anon_root=(none)</code></td><td>匿名用户主目录</td></tr><tr><td><code>local_enable=YES</code></td><td>接受本地用户</td></tr><tr><td><code>local_root=(none)</code></td><td>本地用户主目录</td></tr></tbody></table><ul><li>用户权限控制</li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>write_enable=YES</code></td><td>可以上传(全局控制)</td></tr><tr><td><code>local_umask=022</code></td><td>本地用户上传文件的 <code>umask</code></td></tr><tr><td><code>file_open_mode=0666</code></td><td>上传文件的权限配合 <code>umask</code> 使用</td></tr><tr><td><code>anon_upload_enable=NO</code></td><td>匿名用户可以上传</td></tr><tr><td><code>anon_mkdir_write_enable=NO</code></td><td>匿名用户可以建目录</td></tr><tr><td><code>anon_other_write_enable=NO</code></td><td>匿名用户修改删除</td></tr><tr><td><code>chown_username=lightwiter</code></td><td>匿名上传文件所属用户名</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> ftp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ftp </tag>
            
            <tag> 远程连接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 安装 Python3 环境</title>
      <link href="2019/08/16/centos/centos/"/>
      <url>2019/08/16/centos/centos/</url>
      
        <content type="html"><![CDATA[<h4 id="CentOS-安装-Python3-环境"><a href="#CentOS-安装-Python3-环境" class="headerlink" title="CentOS 安装 Python3 环境"></a><code>CentOS</code> 安装 <code>Python3</code> 环境</h4><blockquote><p>在云服务器下安装 <code>Python3</code> 环境，系统为 <code>CentOS</code>。</p></blockquote><a id="more"></a><h5 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h5><ul><li>通过 <code>ssh</code> 连接到远程服务器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 22 root@xx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><p>连接到远程服务器，<code>@</code>后接服务器公网 <code>IP</code> 地址，回车后输入连接密码进行远程登录。</p><h5 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h5><blockquote><p><code>CnetOS</code> 默认安装了 <code>Python2</code>，可以通过 <code>which python</code> 找到它的安装位置。所以需要在开始前新建一个目录用于 <code>Python3</code> 的安装。</p></blockquote><ul><li>创建安装 <code>Python3</code> 环境目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/local/python3</span><br></pre></td></tr></table></figure><h5 id="源文件下载"><a href="#源文件下载" class="headerlink" title="源文件下载"></a>源文件下载</h5><ul><li>下载源文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.6.5/Python-3.7.4.tgz</span><br></pre></td></tr></table></figure><ul><li>解压缩包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf Python-3.7.4.tgz</span><br></pre></td></tr></table></figure><ul><li>进入解压目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd Python-3.7.4</span><br></pre></td></tr></table></figure><h5 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h5><ul><li>指定在创建的目录安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./configure --prefix=/usr/local/python3</span><br></pre></td></tr></table></figure><ul><li>编译安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><p>至此，安装完成。在 <code>/usr/local/python3</code> 就可以看见 <code>python3</code> 的文件了。</p><h5 id="设置软连接"><a href="#设置软连接" class="headerlink" title="设置软连接"></a>设置软连接</h5><blockquote><p>为了区分 <code>Python2</code> 和 <code>Python3</code>，需要设置一个软连接让系统环境可以找到 <code>Python3</code> 并使用它。</p></blockquote><ul><li>软连接</li></ul><p><code>python3</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span><br></pre></td></tr></table></figure><p><code>pip3</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure><p>这样，两个版本就可以共存了，我们可以使用 <code>python</code> 来调用 <code>python</code> 环境，<code>python3</code> 来调用 <code>python3</code> 环境。</p><h5 id="解决-yum-Python-版本矛盾"><a href="#解决-yum-Python-版本矛盾" class="headerlink" title="解决 yum Python 版本矛盾"></a>解决 <code>yum</code> <code>Python</code> 版本矛盾</h5><p>如果不幸出现了 <code>yum</code> 失效的情况，需要更改 <code>yum</code> 的配置文件和 <code>urlgrabber-ext-down</code> 文件，（使用以上方法安装一般不会出现失效的情况）</p><ol><li>修改 <code>yum</code> 配置文件，将 <code>python</code> 版本指向以前的旧版本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/bin/yum</span><br></pre></td></tr></table></figure><p>将第一行改成 <code>#!/usr/bin/python2.7</code></p><ol start="2"><li>修改 <code>urlgrabber-ext-down</code> 文件，更改 <code>python</code> 版本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/libexec/urlgrabber-ext-down</span><br></pre></td></tr></table></figure><p>将第一行改成 <code>#!/usr/bin/python2.7</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 环境安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 环境安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django Web 身份验证系统搭建（下）</title>
      <link href="2019/08/15/django-web-2/learn-note-django-2/"/>
      <url>2019/08/15/django-web-2/learn-note-django-2/</url>
      
        <content type="html"><![CDATA[<h4 id="Django-Web-身份验证系统搭建（下）"><a href="#Django-Web-身份验证系统搭建（下）" class="headerlink" title="Django Web 身份验证系统搭建（下）"></a><code>Django Web</code> 身份验证系统搭建（下）</h4><blockquote><p>接上一篇实现用户功能，完善数据库模型。</p></blockquote><a id="more"></a><p>接上一节，这次我们需要创建一个新的应用程序，其中包含与处理用户账户相关的所有功能。还需要对模型稍加修改，让每个主题都归属于特定用户。</p><h5 id="创建用户账户"><a href="#创建用户账户" class="headerlink" title="创建用户账户"></a>创建用户账户</h5><h6 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h6><p>首先，使用 <code>startapp</code> 来创建一个名为 <code>users</code> 的应用程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp users</span><br></pre></td></tr></table></figure><h6 id="添加到-settings-py-中"><a href="#添加到-settings-py-中" class="headerlink" title="添加到 settings.py 中"></a>添加到 <code>settings.py</code> 中</h6><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5z753prgfj21eu0faabo.jpg" alt></p><p>这样，<code>Django</code> 将把应用程序 <code>users</code> 包含到项目中。</p><h6 id="创建应用程序-users-的-URL"><a href="#创建应用程序-users-的-URL" class="headerlink" title="创建应用程序 users 的 URL"></a>创建应用程序 <code>users</code> 的 <code>URL</code></h6><p>首先，在项目层路由中(根目录的<code>urls.py</code>)设计 <code>users</code> 的 <code>URL</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'note/'</span>, include(<span class="string">'learning_logs.urls'</span>)),</span><br><span class="line">    path(<span class="string">'users/'</span>, include(<span class="string">'users.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后，新建应用层(<code>users</code>)的 <code>urls.py</code>，同样，在之后的页面路由中负责转发应用程序 <code>users</code> 的函数方法到视图层。</p><h5 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h5><h6 id="设计应用层的-URL"><a href="#设计应用层的-URL" class="headerlink" title="设计应用层的 URL"></a>设计应用层的 <code>URL</code></h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="comment"># from django.contrib.auth.views import auth_login</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.views <span class="keyword">import</span> LoginView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'login'</span>, LoginView.as_view(template_name=<span class="string">'users/login.html'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注意，和之前不同的是，这一次我们没有设计视图层，而是将请求发送给 <code>Django</code> 的默认视图函数 <code>LoginView</code>，函数参数指明登录模板的位置。</p><h6 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h6><p>在应用 <code>users</code> 下的路径建立模板： <code>users</code> =&gt; <code>templates</code> =&gt; <code>users</code> =&gt; <code>login.html</code></p><p><code>login.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% if form.errors %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your username and password didn't match. Please try again.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/users/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        &#123;&#123; form.as_p &#125;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"submit"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"next"</span> <span class="attr">value</span>=<span class="string">"/note/index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="链接到登录页面"><a href="#链接到登录页面" class="headerlink" title="链接到登录页面"></a>链接到登录页面</h6><p>更改首页 <code>index.html</code>，链接到 <code>login.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span> -</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span> -</span><br><span class="line">        &#123;% if user.is_authenticated %&#125;</span><br><span class="line">            Hello, &#123;&#123; user.username &#125;&#125;.</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/login"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Learning Log helps you keep track of your learning, for any topic you're learning about.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时，可以使用管理员用户进行登录尝试，访问<code>http://127.0.0.1:8000/users/login/</code> 进入登录页面。</p><h5 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h5><p>现在需要提供一个让用户注销的途径，我们不用创建用于注销的页面，而是让用户单击一个链接完成注销并返回到主页。</p><p>为此，需要为链接定义一个 <code>URL</code> 模式，编写一个视图函数，并在首页 <code>index.html</code> 添加一个注销链接。</p><h6 id="注销-URL"><a href="#注销-URL" class="headerlink" title="注销 URL"></a>注销 <code>URL</code></h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.views <span class="keyword">import</span> LoginView</span><br><span class="line"><span class="keyword">import</span> users.views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'login'</span>, LoginView.as_view(template_name=<span class="string">'users/login.html'</span>)),</span><br><span class="line">    path(<span class="string">'logout'</span>, users.views.logout_view)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h6 id="视图函数-logout-view"><a href="#视图函数-logout-view" class="headerlink" title="视图函数 logout_view"></a>视图函数 <code>logout_view</code></h6><p><code>views.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> logout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout_view</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""注销用户"""</span></span><br><span class="line">    logout(request)</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/note/index'</span>)</span><br></pre></td></tr></table></figure><h6 id="链接到注销视图"><a href="#链接到注销视图" class="headerlink" title="链接到注销视图"></a>链接到注销视图</h6><p>在主页添加链接：</p><p><code>index.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span> -</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span> -</span><br><span class="line">        &#123;% if user.is_authenticated %&#125;</span><br><span class="line">            Hello, &#123;&#123; user.username &#125;&#125;.</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/login"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/logout"</span>&gt;</span>logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Learning Log helps you keep track of your learning, for any topic you're learning about.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h5><blockquote><p>接下来就是创建一个让新用户可以注册的页面，我们使用 <code>Django</code> 提供的表单 <code>UserCreationForm</code>。</p></blockquote><h6 id="URL-模式"><a href="#URL-模式" class="headerlink" title="URL 模式"></a><code>URL</code> 模式</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.views <span class="keyword">import</span> LoginView</span><br><span class="line"><span class="keyword">import</span> users.views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'login'</span>, LoginView.as_view(template_name=<span class="string">'users/login.html'</span>)),</span><br><span class="line">    path(<span class="string">'logout'</span>, users.views.logout_view),</span><br><span class="line">    path(<span class="string">'register'</span>, users.views.register)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h6 id="视图函数-register"><a href="#视图函数-register" class="headerlink" title="视图函数 register()"></a>视图函数 <code>register()</code></h6><p><code>views.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> logout, login, authenticate</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.forms <span class="keyword">import</span> UserCreationForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""注册新用户"""</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 显示空的注册表单</span></span><br><span class="line">        form = UserCreationForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 处理填写好的表单</span></span><br><span class="line">        form = UserCreationForm(data=request.POST)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            new_user = form.save()</span><br><span class="line">            authenticate_user = authenticate(</span><br><span class="line">                username=new_user.username, password=request.POST[<span class="string">'password1'</span>]</span><br><span class="line">            )</span><br><span class="line">            login(request, authenticate_user)</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/note/index'</span>)</span><br><span class="line"></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'form'</span>: form</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'users/register.html'</span>, context)</span><br></pre></td></tr></table></figure><h6 id="注册模板"><a href="#注册模板" class="headerlink" title="注册模板"></a>注册模板</h6><p>模板路径：<code>users</code> =&gt; <code>templates</code> =&gt; <code>users</code> =&gt; <code>register.html</code></p><p><code>register.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span> -</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span> -</span><br><span class="line">        &#123;% if user.is_authenticated %&#125;</span><br><span class="line">            Hello, &#123;&#123; user.username &#125;&#125;.</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/logout"</span>&gt;</span>logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/register"</span>&gt;</span>register<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/login"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/users/register"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        &#123;&#123; form.as_p &#125;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"submit"</span>&gt;</span>register<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"next"</span> <span class="attr">value</span>=<span class="string">"/note/index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="链接到注册页面"><a href="#链接到注册页面" class="headerlink" title="链接到注册页面"></a>链接到注册页面</h6><p><code>index.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span> -</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span> -</span><br><span class="line">        &#123;% if user.is_authenticated %&#125;</span><br><span class="line">            Hello, &#123;&#123; user.username &#125;&#125;.</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/logout"</span>&gt;</span>logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/register"</span>&gt;</span>register<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/login"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Learning Log helps you keep track of your learning, for any topic you're learning about.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="让用户拥有自己的数据"><a href="#让用户拥有自己的数据" class="headerlink" title="让用户拥有自己的数据"></a>让用户拥有自己的数据</h5><blockquote><p>用户应该能够输入其专有的数据，因此我们将创建一个系统，确定各项数据所属的用户，再限制对页面的访问，让用户只能使用自己的数据。</p></blockquote><p>我们需要修改模型 <code>Topic</code>，让每个主题都归属于特定用户。这也将影响条目，因为每个条目都属于特定的主题。</p><p>首先，限制对一些页面的访问。</p><h6 id="使用-login-required-限制访问"><a href="#使用-login-required-限制访问" class="headerlink" title="使用 @login_required 限制访问"></a>使用 <code>@login_required</code> 限制访问</h6><blockquote><p><code>Django</code> 提供了装饰器 <code>@login_required</code>，可以实现对于某些页面，只允许已经登录的用户访问它们。</p></blockquote><ol><li>限制对 <code>topics</code> 页面的访问</li></ol><p>只允许已登录的用户请求 <code>topics</code> 页面：</p><p><code>learning_logs/views.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">--snip--</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index_page</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'learning_logs/index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_topics_page</span><span class="params">(request)</span>:</span></span><br><span class="line">    topics_list = Topic.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'learning_logs/topics.html'</span>, &#123;</span><br><span class="line">        <span class="string">'topics'</span>: topics_list</span><br><span class="line">    &#125;)</span><br><span class="line">--snip--</span><br></pre></td></tr></table></figure><p><code>login_required()</code> 的代码检查用户是否已登录，仅当用户已登录时， <code>Django</code> 才会运行 <code>get_topics_page()</code> 的代码；如果用户未登录，就重定向到登录页面。</p><p>为实现这种重定向，我们需要修改 <code>setting.py</code>，让 <code>Django</code> 知道哪里去找登录页面：</p><p>在 <code>setting.py</code> 末尾添加:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOGIN_URL = <span class="string">'/users/login/'</span></span><br></pre></td></tr></table></figure><ol start="2"><li>全面限制对项目的访问</li></ol><p>除主页(<code>get_index_page()</code>、注册页面(<code>register()</code>)和注销页面(<code>logout_view()</code>)，限制其他所有视图函数的页面访问。</p><h6 id="将数据关联到用户"><a href="#将数据关联到用户" class="headerlink" title="将数据关联到用户"></a>将数据关联到用户</h6><p>现在，需要将数据关联到提交它们的用户。我们只需将最高层的数据关联到用户，这样更低层的数据会自动关联到用户。</p><p>下面来修改模型 <code>Topic</code>，在其中添加一个关联到用户的外键。这样以后，必须对数据库进行迁移，最后，对必要的视图进行修改，使其只显示与当前登录用户相关联的数据。</p><ol><li>修改模型 <code>toopic</code></li></ol><p>只涉及两行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    owner = models.ForeignKey(User, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text</span><br></pre></td></tr></table></figure><p>导入模型 <code>User</code>，建立外键关系。</p><ol start="2"><li>确定当前有哪些用户</li></ol><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5zeg3a6u3j21jm0g2tb9.jpg" alt></p><ol start="3"><li>迁移数据库</li></ol><p>知道用户 <code>ID</code> 之后，就可以迁移数据库了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations learning_logs</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5zejsvhenj21oc0f641k.jpg" alt></p><p>这里我们将既有的所有主题关联到了管理用户 <code>akashi</code>上（通过 <code>ID</code>），接下来使用这个值来迁移数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5zenw30s0j21jy06mmyl.jpg" alt></p><h6 id="只允许用户访问自己的主题"><a href="#只允许用户访问自己的主题" class="headerlink" title="只允许用户访问自己的主题"></a>只允许用户访问自己的主题</h6><p>当前，无论以哪一个用户身份登录，都可以看到所有的主题。现在，我们来改变这种情况，只向用户显示属于自己的主题。</p><p>在 <code>views.py</code> 中，对函数 <code>get_topics_page()</code> 做如下修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_topics_page</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""显示主题"""</span></span><br><span class="line">    topics = Topic.objects.filter(owner=request.user).order_by(<span class="string">'date_added'</span>)</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'topics'</span>: topics</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'learning_logs/topics.html'</span>, context)</span><br></pre></td></tr></table></figure><h6 id="保护用户的主题"><a href="#保护用户的主题" class="headerlink" title="保护用户的主题"></a>保护用户的主题</h6><p>现在，我们还没有对显示单个主题的页面访问进行限制，可以通过 <code>URL</code> 对不是当前用户的主题进行查看。</p><p>为修复这种问题，我们在视图函数 <code>get_entry_page()</code> 获取请求的条目前进行检查：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect, Http404</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_entry_page</span><span class="params">(request, topic_id)</span>:</span></span><br><span class="line">    topic = Topic.objects.get(id=topic_id)</span><br><span class="line">    <span class="comment"># 确认请求的主题属于当前用户</span></span><br><span class="line">    <span class="keyword">if</span> topic.owner != request.user:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    entries = topic.entry_set.order_by(<span class="string">'-date_added'</span>)</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'topic'</span>: topic,</span><br><span class="line">        <span class="string">'entries'</span>: entries</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'learning_logs/topic.html'</span>, context)</span><br></pre></td></tr></table></figure><h6 id="保护页面-edit-entry"><a href="#保护页面-edit-entry" class="headerlink" title="保护页面 edit_entry"></a>保护页面 <code>edit_entry</code></h6><p>使用同样的方法，禁止用户通过 <code>URL</code> 来访问其他用户的条目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_entry</span><span class="params">(request, entry_id)</span>:</span></span><br><span class="line">    <span class="string">"""编辑既有条目"""</span></span><br><span class="line">    entry = Entry.objects.get(id=entry_id)</span><br><span class="line">    topic = entry.topic</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> topic.owner != request.user:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 初次请求，使用当前条目填充表单</span></span><br><span class="line">        form = EntryForm(instance=entry)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># post提交的数据，对数据进行处理</span></span><br><span class="line">        form = EntryForm(instance=entry, data=request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect((<span class="string">'/note/topics/'</span> + str(topic.id)))</span><br><span class="line"></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'entry'</span>: entry,</span><br><span class="line">        <span class="string">'topic'</span>: topic,</span><br><span class="line">        <span class="string">'form'</span>: form</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'learning_logs/edit_entry.html'</span>, context)</span><br></pre></td></tr></table></figure><h6 id="将新主题关联到当前用户"><a href="#将新主题关联到当前用户" class="headerlink" title="将新主题关联到当前用户"></a>将新主题关联到当前用户</h6><p>当前，用于添加新主题的页面存在问题，因为它没有将新主题关联到特定的用户。</p><p>以下修复问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_topic</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""添加新主题"""</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 未提交数据：创建一个新表单</span></span><br><span class="line">        form = TopicForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># POST提交的数据，对数据进行处理</span></span><br><span class="line">        form = TopicForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            new_topic = form.save(commit=<span class="literal">False</span>)</span><br><span class="line">            new_topic.owner = request.user</span><br><span class="line">            new_topic.save()</span><br><span class="line">            <span class="comment"># form.save()</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/note/topics'</span>)</span><br><span class="line"></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'form'</span>: form</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'learning_logs/new_topic.html'</span>, context)</span><br></pre></td></tr></table></figure><h5 id="设置项目样式"><a href="#设置项目样式" class="headerlink" title="设置项目样式"></a>设置项目样式</h5><h6 id="第三方应用程序-django-bootstrap3"><a href="#第三方应用程序-django-bootstrap3" class="headerlink" title="第三方应用程序 django-bootstrap3"></a>第三方应用程序 <code>django-bootstrap3</code></h6><p>我们使用 <code>django-bootstrap3</code> 来将 <code>Bootstrap</code> 继承到项目中。这个应用程序下载必要的 <code>Bootstrap</code> 文件，将它们存放到项目的合适位置，让我们可以在项目的模板中使用样式设置指令。</p><p>为安装 <code>django-bootstrap3</code>，在活动的虚拟环境中执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install django-bootstrap3</span><br></pre></td></tr></table></figure><p>接下来，需要在 <code>settings.py</code> 中的 <code>INSTALLED_APPS</code> 中添加如下代码，在项目中包含应用程序 <code>django-bootstrap3</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="string">'bootstrap3'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'learning_logs'</span>,</span><br><span class="line">    <span class="string">'users'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># django-bootstrap3的设置</span></span><br><span class="line">BOOTSTRAP3 = &#123;</span><br><span class="line">    <span class="string">'include_jquery'</span>: <span class="literal">True</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="主页样式-index"><a href="#主页样式-index" class="headerlink" title="主页样式 index"></a>主页样式 <code>index</code></h6><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g60in6rpk3j21z412adk5.jpg" alt></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load bootstrap3 %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% bootstrap_css %&#125;</span><br><span class="line">    &#123;% bootstrap_javascript %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: "plantc", "Source Han Serif", serif;</span><br><span class="line">            font-weight: bolder;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">        footer &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 10px;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transform: translateX(-50%);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default navbar-static-top"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#navbar"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-controls</span>=<span class="string">"navbar"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbar"</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">                &#123;% if user.is_authenticated %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Hello, &#123;&#123; user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/logout"</span>&gt;</span>log out<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/register"</span>&gt;</span>register<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/login"</span>&gt;</span>log in<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Track Your Learning.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Learning Log helps you keep track of your learning, for any topic you're learning about.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/register"</span>&gt;</span>Register an account<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        to make your own Learning Log, and list the topics you're learning about.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Whenever you learn something new about a topic, make an entry summarizing what you're learned.<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Copyright <span class="symbol">&amp;copy;</span> 2019 Akashi_Sai. All Rights Reserved.<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="话题页样式-topics"><a href="#话题页样式-topics" class="headerlink" title="话题页样式 topics"></a>话题页样式 <code>topics</code></h6><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g60ip4mi40j21z4124goe.jpg" alt></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load bootstrap3 %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% bootstrap_css %&#125;</span><br><span class="line">    &#123;% bootstrap_javascript %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: "plantc", "Source Han Serif", serif;</span><br><span class="line">            font-weight: bolder;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">        footer &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 10px;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transform: translateX(-50%);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default navbar-static-top"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#navbar"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-controls</span>=<span class="string">"navbar"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbar"</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">                &#123;% if user.is_authenticated %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Hello, &#123;&#123; user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/logout"</span>&gt;</span>log out<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/register"</span>&gt;</span>register<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/login"</span>&gt;</span>log in<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% for topic in topics %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics/&#123;&#123; topic.id &#125;&#125;"</span>&gt;</span>&#123;&#123; topic &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% empty %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>No topics have been added yet.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/new_topic"</span>&gt;</span>Add new topic<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Copyright <span class="symbol">&amp;copy;</span> 2019 Akashi_Sai. All Rights Reserved.<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="条目页样式-topic"><a href="#条目页样式-topic" class="headerlink" title="条目页样式 topic"></a>条目页样式 <code>topic</code></h6><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g60irkdu9ej21z41240w2.jpg" alt></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load bootstrap3 %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Topic<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% bootstrap_css %&#125;</span><br><span class="line">    &#123;% bootstrap_javascript %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: "plantc", "Source Han Serif", serif;</span><br><span class="line">            font-weight: bolder;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">        footer &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 10px;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transform: translateX(-50%);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default navbar-static-top"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#navbar"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-controls</span>=<span class="string">"navbar"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbar"</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">                &#123;% if user.is_authenticated %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Hello, &#123;&#123; user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/logout"</span>&gt;</span>log out<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/register"</span>&gt;</span>register<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/login"</span>&gt;</span>log in<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Topic: &#123;&#123; topic &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span>&gt;</span>Entries:<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/new_entry/&#123;&#123; topic.id &#125;&#125;"</span>&gt;</span>Add new entry<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% for entry in entries %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">                    &#123;&#123; entry.date_added | date:'M d, Y H:i' &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">small</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/edit_entry/&#123;&#123; entry.id &#125;&#125;"</span>&gt;</span>Edit entry<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">                &#123;&#123; entry.text | linebreaks &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>There are no entries for this topic yet.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Copyright <span class="symbol">&amp;copy;</span> 2019 Akashi_Sai. All Rights Reserved.<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="新建话题-new-topic"><a href="#新建话题-new-topic" class="headerlink" title="新建话题 new_topic"></a>新建话题 <code>new_topic</code></h6><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g60itscxffj21z40dcdgp.jpg" alt></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load bootstrap3 %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>New_Topic<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% bootstrap_css %&#125;</span><br><span class="line">    &#123;% bootstrap_javascript %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: "plantc", "Source Han Serif", serif;</span><br><span class="line">            font-weight: bolder;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">        footer &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 10px;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transform: translateX(-50%);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default navbar-static-top"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#navbar"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-controls</span>=<span class="string">"navbar"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbar"</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">                &#123;% if user.is_authenticated %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Hello, &#123;&#123; user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/logout"</span>&gt;</span>log out<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/register"</span>&gt;</span>register<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/login"</span>&gt;</span>log in<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-herder"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Add a new topic:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/note/new_topic"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        &#123;% bootstrap_form form %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% buttons %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>add topic<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        &#123;% endbuttons %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Copyright <span class="symbol">&amp;copy;</span> 2019 Akashi_Sai. All Rights Reserved.<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="新建条目-new-entry"><a href="#新建条目-new-entry" class="headerlink" title="新建条目 new_entry"></a>新建条目 <code>new_entry</code></h6><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g60ivczx0cj21z40mkab9.jpg" alt></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load bootstrap3 %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>New_Entry<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% bootstrap_css %&#125;</span><br><span class="line">    &#123;% bootstrap_javascript %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: "plantc", "Source Han Serif", serif;</span><br><span class="line">            font-weight: bolder;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">        footer &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 10px;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transform: translateX(-50%);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default navbar-static-top"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#navbar"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-controls</span>=<span class="string">"navbar"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbar"</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">                &#123;% if user.is_authenticated %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Hello, &#123;&#123; user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/logout"</span>&gt;</span>log out<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/register"</span>&gt;</span>register<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/login"</span>&gt;</span>log in<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-herder"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Add a new entry:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/note/new_entry/&#123;&#123; topic.id &#125;&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        &#123;% bootstrap_form form %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% buttons %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>add entry<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        &#123;% endbuttons %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Copyright <span class="symbol">&amp;copy;</span> 2019 Akashi_Sai. All Rights Reserved.<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="编辑条目-edit-entry"><a href="#编辑条目-edit-entry" class="headerlink" title="编辑条目 edit_entry"></a>编辑条目 <code>edit_entry</code></h6><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g60iwpj6afj21z40n6jsr.jpg" alt></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load bootstrap3 %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Edit_Entry<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% bootstrap_css %&#125;</span><br><span class="line">    &#123;% bootstrap_javascript %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: "plantc", "Source Han Serif", serif;</span><br><span class="line">            font-weight: bolder;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">        footer &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 10px;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transform: translateX(-50%);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default navbar-static-top"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#navbar"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-controls</span>=<span class="string">"navbar"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbar"</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">                &#123;% if user.is_authenticated %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Hello, &#123;&#123; user.username &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/logout"</span>&gt;</span>log out<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/register"</span>&gt;</span>register<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users/login"</span>&gt;</span>log in<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-herder"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Edit entry:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/note/edit_entry/&#123;&#123; entry.id &#125;&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        &#123;% bootstrap_form form %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% buttons %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        &#123;% endbuttons %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Copyright <span class="symbol">&amp;copy;</span> 2019 Akashi_Sai. All Rights Reserved.<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="注册-register"><a href="#注册-register" class="headerlink" title="注册 register"></a>注册 <code>register</code></h6><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g60iy7hmnwj21z412478b.jpg" alt></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load bootstrap3 %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% bootstrap_css %&#125;</span><br><span class="line">    &#123;% bootstrap_javascript %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: "plantc", "Source Han Serif", serif;</span><br><span class="line">            font-weight: bolder;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">        footer &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 10px;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transform: translateX(-50%);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Register an account.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/users/register"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        &#123;% bootstrap_form form %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% buttons %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>register<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        &#123;% endbuttons %&#125;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"next"</span> <span class="attr">value</span>=<span class="string">"/note/index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Copyright <span class="symbol">&amp;copy;</span> 2019 Akashi_Sai. All Rights Reserved.<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="登录-login"><a href="#登录-login" class="headerlink" title="登录 login"></a>登录 <code>login</code></h6><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g60izgdwazj21z40gywfl.jpg" alt></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load bootstrap3 %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% bootstrap_css %&#125;</span><br><span class="line">    &#123;% bootstrap_javascript %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: "plantc", "Source Han Serif", serif;</span><br><span class="line">            font-weight: bolder;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">        footer &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 10px;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transform: translateX(-50%);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Log in to your account.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/users/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        &#123;% bootstrap_form form %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% buttons %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>log in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        &#123;% endbuttons %&#125;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"next"</span> <span class="attr">value</span>=<span class="string">"/note/index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Copyright <span class="symbol">&amp;copy;</span> 2019 Akashi_Sai. All Rights Reserved.<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django Web 身份验证系统搭建（上）</title>
      <link href="2019/08/14/django-web-1/learn-note-django-1/"/>
      <url>2019/08/14/django-web-1/learn-note-django-1/</url>
      
        <content type="html"><![CDATA[<h4 id="Django-Web-身份验证系统搭建上）"><a href="#Django-Web-身份验证系统搭建上）" class="headerlink" title="Django Web 身份验证系统搭建上）"></a><code>Django Web</code> 身份验证系统搭建上）</h4><blockquote><p>使用 <code>Django</code> 搭建一个用户注册和身份验证系统，最终实现多用户注册使用的便签系统。</p></blockquote><a id="more"></a><h5 id="建立虚拟环境"><a href="#建立虚拟环境" class="headerlink" title="建立虚拟环境"></a>建立虚拟环境</h5><p>首先，为新项目建立一个目录，命名为 <code>learning_log</code>，进入目录并开始虚拟环境的搭建。</p><h6 id="建立虚拟环境-1"><a href="#建立虚拟环境-1" class="headerlink" title="建立虚拟环境"></a>建立虚拟环境</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv -p python3 ll_env</span><br></pre></td></tr></table></figure><h6 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon ll_env</span><br></pre></td></tr></table></figure><h6 id="安装-Django"><a href="#安装-Django" class="headerlink" title="安装 Django"></a>安装 <code>Django</code></h6><p>这里使用豆瓣源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install django -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><h6 id="在-Django-中创建项目"><a href="#在-Django-中创建项目" class="headerlink" title="在 Django 中创建项目"></a>在 <code>Django</code> 中创建项目</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject learning_log .</span><br></pre></td></tr></table></figure><p>使用命令新建一个 <code>Django</code> 项目，名为 <code>learning_log</code>，末尾的句点(<code>.</code>)让新项目使用合适的目录结构，这样开发完成之后可轻松地将应用程序部署到服务器上。</p><blockquote><p>千万不要忘了句点，否则部署应用程序时会出现一些配置问题。</p></blockquote><h6 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><h6 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span><br></pre></td></tr></table></figure><h5 id="创建应用程序"><a href="#创建应用程序" class="headerlink" title="创建应用程序"></a>创建应用程序</h5><p>保持项目启动的终端运行，重新打开一个终端，进入原项目目录，激活虚拟环境，创建应用程序：</p><p>首先，进入自己的项目目录再激活虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon ll_env</span><br><span class="line">python3 manage.py startapp learning_logs</span><br></pre></td></tr></table></figure><h6 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h6><p>使用 <code>pycharm</code> 打开项目，在应用中打开 <code>models.py</code> 定义模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text</span><br></pre></td></tr></table></figure><h6 id="激活模型"><a href="#激活模型" class="headerlink" title="激活模型"></a>激活模型</h6><p>在 <code>settings.py</code> 中添加程序：</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5y2z60o4sj21f00eo401.jpg" alt></p><ul><li>修改数据库</li></ul><p>修改数据库在 <code>Django</code> 中也称为迁移数据库，使用以下命令完成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations learning_logs</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5y32r2irwj21p403m0th.jpg" alt></p><ul><li>执行迁移文件同步变更到数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><h5 id="Admin-模块管理"><a href="#Admin-模块管理" class="headerlink" title="Admin 模块管理"></a><code>Admin</code> 模块管理</h5><h6 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py createsuperuser</span><br></pre></td></tr></table></figure><p><code>Username</code>: <code>akashi</code><br><code>Password</code>: <code>akashiadmin123</code></p><p>这里只是一个示例，可以自定义。</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5y38z1oo5j21jq05m0tn.jpg" alt></p><h6 id="注册模型"><a href="#注册模型" class="headerlink" title="注册模型"></a>注册模型</h6><p>在应用程序下的 <code>admin.py</code> 进行注册：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> learning_logs.models <span class="keyword">import</span> Topic</span><br><span class="line"></span><br><span class="line">admin.site.register(Topic)</span><br></pre></td></tr></table></figure><p>打开管理页(<code>http://127.0.0.1:8000/admin/</code>)，尝试添加一些主题： <code>Chess</code>、<code>RockClimbin</code></p><h6 id="定义模型-Entry"><a href="#定义模型-Entry" class="headerlink" title="定义模型 Entry"></a>定义模型 <code>Entry</code></h6><p>这时，我们希望可以在学习笔记中添加定义条目的笔记记录，每个条目都与特定的主题相关联，这种关系被称为多对一关系，即多个条目可以关联到同一个主题。</p><p>我们再添加模型 <code>Entry</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    topic = models.ForeignKey(Topic, on_delete=models.CASCADE)</span><br><span class="line">    text = models.TextField()</span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name_plural = <span class="string">'entries'</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text[:<span class="number">50</span>] + <span class="string">"..."</span></span><br></pre></td></tr></table></figure><p>这里我们在 <code>Entry</code> 类中嵌套了 <code>Meta</code> 类， <code>Meta</code> 存储用于管理模型的额外信息，我们让它能够设置一个特殊属性，让 <code>Django</code> 在需要时使用 <code>Entries</code> 来表示多个条目。如果没有这个类， <code>Django</code> 将使用 <code>Entrys</code> 来表示多个条目。</p><h6 id="迁移模型-Entry"><a href="#迁移模型-Entry" class="headerlink" title="迁移模型 Entry"></a>迁移模型 <code>Entry</code></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations learning_logs</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><h6 id="注册模型-1"><a href="#注册模型-1" class="headerlink" title="注册模型"></a>注册模型</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> learning_logs.models <span class="keyword">import</span> Topic, Entry</span><br><span class="line"></span><br><span class="line">admin.site.register(Topic)</span><br><span class="line">admin.site.register(Entry)</span><br></pre></td></tr></table></figure><p>同样，完成后添加一些记录在数据库中。</p><h5 id="创建网页"><a href="#创建网页" class="headerlink" title="创建网页"></a>创建网页</h5><p>使用 <code>Django</code> 创建网页一般分为三个阶段： <code>定义URL</code>、<code>编写视图</code>和<code>编写模板</code>。</p><h6 id="映射-URL"><a href="#映射-URL" class="headerlink" title="映射 URL"></a>映射 <code>URL</code></h6><p>首先，确定页面的存放路径：<code>learning_logs</code> =&gt; <code>templates</code> =&gt; <code>learning_logs</code> =&gt; <code>index.html</code></p><p>根据路径，将项目层的 <code>urls.py</code> 路由到应用层：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'note/'</span>, include(<span class="string">'learning_logs.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在应用层新建 <code>urls.py</code>，然后路由到对应的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> learning_logs.views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'index'</span>, learning_logs.views.get_index_page)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h6 id="编写视图"><a href="#编写视图" class="headerlink" title="编写视图"></a>编写视图</h6><p><code>views.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index_page</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'learning_logs/index.html'</span>)</span><br></pre></td></tr></table></figure><h6 id="编写模板"><a href="#编写模板" class="headerlink" title="编写模板"></a>编写模板</h6><p><code>index.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Learning Log helps you keep track of your learning, for any topic you're learning about.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，通过<code>http://127.0.0.1:8000/note/index</code>便可以访问。</p><h5 id="创建其他网页"><a href="#创建其他网页" class="headerlink" title="创建其他网页"></a>创建其他网页</h5><p>同样，确定页面存放路径：<code>learning_logs</code> =&gt; <code>templates</code> =&gt; <code>learning_logs</code> =&gt; <code>topics.html</code></p><h6 id="映射-URL-1"><a href="#映射-URL-1" class="headerlink" title="映射 URL"></a>映射 <code>URL</code></h6><p>项目层路由使用同一个，无需添加。</p><p>下面设计应用层路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">import</span> learning_logs.views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'index'</span>, learning_logs.views.get_index_page),</span><br><span class="line">    path(<span class="string">'topics'</span>, learning_logs.views.get_topics_page)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h6 id="实现视图层"><a href="#实现视图层" class="headerlink" title="实现视图层"></a>实现视图层</h6><p><code>views.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_topics_page</span><span class="params">(request)</span>:</span></span><br><span class="line">    topics_list = Topic.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'learning_logs/topics.html'</span>, &#123;</span><br><span class="line">        <span class="string">'topics'</span>: topics_list</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h6 id="实现模板"><a href="#实现模板" class="headerlink" title="实现模板"></a>实现模板</h6><p><code>topic.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span> -</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            &#123;% for topic in topics %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; topic &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% empty %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>No topics have been added yet.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="实现特定主题的页面"><a href="#实现特定主题的页面" class="headerlink" title="实现特定主题的页面"></a>实现特定主题的页面</h6><ul><li>路由</li></ul><p><code>learning_logs</code> =&gt; <code>templates</code> =&gt; <code>learning_logs</code> =&gt; <code>topic.html</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">import</span> learning_logs.views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'index'</span>, learning_logs.views.get_index_page),</span><br><span class="line">    path(<span class="string">'topics'</span>, learning_logs.views.get_topics_page),</span><br><span class="line">    path(<span class="string">'topics/&lt;int:topic_id&gt;'</span>, learning_logs.views.get_entry_page)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>视图方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ef get_entry_page(request, topic_id):</span><br><span class="line">    topic = Topic.objects.get(id=topic_id)</span><br><span class="line">    entries = topic.entry_set.order_by(<span class="string">'-date_added'</span>)</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'topic'</span>: topic,</span><br><span class="line">        <span class="string">'entries'</span>: entries</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'learning_logs/topic.html'</span>, context)</span><br></pre></td></tr></table></figure><ul><li>模板</li></ul><p><code>topics.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span> -</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            &#123;% for topic in topics %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics/&#123;&#123; topic.id &#125;&#125;"</span>&gt;</span>&#123;&#123; topic &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% empty %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>No topics have been added yet.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>topic.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span> -</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Topic: &#123;&#123; topic &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Entries:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            &#123;% for entry in entries %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; entry.date_added &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; entry.text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% empty %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>There are no entries for this topic yet.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="用户添加新主题"><a href="#用户添加新主题" class="headerlink" title="用户添加新主题"></a>用户添加新主题</h5><h6 id="导入表单模块"><a href="#导入表单模块" class="headerlink" title="导入表单模块"></a>导入表单模块</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Topic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TopicForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Topic</span><br><span class="line">        fields = [<span class="string">'text'</span>]</span><br><span class="line">        labels = &#123;</span><br><span class="line">            <span class="string">'text'</span>: <span class="string">''</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h6 id="URL-设计"><a href="#URL-设计" class="headerlink" title="URL 设计"></a><code>URL</code> 设计</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">import</span> learning_logs.views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'index'</span>, learning_logs.views.get_index_page),</span><br><span class="line">    path(<span class="string">'topics'</span>, learning_logs.views.get_topics_page),</span><br><span class="line">    path(<span class="string">'topics/&lt;int:topic_id&gt;'</span>, learning_logs.views.get_entry_page),</span><br><span class="line">    path(<span class="string">'new_topic'</span>, learning_logs.views.new_topic)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h6 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> TopicForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_topic</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""添加新主题"""</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 未提交数据：创建一个新表单</span></span><br><span class="line">        form = TopicForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># POST提交的数据，对数据进行处理</span></span><br><span class="line">        form = TopicForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/note/topics'</span>)</span><br><span class="line"></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'form'</span>: form</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'learning_logs/new_topic.html'</span>, context)</span><br></pre></td></tr></table></figure><h6 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h6><p><code>new_topic.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span> -</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Add a new topic:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/note/new_topic"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        &#123;&#123; form.as_p &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"submit"</span>&gt;</span>add topic<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>topics.html</code> 添加链接:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/new_topic"</span>&gt;</span>Add a new topic<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="用户添加新条目"><a href="#用户添加新条目" class="headerlink" title="用户添加新条目"></a>用户添加新条目</h5><h6 id="添加新条目表单"><a href="#添加新条目表单" class="headerlink" title="添加新条目表单"></a>添加新条目表单</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Topic, Entry</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EntryForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Entry</span><br><span class="line">        fields = [<span class="string">'text'</span>]</span><br><span class="line">        labels = &#123;</span><br><span class="line">            <span class="string">'text'</span>: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">        widgets = &#123;</span><br><span class="line">            <span class="string">'text'</span>: forms.Textarea(attrs=&#123;</span><br><span class="line">                <span class="string">'cols'</span>: <span class="number">80</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h6 id="URL-设计-1"><a href="#URL-设计-1" class="headerlink" title="URL 设计"></a><code>URL</code> 设计</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">import</span> learning_logs.views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'index'</span>, learning_logs.views.get_index_page),</span><br><span class="line">    path(<span class="string">'topics'</span>, learning_logs.views.get_topics_page),</span><br><span class="line">    path(<span class="string">'topics/&lt;int:topic_id&gt;'</span>, learning_logs.views.get_entry_page),</span><br><span class="line">    path(<span class="string">'new_topic'</span>, learning_logs.views.new_topic),</span><br><span class="line">    path(<span class="string">'new_entry/&lt;int:topic_id&gt;'</span>, learning_logs.views.new_entry)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h6 id="视图函数-1"><a href="#视图函数-1" class="headerlink" title="视图函数"></a>视图函数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> TopicForm, EntryForm</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_entry</span><span class="params">(request, topic_id)</span>:</span></span><br><span class="line">    <span class="string">"""在特定的主题下添加新条目"""</span></span><br><span class="line">    topic = Topic.objects.get(id=topic_id)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        form = EntryForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = EntryForm(data=request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            new_entry = form.save(commit=<span class="literal">False</span>)</span><br><span class="line">            new_entry.topic = topic</span><br><span class="line">            new_entry.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect((<span class="string">'/note/topics/'</span> + str(topic_id)))</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'topic'</span>: topic,</span><br><span class="line">        <span class="string">'form'</span>: form</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'learning_logs/new_entry.html'</span>, context)</span><br></pre></td></tr></table></figure><h6 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h6><p><code>new_entry</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span> -</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Add a new entry:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/note/new_entry/&#123;&#123; topic.id &#125;&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        &#123;&#123; form.as_p &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"submit"</span>&gt;</span>add entry<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>topic.html</code>:</p><p>添加链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/new_entry/&#123;&#123; topic.id &#125;&#125;"</span>&gt;</span>Add a new entry<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编辑条目"><a href="#编辑条目" class="headerlink" title="编辑条目"></a>编辑条目</h5><h6 id="URL-设计-2"><a href="#URL-设计-2" class="headerlink" title="URL 设计"></a><code>URL</code> 设计</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">import</span> learning_logs.views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'index'</span>, learning_logs.views.get_index_page),</span><br><span class="line">    path(<span class="string">'topics'</span>, learning_logs.views.get_topics_page),</span><br><span class="line">    path(<span class="string">'topics/&lt;int:topic_id&gt;'</span>, learning_logs.views.get_entry_page),</span><br><span class="line">    path(<span class="string">'new_topic'</span>, learning_logs.views.new_topic),</span><br><span class="line">    path(<span class="string">'new_entry/&lt;int:topic_id&gt;'</span>, learning_logs.views.new_entry),</span><br><span class="line">    path(<span class="string">'edit_entry/&lt;int:entry_id&gt;'</span>, learning_logs.views.edit_entry)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h6 id="视图函数-2"><a href="#视图函数-2" class="headerlink" title="视图函数"></a>视图函数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> learning_logs.models <span class="keyword">import</span> Topic, Entry</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_entry</span><span class="params">(request, entry_id)</span>:</span></span><br><span class="line">    <span class="string">"""编辑既有条目"""</span></span><br><span class="line">    entry = Entry.objects.get(id=entry_id)</span><br><span class="line">    topic = entry.topic</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 初次请求，使用当前条目填充表单</span></span><br><span class="line">        form = EntryForm(instance=entry)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># post提交的数据，对数据进行处理</span></span><br><span class="line">        form = EntryForm(instance=entry, data=request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect((<span class="string">'/note/topics/'</span> + str(topic.id)))</span><br><span class="line"></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'entry'</span>: entry,</span><br><span class="line">        <span class="string">'topic'</span>: topic,</span><br><span class="line">        <span class="string">'form'</span>: form</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'learning_logs/edit_entry.html'</span>, context)</span><br></pre></td></tr></table></figure><h6 id="模板-2"><a href="#模板-2" class="headerlink" title="模板"></a>模板</h6><p><code>edit_entry.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Edit_Entry<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics/&#123;&#123; topic.id &#125;&#125;"</span>&gt;</span>Topic - &#123;&#123; topic &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Edit entry:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/note/edit_entry/&#123;&#123; entry.id &#125;&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        &#123;&#123; form.as_p &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"submit"</span>&gt;</span>save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>topic.html</code>:</p><p>链接到页面 <code>edit_entry</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Topic<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/index"</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span> -</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/topics"</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Topic: &#123;&#123; topic &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Entries:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            &#123;% for entry in entries %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; entry.date_added &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; entry.text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/edit_entry/&#123;&#123; entry.id &#125;&#125;"</span>&gt;</span>Edit entry<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% empty %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>There are no entries for this topic yet.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/note/new_entry/&#123;&#123; topic.id &#125;&#125;"</span>&gt;</span>Add a new entry<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，项目已经具备了需要的大部分功能。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuejs 整理笔记</title>
      <link href="2019/08/13/vuejs/vue/"/>
      <url>2019/08/13/vuejs/vue/</url>
      
        <content type="html"><![CDATA[<h4 id="Vue-js-整理笔记"><a href="#Vue-js-整理笔记" class="headerlink" title="Vue.js 整理笔记"></a><code>Vue.js</code> 整理笔记</h4><blockquote><p><code>Vue.js</code> 是一套用于构建用户界面的轻量级的MVVM渐进式前端框架，通过简单的 <code>API</code> 提供高效的数据绑定和灵活的组件系统。</p></blockquote><a id="more"></a><h5 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h5><h6 id="创建第一个-Vue-实例"><a href="#创建第一个-Vue-实例" class="headerlink" title="创建第一个 Vue 实例"></a>创建第一个 <code>Vue</code> 实例</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue.js<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在head中引入Vue.js的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 也可以引用CDN库 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="https://cdn.jsdelivr.net/npm/vue@2.5.22/dist/vue.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    //双括号绑定数据</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建一个Vue实例并作数据绑定</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#root'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                msg: <span class="string">'Hello Vue!'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="comment">// 原生JS写法</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// var dom = document.getElementById("root");</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// dom.innerHTML = "HELLO!";</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>el</code>：是 <code>element</code> 的缩写，指要操作或绑定的元素</p><p><code>data</code>：写需要操作改变的内容。</p><blockquote><p>注意：学 <code>javascript</code> 时，很多时候都是操作 <code>DOM</code> 的模式，而 <code>vue</code> 则更多是操作数据的双向绑定。</p></blockquote><h6 id="挂载点、模板与实例"><a href="#挂载点、模板与实例" class="headerlink" title="挂载点、模板与实例"></a>挂载点、模板与实例</h6><ul><li>挂载点：</li></ul><p>需要操作的元素。例如：<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 并在实例中通过 <code>el: &#39;#app&#39;</code> 进行数据的双向绑定。</p><blockquote><p>Vue只会去处理挂载点下的内容。</p></blockquote><ul><li>模板：</li></ul><p>挂载点内部的内容我们把它叫做模板内容。也可以将模板在实例中编写，不过渲染时要加上 <code>H5</code> 标签例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#root'</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;msg&#125;&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>',</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            msg: <span class="string">'Hello Vue!'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Vue</code> 实例：</li></ul><p>自动根据 <code>el</code>，<code>template</code>，<code>data</code> 数据生成最终的效果。最后放在挂载点之中。</p><h6 id="Vue-实例中的数据、事件和方法"><a href="#Vue-实例中的数据、事件和方法" class="headerlink" title="Vue 实例中的数据、事件和方法"></a><code>Vue</code> 实例中的数据、事件和方法</h6><ul><li><p>插值法:</p></li><li><p>插值表达式</p><ul><li>双大括号<code></code></li></ul></li><li><p>指令</p><ul><li><code>v-text</code> 和 <code>v-html</code></li><li>监听事件指令 <code>v-on</code></li><li>属性绑定指令 <code>v-bind</code></li><li>表单输入绑定指令 <code>v-model</code></li><li>计算属性</li><li>条件渲染：<code>v-if</code> 和 <code>v-show</code></li></ul></li><li><p><code>v-text</code>:</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#root'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                msg: <span class="string">'Hello Vue!'</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">                content: '<span class="tag">&lt;<span class="name">h2</span>&gt;</span>HEOOL!!!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>输出：<code>&lt;h2&gt;HEOOL!!!&lt;/h2&gt;</code></p></blockquote><ul><li><code>v-html</code>:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#root2'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                content: '<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello!!!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5xvqjt0oaj217005wt8s.jpg" alt></p><ul><li><code>v-on</code>:监听事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-on:click绑定点击事件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click</span>=<span class="string">'handleClick'</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                content: <span class="string">'Hello'</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 执行方法</span></span></span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="actionscript">                handleClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 通过操作实例里面的数据，Vue会自动更新。不需要操作DOM</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.content = <span class="string">'Vue!'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>v-on</code>:可以简写为<code>@</code>，即<code>v-on:click</code>等价于<code>@click</code></p></blockquote><h6 id="Vue-中的属性绑定和双向数据绑定"><a href="#Vue-中的属性绑定和双向数据绑定" class="headerlink" title="Vue 中的属性绑定和双向数据绑定"></a><code>Vue</code> 中的属性绑定和双向数据绑定</h6><ul><li><code>v-bind</code>：属性绑定</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:title</span>=<span class="string">'title'</span>&gt;</span>HELLO WORLD!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app2'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                title: <span class="string">'This is hello world'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>v-bind</code>:可以简写为：，即<code>v-bind:title</code>等价于<code>:title</code></p></blockquote><ul><li><code>v-model</code>：双向数据绑定</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'content'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">'content'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app3 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app3'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                content: <span class="string">'This is content'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当 <code>input</code> 框中的数据改变，<code>div</code> 中 <code>content</code> 的内容也会相应的发生改变。</p></blockquote><h6 id="Vue-中的计算属性和侦听器"><a href="#Vue-中的计算属性和侦听器" class="headerlink" title="Vue 中的计算属性和侦听器"></a><code>Vue</code> 中的计算属性和侦听器</h6><ul><li>计算属性：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app4"</span>&gt;</span></span><br><span class="line">        姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'firstName'</span>&gt;</span></span><br><span class="line">        名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'lastName'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app4 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app4'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                firstName: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                lastName: <span class="string">''</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            computed: &#123;</span><br><span class="line"><span class="actionscript">                fullName: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>侦听器</code>：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app4"</span>&gt;</span></span><br><span class="line">        姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'firstName'</span>&gt;</span></span><br><span class="line">        名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'lastName'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app4 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app4'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                firstName: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                lastName: <span class="string">''</span>,</span></span><br><span class="line">                count: 0</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 计算属性</span></span></span><br><span class="line">            computed: &#123;</span><br><span class="line"><span class="actionscript">                fullName: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 侦听器</span></span></span><br><span class="line">            watch: &#123;</span><br><span class="line"><span class="actionscript">                firstName: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.count++</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                lastName: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.count++</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="v-if、v-show-和-v-for-指令"><a href="#v-if、v-show-和-v-for-指令" class="headerlink" title="v-if、v-show 和 v-for 指令"></a><code>v-if</code>、<code>v-show</code> 和 <code>v-for</code> 指令</h6><ul><li><code>v-if</code>：控制 <code>DOM</code> 存在与否</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app5"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">'show'</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handleClick'</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app5 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app5'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                show: <span class="literal">true</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="actionscript">                handleClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.show = !<span class="keyword">this</span>.show;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>v-show</code>：控制 <code>DOM</code> 的显示与否</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app5"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">'show'</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handleClick'</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app5 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app5'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                show: <span class="literal">true</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="actionscript">                handleClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.show = !<span class="keyword">this</span>.show;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>区别：<code>v-if</code> 是直接将 <code>div</code> 在 <code>DOM</code> 中移除；而 <code>v-show</code> 是通过 <code>display：none</code> 来达到隐藏，<code>DOM</code> 结构依然存在。</p></blockquote><ul><li><code>v-for</code>：循环显示</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app5"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">'show'</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handleClick'</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 方法一 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;li v-for='item in list' v-text='item'&gt;&lt;/li&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 方法二 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'(item, index) of list'</span> <span class="attr">:key</span>=<span class="string">'index'</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app5 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app5'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                show: <span class="literal">true</span>,</span></span><br><span class="line">                list: [</span><br><span class="line">                    1, 2, 3</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="actionscript">                handleClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.show = !<span class="keyword">this</span>.show;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Vue-中的组件"><a href="#Vue-中的组件" class="headerlink" title="Vue 中的组件"></a><code>Vue</code> 中的组件</h5><blockquote><p>使用 <code>Vue</code> 中的组件开发一个 <code>TodoList</code></p></blockquote><h6 id="todolist-功能开发"><a href="#todolist-功能开发" class="headerlink" title="todolist 功能开发"></a><code>todolist</code> 功能开发</h6><p><code>Add</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- TodoList --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">'inputValue'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handleSubmit'</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'item in list'</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app6'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            inputValue: <span class="string">'TODO'</span>,</span></span><br><span class="line">            list: []</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            handleSubmit: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.inputValue);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.inputValue = <span class="string">''</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="TodoList-中组件的拆分"><a href="#TodoList-中组件的拆分" class="headerlink" title="TodoList 中组件的拆分"></a><code>TodoList</code> 中组件的拆分</h6><ul><li>全局组件：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">todo-item</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建全局组件</span></span></span><br><span class="line"><span class="actionscript">        Vue.components(<span class="string">'todo-item'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            template: '<span class="tag">&lt;<span class="name">li</span>&gt;</span>item<span class="tag">&lt;/<span class="name">li</span>&gt;</span>'</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>局部组件：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建全局组件</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// Vue.components('todo-item', &#123;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    //     template: '<span class="tag">&lt;<span class="name">li</span>&gt;</span>item<span class="tag">&lt;/<span class="name">li</span>&gt;</span>'</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 局部组件</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> TodoItem = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">li</span>&gt;</span>item<span class="tag">&lt;/<span class="name">li</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app6'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 声明（注册）局部组件</span></span></span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="actionscript">            <span class="string">'todo-item'</span> : TodoItem</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            inputValue: <span class="string">'TODO'</span>,</span></span><br><span class="line">            list: []</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            handleSubmit: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.inputValue);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.inputValue = <span class="string">''</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>父组件向子组件传参</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- TodoList --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">'inputValue'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handleSubmit'</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-for</span>=<span class="string">'(item, index) of list'</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">'index'</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:content</span>=<span class="string">'item'</span> </span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 以属性形式传参:content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建全局组件</span></span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'todo-item'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 子组件接收父组件传进来的参数</span></span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">'content'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;content&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app6'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            inputValue: <span class="string">'TODO'</span>,</span></span><br><span class="line">            list: []</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            handleSubmit: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.inputValue);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.inputValue = <span class="string">''</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="实现TosoList的删除功能"><a href="#实现TosoList的删除功能" class="headerlink" title="实现TosoList的删除功能"></a>实现TosoList的删除功能</h6><ul><li>子组件向父组件通信</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- TodoList --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">'inputValue'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handleSubmit'</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-for</span>=<span class="string">'(item, index) of list'</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">'index'</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:content</span>=<span class="string">'item'</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">:index</span>=<span class="string">'index'</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">delete</span>=<span class="string">'handleDlete'</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 以属性形式传参:content --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 父组件监听子组件delete事件，并执行handleDlete方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建全局组件</span></span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'todo-item'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 子组件接收父组件传进来的参数</span></span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">'content'</span>, <span class="string">'index'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span></span><span class="template-variable">&#123;&#123;content&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>',</span></span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            handleClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 发布订阅模式，子组件发布事件，父组件订阅方法</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$emit(<span class="string">'delete'</span>, <span class="keyword">this</span>.index);    <span class="comment">// 调用$emit方法，触发一个delete自定义事件传入index值</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app6'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            inputValue: <span class="string">'TODO'</span>,</span></span><br><span class="line">            list: []</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            handleSubmit: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.inputValue);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.inputValue = <span class="string">''</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            handleDlete: <span class="function"><span class="keyword">function</span><span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 实现删除功能</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.list.splice(index, <span class="number">1</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Vue-cli（脚手架工具）的使用"><a href="#Vue-cli（脚手架工具）的使用" class="headerlink" title="Vue-cli（脚手架工具）的使用"></a><code>Vue-cli</code>（脚手架工具）的使用</h5><h6 id="脚手架的使用"><a href="#脚手架的使用" class="headerlink" title="脚手架的使用"></a>脚手架的使用</h6><blockquote><p>在考虑到在大型项目中的可维护性，真实的 <code>Vue</code> 项目开发过程中，我们会借助 <code>Webpack</code> 的打包工具，帮助构建大型项目的开发目录。<code>Vue</code> 提供了一个官方的 <code>CLI</code>，为单页面应用 (<code>SPA</code>) 快速搭建繁杂的脚手架。</p></blockquote><ul><li>安装 <code>node</code> 和 <code>npm</code> 环境</li></ul><p>官网<code>https://nodejs.org/en/download/</code>下载安装 <code>node</code>，<code>npm</code> 会附带安装</p><p>终端<code>node -v</code>,<code>npm -v</code>查看是否成功，打印出版本号则为安装成功。</p><ul><li>安装使用淘宝 <code>npm</code> 镜像，加快访问速度</li></ul><p>官网<code>http://npm.taobao.org/</code></p><p>终端命令行输入<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>之后的 <code>npm</code> 命令可以用 <code>cnpm</code> 进行替换，速度上会快一点</p><ul><li>在终端进行全局安装 <code>Vue-cli</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure><ul><li>创建一个基于Webpack模板的新项目</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure><p>涉及项目名、项目描述、作者默认可随意，项目构建选 <code>Runtime + Compiler</code>、是否安装 <code>vue-router</code>视情况而定、代码检查工具<code>ESLint</code>、单元测试工具暂时可以选<code>NO</code>、然后选择 <code>npm</code> 安装</p><ul><li>进入项目，安装依赖</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd my-project</span><br><span class="line">cnpm install </span><br><span class="line">cnpm run dev</span><br></pre></td></tr></table></figure><h6 id="组件化开发-TodoList"><a href="#组件化开发-TodoList" class="headerlink" title="组件化开发 TodoList"></a>组件化开发 <code>TodoList</code></h6><ul><li><code>main.js</code>：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">'./TodoList'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; TodoList &#125;,</span><br><span class="line">  template: <span class="string">'&lt;TodoList/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>TodoList.vue</code>：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>Todo Something<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"inputValue"</span> @<span class="attr">keyup.enter</span>=<span class="string">"handleSubmit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleSubmit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">todo-item</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">"(item, index) of list"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:content</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:index</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">delete</span>=<span class="string">"handleDelete"</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> TodoItem <span class="keyword">from</span> <span class="string">'./components/TodoItem'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="actionscript">    <span class="string">'todo-item'</span>: TodoItem</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      inputValue: <span class="string">''</span>,</span></span><br><span class="line">      list: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="actionscript">    handleSubmit: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.inputValue) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.inputValue);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.inputValue = <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    handleDelete: <span class="function"><span class="keyword">function</span><span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.list.splice(index, <span class="number">1</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line">  font-family: 'Avenir', Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#2c3e50</span>;</span></span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#42b983</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button &#123;</span><br><span class="line"><span class="css">  <span class="selector-tag">background</span>: <span class="selector-id">#42b983</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>components.TodoItem.vue</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todoitem"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">"handleDelete"</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">'content'</span>, <span class="string">'index'</span>],</span></span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="actionscript">    handleDelete: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">'delete'</span>, <span class="keyword">this</span>.index)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">h1, h2 &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">ul &#123;</span><br><span class="line">  list-style-type: none;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">li &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin: 0 10px;</span><br><span class="line">&#125;</span><br><span class="line">a &#123;</span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#42b983</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，已经将原项目改为组件化的形式。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 项目搭建及分页功能实现</title>
      <link href="2019/08/12/django-page/django/"/>
      <url>2019/08/12/django-page/django/</url>
      
        <content type="html"><![CDATA[<h4 id="Django-项目搭建及分页功能实现"><a href="#Django-项目搭建及分页功能实现" class="headerlink" title="Django 项目搭建及分页功能实现"></a><code>Django</code> 项目搭建及分页功能实现</h4><blockquote><p>利用 <code>Django</code> 框架实现一个简易 <code>Web Blog</code></p></blockquote><a id="more"></a><h5 id="Django-安装"><a href="#Django-安装" class="headerlink" title="Django 安装"></a><code>Django</code> 安装</h5><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install django</span><br></pre></td></tr></table></figure><p>确认安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin</span><br></pre></td></tr></table></figure><p>出现提示信息，则安装成功。</p><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m django --version</span><br></pre></td></tr></table></figure><p>输出正确版本信息，则证明安装成功。</p><h5 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h5><h6 id="Django-项目"><a href="#Django-项目" class="headerlink" title="Django 项目"></a><code>Django</code> 项目</h6><ul><li>初始化项目</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject django_introduction</span><br></pre></td></tr></table></figure><ul><li>运行项目</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span><br></pre></td></tr></table></figure><p>可以通过终端提示 <code>http://127.0.0.1:8000/</code> 进行访问：</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5wpgdsnrqj21z412ajv8.jpg" alt></p><ul><li><p>项目目录</p><ul><li><p><code>settings.py</code></p><ul><li>项目配置文件</li><li><code>BASE_DIR</code> 项目根目录</li><li><code>SECRET_KEY</code> 安全码，项目自动生成</li><li><code>DEBUG</code> 调试，<code>true</code> 和 <code>false</code> 可选</li><li><code>ALLOWED_HOSTS</code> 配置允许的地址</li><li><code>INSTALLED_APPS</code> 已安装应用，自己创建的应用需要在这里配置</li><li><code>MIDDLEWARE</code> 中间件即 <code>Django</code> 自带的工具集</li><li><code>ROOT_URLCONF</code> 指向 <code>RUL</code> 的路径</li><li><code>TEMPLATES</code> 模板配置</li><li><code>WSGI_APPLICATION</code></li><li><code>DATABASES</code> 数据库配置，默认是 <code>db.sqlite3</code> <ul><li><code>AUTH_PASSWORD_VALIDATORS</code> 密码认证</li></ul></li><li><code>LANGUAGE_CODE</code> 语言</li><li><code>TIME_ZONE</code> 时区</li><li><code>STATIC_URL</code> 静态文件配置地址</li></ul></li><li><p><code>urls.py</code></p><ul><li>项目路由配置文件</li></ul></li><li><p><code>manage.py</code></p><ul><li>项目管理文件</li><li><code>manage.py</code> 是与项目进行交互的命令行工具集的入口</li></ul></li><li><p><code>wsgi.py</code></p><ul><li><code>python</code> 服务器网关接口，项目与服务器通信的接口</li></ul></li><li><p><code>__init__.py</code> 声明模块的文件，默认内容为空</p></li></ul></li></ul><h6 id="Django-应用"><a href="#Django-应用" class="headerlink" title="Django 应用"></a><code>Django</code> 应用</h6><blockquote><p><code>Djanog</code> 项目与应用是一对多的关系，一个 <code>Django</code> 应用可以包含一组配置和若干个 <code>Django</code> 应用，<code>Django</code> 应用是一个可重用的 <code>Python</code> 软件包。</p></blockquote><ul><li>创建应用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp blog</span><br></pre></td></tr></table></figure><p>添加应用名到 <code>setting.py</code> 中的 <code>INSTALLED_APPS</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'blog.apps.BlogConfig'</span></span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5wp88s4s4j21de0e4ta9.jpg" alt></p><p>参考应用目录 <code>blog</code> =&gt; <code>apps.py</code> =&gt; <code>BlogConfig</code></p><ul><li><p>应用目录</p><ul><li><p><code>views.py</code></p><ul><li>视图处理</li></ul></li><li><p><code>models.py</code></p><ul><li>定义应用模型</li></ul></li><li><p><code>admin.py</code></p><ul><li>定义 <code>admin</code> 模块管理对象</li></ul></li><li><p><code>apps.py</code></p><ul><li>声明应用</li></ul></li><li><p><code>tests.py</code></p><ul><li>编写应用测试用例</li></ul></li><li><p><code>urls.py</code></p><ul><li>（自行创建）管理应用路由</li></ul></li></ul></li><li><p>对视图和路由的理解实例</p></li></ul><p>编写视图函数 <code>views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'hello world!'</span>)</span><br></pre></td></tr></table></figure><p>编写路由配置</p><ol><li>配置应用层次路由</li></ol><p>在 <code>blog</code> 应用下创建 <code>urls.py</code> 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="comment"># 引入刚才实现的视图文件</span></span><br><span class="line"><span class="keyword">import</span> blog.views</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果函数存在，则转发至对应路由位置</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'hello_world'</span>, blog.views.hello_world)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="2"><li>配置项目层次路由</li></ol><p>在项目的 <code>urls.py</code> 文件中实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'blog/'</span>, include(<span class="string">'blog.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这时，启动项目服务器，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span><br></pre></td></tr></table></figure><p>就可以在路由<code>http://127.0.0.1:8000/blog/hello_world</code> 访问。</p><h5 id="模型-Model"><a href="#模型-Model" class="headerlink" title="模型(Model)"></a>模型(<code>Model</code>)</h5><blockquote><p>在 <code>Django</code> 中我们以创建类的形式来创建数据表,对数据库的操作，就是对类和类的对象的操作，即 <code>ORM</code></p></blockquote><h6 id="Model-定义"><a href="#Model-定义" class="headerlink" title="Model 定义"></a><code>Model</code> 定义</h6><p>在 <code>blog</code> 应用的 <code>models.py</code> 中定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 文章唯一ID</span></span><br><span class="line">    article_id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 文章标题</span></span><br><span class="line">    title = models.TextField()</span><br><span class="line">    <span class="comment"># 文章摘要</span></span><br><span class="line">    brief_content = models.TextField()</span><br><span class="line">    <span class="comment"># 文章内容</span></span><br><span class="line">    content = models.TextField()</span><br><span class="line">    <span class="comment"># 文章发布日期</span></span><br><span class="line">    publish_date = models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h6 id="Model-迁移"><a href="#Model-迁移" class="headerlink" title="Model 迁移"></a><code>Model</code> 迁移</h6><blockquote><p>通过模型的迁移将模型定义保存到数据库</p></blockquote><ul><li>创建模型变更的迁移文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5wqbgwisaj21so03sq3r.jpg" alt></p><ul><li>执行迁移文件同步变更到数据库</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5wqevlhzyj21sm0kwgqq.jpg" alt></p><h5 id="Django-shell"><a href="#Django-shell" class="headerlink" title="Django shell"></a><code>Django shell</code></h5><p>使用命令可以进入 <code>Django shell</code> 环境</p><blockquote><p><code>Python shell</code> 用于交互式 <code>Python</code> 编程， <code>Django shell</code>也类似，它继承 <code>Django</code> 项目环境。</p></blockquote><p>临时性操作使用 <code>Djaogo shell</code> 更加方便，它方便开发、调试、 <code>Debug</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py shell</span><br></pre></td></tr></table></figure><ul><li>基本使用<ul><li><code>python manage.py shell</code></li><li><code>from blog.model import Article</code></li><li><code>Article.object.all()</code></li></ul></li></ul><h5 id="Admin-模块"><a href="#Admin-模块" class="headerlink" title="Admin 模块"></a><code>Admin</code> 模块</h5><blockquote><p><code>Django</code> 的后台管理工具，可以读取定义的模型元数据，提供强大的管理使用页面。</p></blockquote><p>管理页面的一般功能：认证用户、显示管理模型、校验输入等。由于管理页面是基础设施中的重要部分，功能又太过于统一，创建太过繁琐，所以 <code>Django</code> 提供了一个强大的 <code>Admin</code> 模块。</p><ul><li>创建创建管理员用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthon3 manage.py createsuperuser</span><br></pre></td></tr></table></figure><p><code>Username</code>: <code>akashi</code>(自定义)<br><code>Email</code>: (选填)<br><code>Password</code>: <code>akashiadmin123</code></p><ul><li>登录页面进行管理</li></ul><p>启动服务器(<code>python3 manage.py runserver</code>)，可以在<code>http://127.0.0.1:8000/admin/</code>登录进行访问。</p><ul><li>将模型注册到 <code>admin</code></li></ul><p>在 <code>blog/admin.py</code> 中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line">admin.site.register(Article)</span><br></pre></td></tr></table></figure><ul><li>文章列表显示标题</li></ul><p>在 <code>models.py</code> 定义一个函数，添加返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><p>重新启动服务： <code>python3 manage.py runserver</code>，便可以返回文章的标题。</p><h5 id="Django-视图和模板"><a href="#Django-视图和模板" class="headerlink" title="Django 视图和模板"></a><code>Django</code> 视图和模板</h5><h6 id="Template"><a href="#Template" class="headerlink" title="Template"></a><code>Template</code></h6><blockquote><p>模板系统的表现形式是文本，用于编写页面表现内容，做到了页面表现形式和表现内容分离。</p></blockquote><p>定义了特有的标签占位符：</p><ul><li>变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;变量&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>for</code> 循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> x <span class="keyword">in</span> list %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><ul><li><code>if-else</code> 循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h6 id="使用模板系统渲染博客页面"><a href="#使用模板系统渲染博客页面" class="headerlink" title="使用模板系统渲染博客页面"></a>使用模板系统渲染博客页面</h6><ul><li>实现博客首页</li></ul><p>新建页面存放路径：<code>blog</code> =&gt; <code>templates</code> =&gt; <code>blog</code> =&gt; <code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Blog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"container page-header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span>&gt;</span> —— by akashi<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container page-body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-9"</span> <span class="attr">role</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body-main"</span>&gt;</span></span><br><span class="line">            &#123;% for article in article_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; article.title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; article.brief_content &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span> <span class="attr">role</span>=<span class="string">"complementary"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>最新文章<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            &#123;% for article in article_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; article.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>views.py</code> 中编辑返回方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index_page</span><span class="params">(request)</span>:</span></span><br><span class="line">    all_article = Article.objects.all()</span><br><span class="line">    <span class="comment"># 渲染模板数据返回</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'blog/index.html'</span>, &#123;</span><br><span class="line">        <span class="string">'article_list'</span>: all_article</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>配置路由，在应用路由 <code>urls.py</code> 中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'index'</span>, blog.views.get_index_page),</span><br></pre></td></tr></table></figure><p>之后便可以在 <code>http://127.0.0.1:8000/blog/index</code> 进行访问。</p><ul><li>博客详情页</li></ul><p>依照首页的步骤，先规划页面路径：<code>blog</code> =&gt; <code>templates</code> =&gt; <code>blog</code> =&gt; <code>detail.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; current_article.title &#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"container page-header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; current_article.title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container page-body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body-main"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;&#123; current_article.content &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_page</span><span class="params">(request)</span>:</span></span><br><span class="line">    current_article = Article.objects.all()[<span class="number">0</span>]</span><br><span class="line">    section_list = current_article.content.split(<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'blog/detail.html'</span>, &#123;</span><br><span class="line">        <span class="string">'current_article'</span>: current_article,</span><br><span class="line">        <span class="string">'section_list'</span>: section_list</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>路由配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'detail'</span>, blog.views.get_detail_page)</span><br></pre></td></tr></table></figure><h5 id="实现文章详情页页面跳转"><a href="#实现文章详情页页面跳转" class="headerlink" title="实现文章详情页页面跳转"></a>实现文章详情页页面跳转</h5><ul><li>文章跳转</li></ul><p>重新规划 <code>URL</code>，传入 <code>article_id</code> 作为参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'detail/&lt;int:article_id&gt;'</span>, blog.views.get_detail_page)</span><br></pre></td></tr></table></figure><p>同时，在视图层以形参的方式传入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_page</span><span class="params">(request, article_id)</span>:</span></span><br><span class="line">    current_article = Article.objects.get(article_id=article_id)</span><br><span class="line">    section_list = current_article.content.split(<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'blog/detail.html'</span>, &#123;</span><br><span class="line">        <span class="string">'current_article'</span>: current_article,</span><br><span class="line">        <span class="string">'section_list'</span>: section_list</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>这样，就可以指定 <code>id</code> 进行文章跳转。</p><ul><li>实现超链接跳转</li></ul><p><code>index.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body-main"</span>&gt;</span></span><br><span class="line">    &#123;% for article in article_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog/detail/&#123;&#123; article.article_id &#125;&#125;"</span>&gt;</span>&#123;&#123; article.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; article.brief_content &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>最新文章<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    &#123;% for article in article_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog/detail/&#123;&#123; article.article_id &#125;&#125;"</span>&gt;</span>&#123;&#123; article.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="实现文章上下篇跳转"><a href="#实现文章上下篇跳转" class="headerlink" title="实现文章上下篇跳转"></a>实现文章上下篇跳转</h5><p>首先，在 <code>detail.html</code> 中添加翻页标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"blog/detail/&#123;&#123; previous_article.article_id &#125;&#125;"</span>&gt;</span>上一篇：&#123;&#123; previous_article.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"blog/detail/&#123;&#123; next_article.article_id &#125;&#125;"</span>&gt;</span>下一篇：&#123;&#123; next_article.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，在 <code>views.py</code> 中添加需要的变量，并添加逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_page</span><span class="params">(request, article_id)</span>:</span></span><br><span class="line"></span><br><span class="line">    current_article = <span class="literal">None</span></span><br><span class="line">    previous_article = <span class="literal">None</span></span><br><span class="line">    next_article = <span class="literal">None</span></span><br><span class="line">    all_article = Article.objects.all()</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> index, article <span class="keyword">in</span> enumerate(all_article):</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            previous_index = <span class="number">0</span></span><br><span class="line">            next_index = index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> index == len(all_article) - <span class="number">1</span>:</span><br><span class="line">            previous_index = index - <span class="number">1</span></span><br><span class="line">            next_index = index</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            previous_index = index - <span class="number">1</span></span><br><span class="line">            next_index = index + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> article.article_id == article_id:</span><br><span class="line">            current_article = article</span><br><span class="line">            previous_article = all_article[previous_index]</span><br><span class="line">            next_article = all_article[next_index]</span><br><span class="line"></span><br><span class="line">    section_list = current_article.content.split(<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'blog/detail.html'</span>, &#123;</span><br><span class="line">        <span class="string">'current_article'</span>: current_article,</span><br><span class="line">        <span class="string">'section_list'</span>: section_list,</span><br><span class="line">        <span class="string">'previous_article'</span>: previous_article,</span><br><span class="line">        <span class="string">'next_article'</span>: next_article</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>这样，就实现了上一页，下一页的跳转。</p><h5 id="实现分页功能"><a href="#实现分页功能" class="headerlink" title="实现分页功能"></a>实现分页功能</h5><p>首页，也是在 <code>index.html</code> 添加分页标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container body-footer clo-md-4 col-md-offset-3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"Page navigation"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Next"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，设计 <code>URL</code> 并获取分页的值：</p><p>设计 <code>URL</code> 如下： <code>http://127.0.0.1:8000/blog/index?page=9</code></p><p>获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index_page</span><span class="params">(request)</span>:</span></span><br><span class="line">    all_article = Article.objects.all()</span><br><span class="line">    page = request.GET.get(<span class="string">'page'</span>)</span><br><span class="line">    <span class="keyword">if</span> page:</span><br><span class="line">        page = int(page)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 赋一个默认值</span></span><br><span class="line">        page = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 渲染模板数据返回</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'blog/index.html'</span>, &#123;</span><br><span class="line">        <span class="string">'article_list'</span>: all_article</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><ul><li>使用 <code>Django</code> 分页组件</li></ul><p>导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入分页组件</span></span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br></pre></td></tr></table></figure><p>获取当前页、上一页、下一页并实现逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index_page</span><span class="params">(request)</span>:</span></span><br><span class="line">    all_article = Article.objects.all()</span><br><span class="line">    page = request.GET.get(<span class="string">'page'</span>)</span><br><span class="line">    <span class="keyword">if</span> page:</span><br><span class="line">        page = int(page)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 赋一个默认值</span></span><br><span class="line">        page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化分页组件</span></span><br><span class="line">    <span class="comment"># 传入文章列表和分页数量</span></span><br><span class="line">    paginator = Paginator(all_article, <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 获取分页数</span></span><br><span class="line">    page_num = paginator.num_pages</span><br><span class="line">    <span class="comment"># 获取当前页</span></span><br><span class="line">    page_article_list = paginator.page(page)</span><br><span class="line">    <span class="comment"># 判断是否有下一页</span></span><br><span class="line">    <span class="keyword">if</span> page_article_list.has_next():</span><br><span class="line">        next_page = page + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        next_page = page</span><br><span class="line">    <span class="comment"># 判断是否有上一页</span></span><br><span class="line">    <span class="keyword">if</span> page_article_list.has_previous():</span><br><span class="line">        previous_page = page - <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        previous_page = page</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 渲染模板数据返回</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'blog/index.html'</span>, &#123;</span><br><span class="line">        <span class="string">'article_list'</span>: page_article_list,</span><br><span class="line">        <span class="string">'page_num'</span>: range(<span class="number">1</span>, page_num + <span class="number">1</span>),</span><br><span class="line">        <span class="string">'current_page'</span>: page,</span><br><span class="line">        <span class="string">'previous'</span>: previous_page,</span><br><span class="line">        <span class="string">'next'</span>: next_page</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>同时，修改分页链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container body-footer clo-md-4 col-md-offset-3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"Page navigation"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog/index?page=&#123;&#123; previous &#125;&#125;"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;%  for num in page_num %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog/index?page=&#123;&#123; num &#125;&#125;"</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog/index?page=&#123;&#123; next &#125;&#125;"</span> <span class="attr">aria-label</span>=<span class="string">"Next"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，就完成了分页功能。</p><h5 id="实现最近文章列表"><a href="#实现最近文章列表" class="headerlink" title="实现最近文章列表"></a>实现最近文章列表</h5><p>通过 <code>order_by</code> 查询并切片获取最新文章列表返回：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index_page</span><span class="params">(request)</span>:</span></span><br><span class="line">    </span><br><span class="line">    all_article = Article.objects.all()</span><br><span class="line">    <span class="comment"># - 表示倒序排序</span></span><br><span class="line">    top3_article_list = Article.objects.order_by(<span class="string">'-publish_date'</span>)[:<span class="number">3</span>]</span><br><span class="line">    </span><br><span class="line">    page = request.GET.get(<span class="string">'page'</span>)</span><br><span class="line">    <span class="keyword">if</span> page:</span><br><span class="line">        page = int(page)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 赋一个默认值</span></span><br><span class="line">        page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化分页组件</span></span><br><span class="line">    <span class="comment"># 传入文章列表和分页数量</span></span><br><span class="line">    paginator = Paginator(all_article, <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 获取分页数</span></span><br><span class="line">    page_num = paginator.num_pages</span><br><span class="line">    <span class="comment"># 获取当前页</span></span><br><span class="line">    page_article_list = paginator.page(page)</span><br><span class="line">    <span class="comment"># 判断是否有下一页</span></span><br><span class="line">    <span class="keyword">if</span> page_article_list.has_next():</span><br><span class="line">        next_page = page + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        next_page = page</span><br><span class="line">    <span class="comment"># 判断是否有上一页</span></span><br><span class="line">    <span class="keyword">if</span> page_article_list.has_previous():</span><br><span class="line">        previous_page = page - <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        previous_page = page</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 渲染模板数据返回</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'blog/index.html'</span>, &#123;</span><br><span class="line">        <span class="string">'article_list'</span>: page_article_list,</span><br><span class="line">        <span class="string">'page_num'</span>: range(<span class="number">1</span>, page_num + <span class="number">1</span>),</span><br><span class="line">        <span class="string">'current_page'</span>: page,</span><br><span class="line">        <span class="string">'previous'</span>: previous_page,</span><br><span class="line">        <span class="string">'next'</span>: next_page,</span><br><span class="line">        <span class="string">'top3_article_list'</span>: top3_article_list</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>修改前端链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span> <span class="attr">role</span>=<span class="string">"complementary"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>最新文章<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        &#123;% for article in top3_article_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog/detail/&#123;&#123; article.article_id &#125;&#125;"</span>&gt;</span>&#123;&#123; article.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，最新文章获取也完成了。</p><p>至此，完成了简易博客的全部功能。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 之可视化工具推荐 —— adminMongo</title>
      <link href="2019/08/10/mongo_admin/adminMongo/"/>
      <url>2019/08/10/mongo_admin/adminMongo/</url>
      
        <content type="html"><![CDATA[<h4 id="MongoDB-之可视化工具推荐-——-adminMongo"><a href="#MongoDB-之可视化工具推荐-——-adminMongo" class="headerlink" title="MongoDB 之可视化工具推荐 —— adminMongo"></a><code>MongoDB</code> 之可视化工具推荐 —— <code>adminMongo</code></h4><blockquote><p>最近学习 <code>MongoDB</code> 发现了一款好用的可视化工具 —— <code>adminMongo</code>，记录一下基本使用。</p></blockquote><a id="more"></a><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p><code>adminMongo</code> 是一个跨平台用户界面(<code>GUI</code>)，用于处理所有 <code>MongoDB</code> 连接/数据库需求。</p><p><code>adminMongo</code> 连接信息(包括用户名/密码)以未加密的方式存储在配置文件中，因此不建议在没有适当安全性考虑的情况下在生产或面向公共的服务器上运行此应用程序。</p><p><code>github</code> 地址： <code>https://github.com/mrvautin/adminMongo</code></p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ol><li>克隆 <code>git</code> 仓库到本地</li></ol><blockquote><p>选取合适的文件目录下终端运行：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mrvautin/adminMongo</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5ul87q9tuj20vo08mjuw.jpg" alt></p><ol start="2"><li>进入目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd adminMongo</span><br></pre></td></tr></table></figure><ol start="3"><li>安装依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5ul8vzr6xj20vo0dagpw.jpg" alt></p><p>终端提示需要安装包和升级可按具体情况运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm xxx     # 看具体缺少哪些包，分别进行安装</span><br><span class="line">npm update  # 进行升级</span><br></pre></td></tr></table></figure><ol start="4"><li>启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm start</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5ul9f9cowj20vo08q40e.jpg" alt></p><p>这时，程序已经启动，并且监听本地的 <code>1234</code> 端口，我们可以打开浏览器进行访问。</p><p>注意：以上 <code>cnpm</code> 为 <code>npm</code> 的国内淘宝镜像源，速度比较快，如果没有配置可以使用 <code>npm</code> 对 <code>cnpm</code> 进行替换即可；或者输入以下命令进行安装使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ol start="5"><li>访问启动后的地址 <code>http://localhost:1234</code></li></ol><p><code>localhost</code> 即本地 <code>IP</code>: <code>127.0.0.1</code></p><p><code>1234</code> 表示程序监听的端口号</p><p>进入地址之后，需要填写连接名称和地址，连接名称可任意命名，这里填入 <code>localhost</code>，地址为：<code>mongodb://127.0.0.1:12017</code></p><p><code>12017</code> 为 <code>MongoDB</code> 默认监听的端口号</p><p>如果提示连接错误，可以尝试以 <code>mongodb://localhost</code> 进行连接</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5ulq8u3vaj21z40l80vc.jpg" alt></p><p>确认之后点击添加连接。</p><ol start="6"><li>连接 <code>MongoDB</code></li></ol><p>添加之后，跳转到连接界面，点击连接进入 <code>MongoDB</code> 数据库：</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5ulrayqebj21z40pgdja.jpg" alt></p><p>这个时候就可以看见本地所有的 <code>MongoDB</code> 数据库了：</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5ulsi4a2nj21z40z0tfr.jpg" alt></p><p>可以随意的进行查询和编辑了：</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5ulsru5m0j21z412446i.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
            <tag> 可视化工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Virtualenv 虚拟环境搭建</title>
      <link href="2019/08/10/python_Virtualenv/env/"/>
      <url>2019/08/10/python_Virtualenv/env/</url>
      
        <content type="html"><![CDATA[<h4 id="Virturalenv-虚拟环境搭建"><a href="#Virturalenv-虚拟环境搭建" class="headerlink" title="Virturalenv 虚拟环境搭建"></a><code>Virturalenv</code> 虚拟环境搭建</h4><blockquote><p>在 <code>Python</code> 的开发中，我们可能会遇到这这样一种情况，当前的项目依赖是某一个 <code>python3</code> 的版本，而另一个项目却是依赖一个 <code>python2</code> 的版本(同一种情况也可能发生在 <code>Diango</code> 中)，这种情况下，在本地同时开发和维护两个版本就会造成版本冲突，<code>virturalenv</code> 就可以解决以上问题。</p></blockquote><a id="more"></a><p><code>VirtualEnv</code> 可以搭建虚拟且独立的 <code>python</code> 运行环境, 使得单个项目的运行环境与其它项目独立起来。同时也可以用于在一台机器上创建多个独立的  <code>python</code> 运行环境， <code>VirtualEnvWrapper</code> 为前者提供了一些便利的命令行上的封装。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure><p>查看安装版本来确认安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --version</span><br></pre></td></tr></table></figure><h6 id="使用豆瓣源"><a href="#使用豆瓣源" class="headerlink" title="使用豆瓣源"></a>使用豆瓣源</h6><blockquote><p>有时使用官方源安装第三方库会出现下载过慢或者超时的情况，这时候可以尝试使用国内的源进行安装。</p></blockquote><ul><li>临时使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pythonModuleName -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><ul><li>永久使用</li></ul><p>需要找到 <code>python</code> 的安装路径，然后找到 <code>Lib/site-packages\pip\commands</code> 下的 <code>search.py</code> 文件，发现里面有如下两行代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pip.models <span class="keyword">import</span> PyPI</span><br><span class="line">default=PyPI.pypi_url,</span><br></pre></td></tr></table></figure><p>可以看出来 <code>PyPI.pypi_url</code> 是从 <code>moudels</code> 模块里导入的，所以要找到 <code>moudels</code> 模板，该模块位于上一级目录，打开 <code>moudels</code> 里面的 <code>index.py</code> 文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PyPI = Index(<span class="string">'https://pypi.python.org/'</span>)</span><br></pre></td></tr></table></figure><p>修改 <code>https://pypi.python.org/</code> 为 <code>https://pypi.douban.com/simple</code></p><h5 id="新建-virtualenv-环境"><a href="#新建-virtualenv-环境" class="headerlink" title="新建 virtualenv 环境"></a>新建 <code>virtualenv</code> 环境</h5><h6 id="新建虚拟环境"><a href="#新建虚拟环境" class="headerlink" title="新建虚拟环境"></a>新建虚拟环境</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv env-test</span><br></pre></td></tr></table></figure><p>这样，我们就创建了一个名为 <code>env-test</code> 的虚拟环境。</p><p>当然，也可以指定安装依赖的 <code>python</code> 版本，使用参数 <code>-p</code> 进行指定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -p python3 py-test</span><br></pre></td></tr></table></figure><h6 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h6><p>进入虚拟环境，进入 <code>bin</code> 目录，使用 <code>source activate</code> 激活虚拟环境，当然也可以一步到位：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source env-test/bin/activate</span><br></pre></td></tr></table></figure><p>这样，就激活了当前的虚拟环境，做到了与其他 <code>Python</code> 项目的环境进行隔离，可以自行安装需要的依赖进行开发了。</p><p><code>Windows</code> 用户进入 <code>Script</code> 目录，运行 <code>activite.bat</code> 进行激活。</p><h6 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h6><p>只需运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p>同样， <code>Windows</code> 用户需要执行脚本退出，运行 <code>deactivate.bat</code> 退出环境。</p><h5 id="安装-virtualenvwrapper"><a href="#安装-virtualenvwrapper" class="headerlink" title="安装 virtualenvwrapper"></a>安装 <code>virtualenvwrapper</code></h5><blockquote><p><code>Virtaulenvwrapper</code> 是 <code>virtualenv</code> 的扩展包管理工具，可以更方便地新增，删除，复制，切换虚拟环境。</p></blockquote><h6 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure><p>安装完成后，需要对 <code>virtualenvwrapper</code> 进行配置:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export WORKON_HOME=~/Envs                       // 虚拟环境存储路径</span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh      // 执行命令封装包</span><br></pre></td></tr></table></figure><blockquote><p>由于每次都需要执行这两部操作，我们可以将其写入终端的配置文件中。例如，如果使用 <code>bash</code>，则添加到 <code>~/.bashrc</code> 中；如果使用 <code>zsh</code>，则添加到 <code>~/.zshrc</code> 中。这样每次启动终端的时候都会自动运行，执行之后 <code>virtualenvwrapper</code> 就可以用啦。</p></blockquote><p>写入配置之后执行生效，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>这里要看自己本机的配置情况，我使用的是 <code>zsh</code>，所以执行 <code>source ~/.zshrc</code>。</p><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><p>现在，可以使用 <code>virtualenvwrapper</code>  新建一个虚拟环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv env-pytest</span><br></pre></td></tr></table></figure><p>激活环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon env-pytest</span><br></pre></td></tr></table></figure><p><code>workon</code> 不带参数可以列出本机所有的虚拟环境:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure><p>所有的命令可使用：<code>virtualenvwrapper --help</code> 进行查看，这里列出几个常用的：</p><ul><li><p>创建基本环境：<code>mkvirtualenv [环境名]</code></p></li><li><p>删除环境：<code>rmvirtualenv [环境名]</code></p></li><li><p>激活/切换环境：<code>workon [环境名]</code></p></li><li><p>退出环境：<code>deactivate</code></p></li><li><p>列出所有环境：<code>workon</code> 或者 <code>lsvirtualenv -b</code></p></li><li><p>查询子虚拟环境列表：<code>lsvirtualenv -b</code></p></li><li><p>查看当前环境已经安装的 <code>Python</code> 安装包：<code>lssitepackages</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
            <tag> 虚拟环境 </tag>
            
            <tag> env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 终端美化方案</title>
      <link href="2019/08/09/mac_prettify/oh-my-zsh/"/>
      <url>2019/08/09/mac_prettify/oh-my-zsh/</url>
      
        <content type="html"><![CDATA[<h4 id="Mac-终端美化方案"><a href="#Mac-终端美化方案" class="headerlink" title="Mac 终端美化方案"></a><code>Mac</code> 终端美化方案</h4><blockquote><p>配合 <code>iTerm2</code> + <code>zsh</code> + <code>oh-my-zsh</code> 打造一个 <code>Mac</code> 终端美化计划。</p></blockquote><a id="more"></a><p>以下是最终效果：</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5ti28b3k0j21z40qqn5h.jpg" alt></p><h5 id="使用-iTerm2"><a href="#使用-iTerm2" class="headerlink" title="使用 iTerm2"></a>使用 <code>iTerm2</code></h5><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install iterm2</span><br></pre></td></tr></table></figure><p>下载完成之后，打开软件，进入设置(<code>Preferences</code>) =&gt; <code>Porfile</code> =&gt; 可以选择颜色(<code>colors</code>)、字体(<code>text</code>)等。</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5skvbwjbbj21fk0p044a.jpg" alt></p><p>这样就可以使用 <code>iTerm2</code> 代替 <code>Mac</code> 默认终端(<code>terminal</code>)。除了强大的功能，所谓颜值就是第一生产力。</p><h5 id="使用-zsh"><a href="#使用-zsh" class="headerlink" title="使用 zsh"></a>使用 <code>zsh</code></h5><p><code>shell</code> 的类型有很多种，<code>Mac</code> 和 <code>Linux</code> 默认使用的是 <code>bash</code>。虽然 <code>bash</code> 也足够使用，但远没有 <code>zsh</code> 强大，界面也不够酷炫，并不是最好的选择。</p><p>而 <code>zsh</code> 功能极其强大，但是配置复杂，直到出现了开源项目 <code>oh my zsh</code>，只需简单的配置，就可以使用。</p><p><code>Mac</code> 下默认安装了 <code>zsh</code>，但不是最新版</p><p>查看当前使用的 <code>shell</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5sfocuy6fj20xc01mt8q.jpg" alt></p><p>查看安装的 <code>shell</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5sfp31ffvj20xc08ot9e.jpg" alt></p><p>查看 <code>zsh</code> 的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsh --version</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5sfq0111jj20xc01kdfy.jpg" alt></p><p>更新 <code>zsh</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure><p>添加到 <code>path</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;export PATH=&quot;/usr/local/opt/ncurses/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><p>切换为 <code>zsh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>重启终端，即可使用 <code>zsh</code>。</p><h5 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh my zsh"></a>安装 <code>oh my zsh</code></h5><p>以下提供三种方式，任选其一：</p><ul><li>使用 <code>git</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure><ul><li>使用 <code>curl</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br></pre></td></tr></table></figure><ul><li>使用 <code>wget</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c "$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5sg0kn6xlj218k0lgmzt.jpg" alt></p><blockquote><p>安装完成以后，默认 <code>Shell</code> 的 <code>~/.bashrc</code> 文件默认不再加载了，替代的是 <code>~/.zlogin</code> 和 <code>~/.zshrc</code>。所以如果在 <code>~/.bashrc</code> 里配置了某些设置，需要把她们复制到 <code>~/.zshrc</code> 中。</p></blockquote><p>或者执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 'source ~/.bashrc' &gt;&gt; ~/.zshrc</span><br><span class="line">echo 'source ~/.bash_profile' &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><ul><li>备份配置文件（可省略）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.zshrc ~/.zshrc.orig</span><br></pre></td></tr></table></figure><h6 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h6><p><code>oh my zsh</code> 提供了数十种主题，相关文件在 <code>~/.oh-my-zsh/themes</code> 目录下，你可以自己选择，也可以自己编写主题。</p><p>参考主题列表：<code>https://github.com/robbyrussell/oh-my-zsh/wiki/themes</code></p><p>在 <code>.zshrc</code> 里找到 <code>ZSH_THEME</code>，就可以设置主题了，默认主题是：<code>ZSH_THEME=&quot;robbyrussell&quot;</code></p><p><code>ZSH_THEME=&quot;random&quot;</code>，主题设置为随机，这样我们每打开一个窗口，都会随机在默认主题中选择一个。</p><p>这里推荐两款常用的颜值比较高的主题： <code>agnoster</code> 和 <code>ys</code></p><ul><li>字体安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/supermarin/powerline-fonts.git</span><br></pre></td></tr></table></figure><p>将该仓库克隆到本地，然后进入工程目录的 <code>Monaco</code> 目录，双击后缀名为 <code>.otf</code> 的字体文件即可完成该字体的安装。安装该字体的原因主要是为了和 <code>Oh-My-Zsh</code> 的 <code>agnoster</code>、<code>powerlevel9k</code> 主题相兼容，如果不安装该字体，那么后面安装 <code>powerlevel9kn</code> 主题后会出现乱码。</p><p><code>agnoster</code> 最终效果：</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5thwq6f8zj21z40nmq8k.jpg" alt></p><h6 id="插件设置"><a href="#插件设置" class="headerlink" title="插件设置"></a>插件设置</h6><p><code>oh my zsh</code> 项目提供了完善的插件体系，相关的文件在 <code>~/.oh-my-zsh/plugins</code> 目录下，默认提供了100多种，大家可以根据自己的实际学习和工作环境采用，想了解每个插件的功能，只要打开相关目录下的 <code>zsh</code> 文件看一下就知道了。插件也是在 <code>.zshrc</code> 里配置，找到 <code>plugins</code> 关键字，你就可以加载自己的插件了，系统默认加载 <code>git</code>，你可以在后面追加内容，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(git zsh-autosuggestions zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure><ul><li>安装 <code>zsh-autosuggestions</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>添加至 <code>plugins</code></p><ul><li>安装 <code>zsh-syntax-highlighting</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>添加至 <code>plugins</code></p><ul><li>安装 <code>incr.zsh</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mimosa-pudica.net/src/incr-0.2.zsh</span><br></pre></td></tr></table></figure><p>将此插件放到 <code>oh-my-zsh</code> 目录的插件库下：</p><p>在 <code>~/.zshrc</code> 文件末尾加上插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 'source ~/.oh-my-zsh/plugins/incr/incr*.zsh' &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><p>更新配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h6 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h6><ul><li>克隆该仓库到 <code>oh-my-zsh</code> 用户自定义主题目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span><br></pre></td></tr></table></figure><p>修改 ~/.zshrc 配置文件，配置该主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME="powerlevel9k/powerlevel9k"</span><br></pre></td></tr></table></figure><p>生效配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>以上，配置完成。还有更多配置、效果随缘更新。</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
            <tag> 终端 </tag>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew 日常使用</title>
      <link href="2019/08/07/brew/homebrew/"/>
      <url>2019/08/07/brew/homebrew/</url>
      
        <content type="html"><![CDATA[<h4 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a><code>Homebrew</code></h4><blockquote><p><code>Homebrew</code> 是一款 <code>Mac OS</code> 平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。</p></blockquote><a id="more"></a><p>包管理工具顾名思义就是程序软件包的安装管理工具， <code>Linux</code> 上有 <code>apt</code>, <code>apt-get</code>, <code>yum</code> 等包管理系统，<code>Mac OS</code> 也有一个优秀的包管理工具，它就是 <code>Homebrew</code>。 当然，<code>Windows</code> 也有类似的管理工具，推荐 <code>Scoop</code>，你可以在<a href="https://scoop.sh/" target="_blank" rel="noopener">这里</a>学习使用。</p><p>那么回到今天的主题，这里是 <code>Homebrew</code> 的官网地址：<code>https://brew.sh/</code></p><h5 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h5><p>在安装 <code>Homebrew</code> 之前，需要将 <code>Xcode Command Line Tools</code> 安装完成，这样就可以使用基于 <code>Xcode Command Line Tools</code> 编译的 <code>Homebrew</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><p>打开终端，输入以下命令，输入密码，完成安装：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></span><br></pre></td></tr></table></figure><p><code>Homebrew</code> 是基于 <code>ruby</code> 的，命令都是通过 <code>ruby</code> 脚本运行，不过不用担心，<code>Mac OS</code> 默认安装了 <code>ruby</code> 环境，可以直接使用命令。</p><p>确认安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew -v</span><br></pre></td></tr></table></figure><p>终端打印出安装版本信息，则证明安装成功。</p><p>你也可以查询帮助信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew -h</span><br></pre></td></tr></table></figure><h6 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h6><p>如果你想进行卸载</p><p>终端输入命令，输入密码，等待卸载完成：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"</span></span><br></pre></td></tr></table></figure><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><h6 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h6><ul><li><p><code>brew install [package]</code>：安装包</p></li><li><p><code>brew uninstall [package]</code>：卸载包</p></li><li><p><code>brew outdated</code>：列出过时的软件</p></li><li><p><code>brew upgrade</code>：更新过时的软件(全部或指定)</p></li><li><p><code>brew update</code>：升级 <code>homebrew</code> 在服务器端上的包目录</p></li><li><p><code>brew list</code>：列出所有安装的包</p></li><li><p><code>brew clean up</code>：清理旧版本缓存</p></li><li><p><code>brew search [package]</code>: 安装包检索</p></li><li><p><code>brew info [package]</code>：安装包信息检索</p></li></ul><h6 id="安装任意包"><a href="#安装任意包" class="headerlink" title="安装任意包"></a>安装任意包</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install [package]</span><br></pre></td></tr></table></figure><p><code>eg</code>: 使用 <code>Homebrew</code> 安装 <code>node</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><h6 id="卸载任意包"><a href="#卸载任意包" class="headerlink" title="卸载任意包"></a>卸载任意包</h6><p>如果你想进行卸载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall [package]</span><br></pre></td></tr></table></figure><p><code>eg</code>: 使用 <code>Homebrew</code> 卸载 <code>Python</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall python</span><br></pre></td></tr></table></figure><h6 id="查询可用包"><a href="#查询可用包" class="headerlink" title="查询可用包"></a>查询可用包</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search [package]</span><br></pre></td></tr></table></figure><p>当不确定是否存在可用的安装包，可以尝试查询，例如我们查询是否存在 <code>wget</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search wget</span><br></pre></td></tr></table></figure><p>如果可以查询到相关信息，就可以根据查询到的名称进行安装使用。</p><h6 id="查询安装列表"><a href="#查询安装列表" class="headerlink" title="查询安装列表"></a>查询安装列表</h6><p>查看本机通过 <code>Homebrew</code> 安装的包:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew list</span><br></pre></td></tr></table></figure><h6 id="查询任意包信息"><a href="#查询任意包信息" class="headerlink" title="查询任意包信息"></a>查询任意包信息</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew list [backage]</span><br></pre></td></tr></table></figure><p>这里查询 <code>git</code> 的相关信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info git</span><br></pre></td></tr></table></figure><h5 id="Homebrew-Cask"><a href="#Homebrew-Cask" class="headerlink" title="Homebrew Cask"></a><code>Homebrew Cask</code></h5><blockquote><p><code>Homebrew Cask</code>可以优雅、简单、快速的安装和管理 <code>OS X</code> 图形界面程序，比如 <code>Google Chrome</code> 和 <code>Dropbox</code>。</p></blockquote><p>这里我们尝试安装 <code>Chrome</code>。</p><p>首先，确认是否存在：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search chrome</span><br></pre></td></tr></table></figure><p>等待搜索完成，我们可以发现，在 <code>casks</code> 一栏有 <code>google-chrome</code> 选项，那么接下来就进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install google-chrome</span><br></pre></td></tr></table></figure><p>更多安装和使用你可以自己去尝试和发现。</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
            <tag> 包管理工具 </tag>
            
            <tag> Homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 初探</title>
      <link href="2019/08/07/mondodb/mongodb/"/>
      <url>2019/08/07/mondodb/mongodb/</url>
      
        <content type="html"><![CDATA[<h4 id="MongoDB-初探"><a href="#MongoDB-初探" class="headerlink" title="MongoDB 初探"></a><code>MongoDB</code> 初探</h4><blockquote><p><code>MongoDB</code> 是由 <code>C++</code> 语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似 <code>JSON</code> 对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。</p></blockquote><a id="more"></a><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><p>这里使用 <code>Mac OS</code> 的包管理工具 <code>Homebrew</code> 进行下载安装，其他系统请自行搜索正确安装姿势。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mongodb</span><br></pre></td></tr></table></figure><p>然后创建一个新文件夹 <code>/data/db</code>，用于存放 <code>MongoDB</code> 数据。</p><p>注意：默认 <code>MongoDB</code> 数据文件是放到根目录 <code>data/db</code> 文件夹下,如果没有这个文件,需要自行创建。</p><h6 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start mongodb</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mongodb</span><br></pre></td></tr></table></figure><h6 id="停止、重启"><a href="#停止、重启" class="headerlink" title="停止、重启"></a>停止、重启</h6><p>停止:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services stop mongodb</span><br></pre></td></tr></table></figure><p>重启:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew serbices restart mongodb</span><br></pre></td></tr></table></figure><h6 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h6><blockquote><p>推荐两个可视化工具。</p></blockquote><ul><li><p><code>RoboMongo/Robo 3T</code></p><ul><li><code>https://robomongo.org/</code></li></ul></li><li><p><code>Studio 3T</code></p><ul><li><code>https://studio3t.com/</code></li></ul></li></ul><h5 id="简介和使用"><a href="#简介和使用" class="headerlink" title="简介和使用"></a>简介和使用</h5><blockquote><p><code>MongoDB</code> 是一个非关系型的数据库，什么叫非关系型？就是把数据直接放进一个大仓库，不标号、不连线、单纯的堆起来。传统数据库由于受到各种关系的累赘，各种数据形式的束缚，特有的约束和关联成为性能瓶颈，难以处理海量数据以及超高并发的业务场景。为了应对海量数据的存储，出现了非关系型数据库，它不支持外键，不支持事务，不支持数据类型约定，就这样松散的数据结构，成就了数据量的扩展。</p></blockquote><h6 id="面向集合的存储"><a href="#面向集合的存储" class="headerlink" title="面向集合的存储"></a>面向集合的存储</h6><p>在 <code>MongoDB</code> 中，一个数据库包含多个集合，类似于 <code>MySQL</code> 中一个数据库包含多个表；一个集合包含多个文档，类似于 <code>MySQL</code> 中一个表包含多条数据。</p><p>可以把集合记为表，文档记为一条记录。</p><p>这样命名是有原因的，因为 <code>MongoDB</code> 没有行列统一的表格式排列，而是采用一个大仓库的形式将所有数据包纳其中。文档也一样，它是一段自由独立的数据，受外部限制少，所以区别于关系型数据库的记录。</p><h6 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h6><ul><li><p>一个 <code>MongoDB</code> 可以创建多个数据库</p></li><li><p>使用 <code>show dbs</code> 可以查询所有数据库的列表</p></li><li><p>执行 <code>db</code> 命令则可以查看当前数据库对象或者集合</p></li><li><p>运行 <code>use</code> 命令可以连接到指定的数据库</p></li></ul><p>注意：数据库名可以是任何字符，但是不能有<code>空格</code>、<code>点号</code>和 <code>$</code> 字符。</p><p>下面实际操作一次，在启动了 <code>MongoDB</code> 服务以后，在终端运行 <code>mongo</code> 可以进入 <code>MongoDB</code> 环境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><p>接下来我们<code>查看</code>所有的<code>数据库列表</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure><p>使用 <code>use</code> 命令<code>创建</code>数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use test</span><br></pre></td></tr></table></figure><p>查询当前的<code>数据库对象</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db</span><br></pre></td></tr></table></figure><p>再次查看所有数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure><p>列出的所有数据库中看不到 <code>test</code> 或者显示 <code>test(empty)</code> ，因为 <code>test</code> 为空，里面没有任何东西，<code>MongoDB</code> 不显示或显示 <code>test(empty)</code>。</p><p><code>销毁</code>数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><p>这样，刚刚创建的数据库就被销毁了。</p><p>使用 <code>exit</code> 退出 <code>MongoDB</code> 环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h6 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h6><p>集合就是一组文档的组合，就相当于是 <code>关系数据库中的表</code>，在 <code>MongoDB</code> 中可以存储不同的文档结构的文档。</p><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"user"</span>: <span class="string">"akashi"</span>&#125; &#123;<span class="attr">"idol"</span>: <span class="string">"nogizaka"</span>, <span class="attr">"member"</span>: <span class="string">"asuka"</span>&#125;</span><br></pre></td></tr></table></figure><p>上面的两个文档就可以存储在同一个集合中，在关系型数据库中是很难实现上述数据结构的，要么需要定义大量的字段，对于一些字段名不确定的属性，关系型数据库会更加力不从心。</p><h6 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h6><p>文档是 <code>MongoDB</code> 的核心，类似于<code>关系型数据库的每一条数据</code>，多个键及其关联的值放在一起就是文档。在 <code>Mongodb</code> 中使用一种类 <code>json</code> 的 <code>bson</code> 存储数据，<code>bson</code> 数据可以理解为在 <code>json</code> 的基础上添加了一些 <code>json</code> 中没有的数据类型。</p><ul><li>文档的逻辑关系</li></ul><p>例如有以下两个文档：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># user文档</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"akashi"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">"sex"</span>: <span class="string">"male"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># address文档</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"building"</span>: <span class="string">"22 A, Indiana Apt"</span>,</span><br><span class="line">    <span class="attr">"pincode"</span>: <span class="number">123456</span>,</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"chengdu"</span>,</span><br><span class="line">    <span class="attr">"state"</span>: <span class="string">"sichuan"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>嵌入式关系:</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"akashi"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">"sex"</span>: <span class="string">"male"</span>,</span><br><span class="line">    <span class="attr">"address"</span>:</span><br><span class="line">    [&#123;</span><br><span class="line">        <span class="attr">"building"</span>: <span class="string">"22 A, Indiana Apt"</span>,</span><br><span class="line">        <span class="attr">"pincode"</span>: <span class="number">123456</span>,</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"chengdu"</span>,</span><br><span class="line">        <span class="attr">"state"</span>: <span class="string">"sichuan"</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">"building"</span>: <span class="string">"170 A, Acropolis Apt"</span>,</span><br><span class="line">        <span class="attr">"pincode"</span>: <span class="number">456789</span>,</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"beijing"</span>,</span><br><span class="line">        <span class="attr">"state"</span>: <span class="string">"beijing"</span></span><br><span class="line">   &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>引用式关系:</li></ol><blockquote><p>将两个文档分开，通过引用文档的_id 字段来建立关系。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"akashi"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">"sex"</span>: <span class="string">"male"</span>,</span><br><span class="line">    <span class="attr">"address_ids"</span>: [</span><br><span class="line">        ObjectId(<span class="string">"52ffc4a5d85242602e000000"</span>)    #对应address文档的id字段</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际应用的时候，<code>嵌入式</code> 关系比较适合 <code>一对一</code> 的关系，<code>引用式</code> 关系比较适合 <code>一对多</code> 或者 <code>多对多</code> 的情况。</p><h6 id="原数据"><a href="#原数据" class="headerlink" title="原数据"></a>原数据</h6><p>数据库的信息存储在集合中，他们统一使用系统的命名空间：<code>DBNAME.system.*</code>。</p><p><code>DBNAME</code> 可用 <code>db</code> 或数据库名替代：</p><ul><li><p><code>DBNAME.system.namespaces</code> ：列出所有名字空间</p></li><li><p><code>DBNAME.system.indexs</code> ：列出所有索引</p></li><li><p><code>DBNAME.system.profile</code> ：列出数据库概要信息</p></li><li><p><code>DBNAME.system.users</code> ：列出访问数据库的用户</p></li><li><p><code>DBNAME.system.sources</code> ：列出服务器信息</p></li></ul><h6 id="集合的创建和删除"><a href="#集合的创建和删除" class="headerlink" title="集合的创建和删除"></a>集合的创建和删除</h6><ul><li>创建集合</li></ul><p>在数据库 <code>test</code> 中创建一个集合 <code>users</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use test</span><br><span class="line">db.createCollection(&quot;users&quot;)</span><br></pre></td></tr></table></figure><p>查看创建的集合：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure><ul><li>删除集合</li></ul><p>删除刚刚创建的集合 <code>users</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.drop()</span><br></pre></td></tr></table></figure><p>查看是否删除成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure><h6 id="向集合中插入数据"><a href="#向集合中插入数据" class="headerlink" title="向集合中插入数据"></a>向集合中插入数据</h6><ul><li>使用 <code>insert()</code></li></ul><p>插入数据时，如果 <code>users</code> 集合没有创建会自动创建。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.users.insert([</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"akashi"</span>,</span><br><span class="line">        <span class="attr">"email"</span>: <span class="string">"akashisai@163.com"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        "name": "asuka",</span><br><span class="line">        "email": "asuka@163.com"</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>使用 <code>save()</code></li></ul><p>插入数据时，如果 <code>users</code> 集合没有创建会自动创建。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.users.save(&#123;</span><br><span class="line">    "name": "akashi",</span><br><span class="line">    "email": "akashi_sai@163.com"</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>insert</code> 和 <code>save</code> 的区别：<code>insert</code> 是插入，侧重于新增一个记录的含义；<code>save</code> 是保存，可以保存一个新的记录，也可以保存对一个记录的修改。因此，<code>insert</code> 不能插入一条已经存在的记录，如果已经有了一条记录(以主键为准)，<code>insert</code> 操作会报错，而使用 <code>save</code> 指令则会更新原记录。</p><h5 id="阶段小结"><a href="#阶段小结" class="headerlink" title="阶段小结"></a>阶段小结</h5><p>到这里我们大致了解了非关系型数据库和关系型数据库的差异，现在我们来做一个阶段小结。</p><p>关系型数据库的结构一般是 <code>数据库database</code> =&gt; <code>表table</code> =&gt; <code>字段field</code>，就像下面这样：</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5rb519ad6j20rs02y0sp.jpg" alt></p><p>而非关系型数据库的结构一般是 <code>数据库database</code> =&gt; <code>集合collection</code> =&gt; <code>文档document</code>，像下面这样：</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5rbb2cb5hj20rs03kjre.jpg" alt></p><p>在充分理解差异之后，才能很好的将两者区分开来，不至于混淆。</p><h5 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h5><h6 id="find"><a href="#find" class="headerlink" title="find()"></a><code>find()</code></h6><p>语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find()</span><br></pre></td></tr></table></figure><p>以之前创建的 <code>users</code> 集合为例：</p><ul><li>查询所有文档</li></ul><p>查询数据，不加任何参数默认返回所有数据记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find()</span><br></pre></td></tr></table></figure><ul><li>添加查询条件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;&quot;name&quot;: &quot;akashi&quot;&#125;)</span><br></pre></td></tr></table></figure><h6 id="pretty"><a href="#pretty" class="headerlink" title="pretty()"></a><code>pretty()</code></h6><blockquote><p><code>pretty()</code> 可以使查询输出的结果更美观。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find().pretty()</span><br></pre></td></tr></table></figure><p>如果你想让 <code>mongo shell</code> 始终以 <code>pretty</code> 的方式显示返回数据，可以通过下面的指令实现（退出环境，在终端输入）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "DBQuery.prototype._prettyShell = true" &gt;&gt; ~/.mongorc.js</span><br></pre></td></tr></table></figure><p>这样就把默认的显示方式设置为 <code>pretty</code> 了。</p><h6 id="AND"><a href="#AND" class="headerlink" title="AND"></a><code>AND</code></h6><blockquote><p><code>MongoDB</code> 不需要类似于其他数据库的 <code>AND</code> 运算符，当 <code>find()</code> 中传入多个键值对时，<code>MongoDB</code> 就会将其作为 <code>AND</code> 查询处理。</p></blockquote><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.mycol.find(&#123; key1: value1, key2: value2 &#125;)</span><br></pre></td></tr></table></figure><h6 id="OR"><a href="#OR" class="headerlink" title="OR"></a><code>OR</code></h6><blockquote><p><code>MongoDB</code> 中，<code>OR</code> 查询语句以 <code>$or</code> 作为关键词，用法如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;</span><br><span class="line">    $or: [</span><br><span class="line">        &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h6><p><code>$gt</code> 表示<code>大于</code>、<code>$lt</code> 表示<code>小于</code>、<code>$gte</code> 表示<code>大于等于</code>、<code>$lte</code> 表示<code>小于等于</code>、<code>$ne</code> 表示<code>不等于</code>。</p><p>可以这样记忆：</p><table><thead><tr><th>表达式</th><th>意义</th><th>描述</th></tr></thead><tbody><tr><td><code>gt</code>：</td><td>大于</td><td><code>greater than</code></td></tr><tr><td><code>lt</code>：</td><td>小于</td><td><code>less than</code></td></tr><tr><td><code>gte</code>：</td><td>大于或等于</td><td><code>greater than equal</code></td></tr><tr><td><code>lte</code>：</td><td>小于或等于</td><td><code>less than equal</code></td></tr></tbody></table><h5 id="文档基本操作"><a href="#文档基本操作" class="headerlink" title="文档基本操作"></a>文档基本操作</h5><h6 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h6><p>语法：</p><ul><li><code>db.dropDatabase()</code>：删除数据库</li></ul><p>在当前数据库对象下执行语句，即可删除数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用 db 查询当前数据库对象</span><br><span class="line">db</span><br><span class="line"></span><br><span class="line"># 删除当前数据库</span><br><span class="line">db.dropDatabase</span><br></pre></td></tr></table></figure><h6 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h6><p>语法：</p><ul><li><code>createCollection(name,options)</code>：创建集合</li></ul><p>参数描述:</p><ul><li><code>name</code>：创建的集合名称</li><li><code>options</code>：是一个作为初始化的文档(可选)</li></ul><p>之前我们创建过无参数的集合，下面我们尝试创建一个带参数的集合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(&quot;user&quot;, &#123; capped : 1, autoIndexId : 1, size : 6142800, max : 10000 &#125; ) #带参数</span><br></pre></td></tr></table></figure><p>参数描述：</p><ul><li><code>capped</code>：类型为 <code>Boolean</code>，如果为 <code>true</code> 则创建一个固定大小的集合，当其条目达到最大时可以自动覆盖以前的条目。在设置其为 <code>true</code> 时也要指定参数大小；注意：固定集合的数据不能被修改，只能查找 =&gt; 删除 =&gt; 再插入；</li><li><code>autoIndexId</code>：类型为 <code>Boolean</code>，默认为 <code>false</code>，如果设置为 <code>true</code>，则会在 <code>_id</code> 字段上自动创建索引；</li><li><code>size</code>：如果 <code>capped</code> 为 <code>true</code> 则需要指定，指定参数的最大值，单位为 <code>byte</code>；</li><li><code>max</code>：指定最大的文档数。</li></ul><p>在 <code>Mongodb</code> 中也可以不用创建集合，因为在创建文档的时候也会自动的创建集合。</p><h6 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h6><p>语法：</p><ul><li><code>db.COLLECTION.drop()</code>：删除集合</li></ul><p>以下我们依然以之前创建的 <code>test</code> 数据库为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use test    # 选择数据库</span><br><span class="line">show collections    # 查看集合列表</span><br><span class="line">db.users.drop()     # 删除test数据库下的users集合</span><br></pre></td></tr></table></figure><h6 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h6><p>语法：</p><ul><li><code>db.COLLECTION_NAME.insert(document)</code>：插入文档</li></ul><p>我们以下面的例子实际演示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 先定义文档</span><br><span class="line">user = ([</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"user_id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"akashi"</span>,</span><br><span class="line">        <span class="attr">"email"</span>: <span class="string">"akashisai@163.com"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        "user_id": 2,</span><br><span class="line">        "name": "asuka",</span><br><span class="line">        "email": "asuka@163.com"</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"># 创建集合test的同时，插入文档数据</span><br><span class="line">db.test.insert(user)</span><br></pre></td></tr></table></figure><h6 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h6><p>语法：</p><ul><li><code>db.COLLECTION_NAME.update(SELECTION_CRITERIA,UPDATED_DATA)</code>：更新文档</li></ul><p>我们将 <code>user_id=1</code> 文档中 <code>email</code> 进行更新：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.test.update(&#123;</span><br><span class="line">    "user_id": 1</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    $set:&#123;</span><br><span class="line">        "email": "akashi_sai@163.com"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>查询更新效果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find()</span><br></pre></td></tr></table></figure><ul><li>括号内第一个参数标识查找的内容的条件，第二个参数标识更新后的数据</li><li>默认的 <code>update</code> 函数只对一个文档更新，如果想作用所有文档，则需要加入 <code>multi:true</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.test.update(&#123;</span><br><span class="line">    "user_id": 1,</span><br><span class="line">    "name": "akashi",</span><br><span class="line">    "email": "akashisai.163.com"</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    $set:&#123;</span><br><span class="line">        "email": "akashi_sai@163.com"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    "multi": true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="替换文档"><a href="#替换文档" class="headerlink" title="替换文档"></a>替换文档</h6><p>语法：</p><ul><li><code>db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code>：替换已存在的文档</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.test.save(&#123;</span><br><span class="line">    "_id" : ObjectId("5d4ba3240d800ad42ba1f8b8"), </span><br><span class="line">    "user_id": 2,</span><br><span class="line">    "name": "sito_asuka", </span><br><span class="line">    "email": "sito_asuka@163.com"</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>前面提到过一下 <code>save</code> 的用法，它在存入数据的过程中，如果数据存在(通过主键<code>_di</code>进行区分)，则会替换原来的数据，如果不存在，则会新建一条数据。</p><p>我们也可以使用它插入一条文档：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.test.save(&#123;</span><br><span class="line">    &quot;user_id&quot;: 3,</span><br><span class="line">    &quot;name&quot;: &quot;gakki&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;gakki@163.com&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h6><p>语法：</p><ul><li><code>db.COLLECTION_NAME.remove(DELECTION_CRITERIA)</code>：删除文档</li></ul><p>其实 <code>remove</code> 函数的参数跟 <code>update</code> 函数的第一个参数一样，相当于查找条件，注意，不要误删！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.test.remove(&#123;</span><br><span class="line">    &quot;name&quot;: &quot;gakki&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>删除后可以用查找命令确认数据:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find()</span><br></pre></td></tr></table></figure><h5 id="查询、索引与聚合"><a href="#查询、索引与聚合" class="headerlink" title="查询、索引与聚合"></a>查询、索引与聚合</h5><h6 id="查询语句-find"><a href="#查询语句-find" class="headerlink" title="查询语句 find()"></a>查询语句 <code>find()</code></h6><p>语法：</p><ul><li><code>db.COLLECTION_NAME.find(Parameter)</code></li></ul><p>已经使用过好多次了，这里不再介绍。</p><ul><li>条件操作符</li></ul><p><code>$gt</code>：大于<br><code>$lt</code>：小于<br><code>$gte</code>：大于等于<br><code>$lte</code>：小于等于</p><ul><li><code>$type:[key]</code>:</li></ul><p>可选的 <code>key</code> 值如下：</p><p><code>1</code>: 双精度型(<code>Double</code>)<br><code>2</code>: 字符串(<code>String</code>)<br><code>3</code>: 对象(<code>Object</code>)<br><code>4</code>: 数组(<code>Array</code>)<br><code>5</code>: 二进制数据(<code>Binary data</code>)<br><code>7</code>: 对象 <code>ID</code>(<code>Object id</code>)<br><code>8</code>: 布尔类型(<code>Boolean</code>)<br><code>9</code>: 数据(<code>Date</code>)<br><code>10</code>: 空(<code>Null</code>)<br><code>11</code>: 正则表达式(<code>Regular Expression</code>)<br><code>13</code>: <code>JS</code> 代码(<code>Javascript</code>)<br><code>14</code>: 符号(<code>Symbol</code>)<br><code>15</code>: 有作用域的 <code>JS</code> 代码(<code>JavaScript with scope</code>)<br><code>16</code>: <code>32</code> 位整型数(<code>32-bit integer</code>)<br><code>17</code>: 时间戳(<code>Timestamp</code>)<br><code>18</code>: <code>64</code> 位整型数(<code>64-bit integer</code>)<br><code>-1</code>: 最小值(<code>Min key</code>)<br><code>127</code>: 最大值(<code>Max key</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;&quot;name&quot;: &#123;$type:2&#125;&#125;)</span><br></pre></td></tr></table></figure><p>上面的命令是用于查找 <code>name</code> 是字符串的文档记录，它等同于下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;&quot;name&quot;: &#123;$type:&apos;string&apos;&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>limit()</code> 与 <code>skip()</code></li></ul><p>读取指定数量的数据记录 <code>limit()</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find().limit(1)</span><br></pre></td></tr></table></figure><p>读取一条记录，默认是排在最前面的那一条被读取。</p><p>读取时跳过指定数量的数据记录 <code>skip()</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find().limit(1).skip(1)</span><br></pre></td></tr></table></figure><p>当然，还可以添加 <code>find</code> 的查找条件的参数，以便进行更精确的查找。</p><ul><li>排序 <code>sort()</code></li></ul><p>标识升序和降序，其中升序用 <code>1</code> 表示，降序用 <code>-1</code> 表示。</p><p>语法：</p><ul><li><code>db.COLLECTION_NAME.find().sort({KEY:1|-1})</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find().sort(&#123;&quot;user_id&quot;:-1&#125;)</span><br></pre></td></tr></table></figure><h6 id="索引-ensureIndex"><a href="#索引-ensureIndex" class="headerlink" title="索引 ensureIndex()"></a>索引 <code>ensureIndex()</code></h6><blockquote><p>索引通常能够极大的提高查询的效率，如果没有索引，<code>MongoDB</code> 在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可能要花费几十秒甚至几分钟，这无疑对网站的性能是非常致命的。</p></blockquote><p>索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库集合中一个文档或多个文档的值进行排序的一种结构。</p><p>语法：</p><ul><li><code>db.COLLECTION_NAME.ensureIndex({KEY:1|-1})</code></li></ul><p>同样 <code>1</code> 代表升序，<code>-1</code> 代表降序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.ensureIndex(&#123;&quot;name&quot;: 1&#125;)</span><br></pre></td></tr></table></figure><p><code>ensureIndex()</code> 的可选参数：</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>background</code></td><td><code>Boolean</code></td><td>建立索引要不要阻塞其他数据库操作，默认为 <code>false</code></td></tr><tr><td><code>unique</code></td><td><code>Boolean</code></td><td>建立的索引是否唯一，默认 <code>false</code></td></tr><tr><td><code>name</code></td><td><code>string</code></td><td>索引的名称，若未指定，系统自动生成</td></tr><tr><td><code>dropDups</code></td><td><code>Boolean</code></td><td>建立唯一索引时，是否删除重复记录，默认 <code>flase</code></td></tr><tr><td><code>sparse</code></td><td><code>Boolean</code></td><td>对文档不存在的字段数据不启用索引，默认 <code>false</code></td></tr><tr><td><code>expireAfterSeconds</code></td><td><code>integer</code></td><td>设置集合的生存时间，单位为秒</td></tr><tr><td><code>v</code></td><td><code>index version</code></td><td>索引的版本号</td></tr><tr><td><code>weights</code></td><td><code>document</code></td><td>索引权重值，范围为 <code>1</code> 到 <code>99999</code></td></tr><tr><td><code>default-language</code></td><td><code>string</code></td><td>默认为英语</td></tr><tr><td><code>language_override</code></td><td><code>string</code></td><td>默认值为 <code>language</code></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.ensureIndex(&#123;&quot;user_id&quot;:1,&quot;name&quot;:1&#125;,&#123;background:1&#125;)</span><br></pre></td></tr></table></figure><h6 id="聚合-aggregate"><a href="#聚合-aggregate" class="headerlink" title="聚合 aggregate()"></a>聚合 <code>aggregate()</code></h6><p>语法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.aggregate(&#123;</span><br><span class="line">    $match:&#123;x:1&#125;,</span><br><span class="line">    &#123;limit:NUM&#125;,</span><br><span class="line">    $group:&#123;_id:$age&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这些参数都可选：</p><ul><li><code>$match</code>：查询，跟 <code>find</code> 一样；</li><li><code>$limit</code>：限制显示结果数量；</li><li><code>$skip</code>：忽略结果数量；</li><li><code>$sort</code>：排序；</li><li><p><code>$group</code>：按照给定表达式组合结果。</p></li><li><p>聚合表达式</p></li></ul><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>$sum</code></td><td>计算总和</td></tr><tr><td><code>$avg</code></td><td>计算平均值</td></tr><tr><td><code>min</code> 和 <code>min</code> 和 <code>max</code></td><td>计算最小值和最大值</td></tr><tr><td><code>$push</code></td><td>在结果文档中插入值到一个数组</td></tr><tr><td><code>$addToSet</code></td><td>在结果文档中插入值到一个数组，但不创建副本</td></tr><tr><td><code>$first</code></td><td>根据资源文档的排序获取第一个文档数据</td></tr><tr><td><code>$last</code></td><td>根据资源文档的排序获取最后一个文档数据</td></tr></tbody></table><ul><li>管道</li></ul><blockquote><p><code>MongoDB</code> 的聚合管道将 <code>MongoDB</code> 文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。</p></blockquote><p>表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。</p><p>聚合框架中常用的几个操作：</p><ul><li><code>$project</code>：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</li><li><code>$match</code>：用于过滤数据，只输出符合条件的文档。<code>$match</code> 使用 <code>MongoDB</code> 的标准查询操作。</li><li><code>$limit</code>：用来限制 <code>MongoDB</code> 聚合管道返回的文档数。</li><li><code>$skip</code>：在聚合管道中跳过指定数量的文档，并返回余下的文档。</li><li><code>$unwind</code>：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</li><li><code>$group</code>：将集合中的文档分组，可用于统计结果。</li><li><code>$sort</code>：将输入文档排序后输出。</li><li><code>$geoNear</code>：输出接近某一地理位置的有序文档。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 基础笔记</title>
      <link href="2019/08/03/SQL/mysql/"/>
      <url>2019/08/03/SQL/mysql/</url>
      
        <content type="html"><![CDATA[<h4 id="SQL-基础笔记"><a href="#SQL-基础笔记" class="headerlink" title="SQL 基础笔记"></a><code>SQL</code> 基础笔记</h4><blockquote><p>对 <code>SQL</code> 语句的基础复习</p></blockquote><a id="more"></a><p>开始学习之前，我们需要正确安装 <code>MySQL</code>， 各系统的安装稍有差异，这里不另行赘述，自行百度正确的安装姿势。以下内容以我的环境为主：</p><ul><li>系统：<code>Mac OS</code></li><li>包管理工具：<code>Homebrew</code></li><li><code>MySQL</code> 版本：<code>8.0.16</code></li></ul><h5 id="连接-MySQL"><a href="#连接-MySQL" class="headerlink" title="连接 MySQL"></a>连接 <code>MySQL</code></h5><h6 id="确认正确安装"><a href="#确认正确安装" class="headerlink" title="确认正确安装"></a>确认正确安装</h6><p>在终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure><p>若可以正确打印安装的 <code>MySQL</code> 版本，则安装成功</p><h6 id="启动-终止服务"><a href="#启动-终止服务" class="headerlink" title="启动/终止服务"></a>启动/终止服务</h6><p><code>Mac</code> 下使用 <code>Homebrew</code> 包管理工具可以运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start mysql</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services restart mysql</span><br></pre></td></tr></table></figure><p>其他系统可以尝试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql5</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql5</span><br></pre></td></tr></table></figure><p>或者是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql stop</span><br></pre></td></tr></table></figure><p>来进行启动和关闭服务。</p><h6 id="连接到服务器"><a href="#连接到服务器" class="headerlink" title="连接到服务器"></a>连接到服务器</h6><p>确保服务启动状态下终端运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>以上命令 <code>mysql</code> 代表客户端命令，<code>-u</code> 后边跟连接数据库的用户，这里是 <code>root</code>，<code>-p</code> 表示输入密码，回车后输入密码即可。<code>MySQL</code> 默认用户为 <code>root</code>，密码为空，如果没有修改，直接回车就可以连接到 <code>MySQL</code> 服务器，也可以使用下面的命令实现快速登录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot</span><br></pre></td></tr></table></figure><h5 id="DDL-语句"><a href="#DDL-语句" class="headerlink" title="DDL 语句"></a><code>DDL</code> 语句</h5><blockquote><p>数据定义语言，简单来说，就是对数据库的内部对象进行创建、删除、修改等操作的语言。</p></blockquote><h6 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h6><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> dbname;</span><br></pre></td></tr></table></figure><p>现在，我们来创建一个数据库 <code>demo</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> demo;</span><br></pre></td></tr></table></figure><p>注意，如果数据库名称已存在，系统将不再允许创建同名的数据库，这时，我们可以删除已存在的数据库或另取一个名称再创建。</p><p>这样，一个数据库就创建成功了。我们可以通过以下命令查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;     // 不要忘了分号(;)</span><br></pre></td></tr></table></figure><p>注意，是 <code>databases</code> 不是 <code>database</code>；还有 <code>sql</code> 以分号结束。</p><p>查看数据库之后，可以选择要操作的数据库，使用命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> dbname;</span><br></pre></td></tr></table></figure><p>这里我们查看刚刚创建的数据库 <code>demo</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> demo;</span><br></pre></td></tr></table></figure><p>然后再查看数据库中创建的所有数据表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><p>因为我们创建的是一个空数据库，里面还没有表。</p><h6 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h6><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> dbnaem;</span><br></pre></td></tr></table></figure><p>这里我们删除刚创建的 <code>demo</code> 数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> demo;</span><br></pre></td></tr></table></figure><h6 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h6><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tablename(</span><br><span class="line">    <span class="keyword">name</span> <span class="keyword">type</span> <span class="keyword">constraints</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="keyword">type</span> <span class="keyword">constraints</span>,</span><br><span class="line">    ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>constraints</code> （约束）可以为空，不写就行。一般的约束条件有：主键约束（<code>primary key</code>），外键约束（<code>foreign key</code>），唯一约束（<code>unique</code>），非空约束（<code>not null</code>）和默认值（<code>default</code>）</p><table><thead><tr><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>主键约束（<code>primary key</code>）</td><td>主键约束列不允许重复，也不允许出现空值。相当于唯一约束+非空约束，每个表最多只允许一个主键</td></tr><tr><td>外键约束（<code>foreign key</code>）</td><td>外键约束是保证一个或两个表之间的参照完整性，外键是构建于一个表的两个字段或是两个表的两个字段之间的参照关系</td></tr><tr><td>唯一约束（<code>unique</code>）</td><td>指定<code>table</code>的列或列组合不能重复，保证数据的唯一性</td></tr><tr><td>非空约束（<code>not null</code>）</td><td>确保当前列的值不为空值</td></tr><tr><td>默认值（<code>default</code>）</td><td>可以设置一个当前字段的默认值</td></tr></tbody></table><p>现在我们实际创建一个新的表，首先，创建一个数据库:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> emp;</span><br></pre></td></tr></table></figure><p>然后，使用它：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> emp;</span><br></pre></td></tr></table></figure><p>接下来，就是创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(ename <span class="built_in">varchar</span>(<span class="number">10</span>), hiredate <span class="built_in">date</span>, sal <span class="built_in">decimal</span>(<span class="number">10</span>, <span class="number">2</span>), deptno <span class="built_in">int</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>这时，我们便创建了一张新表（<code>emp</code>)，我们可以查看表的定义：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC tablename;</span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc emp;</span><br></pre></td></tr></table></figure><p>如果需要更全面的表信息，可以使用 <code>SQL</code> 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tablename \G;</span><br></pre></td></tr></table></figure><p>我们来尝试一下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> emp \G</span><br></pre></td></tr></table></figure><p>这里的”<code>\G</code>“的含义是使记录能够按照字段竖向排列，以便更好地显示内容，也可以选择不写，不过一旦选择传入，切记是大写的，不然无效。</p><h6 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h6><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> tablename;</span><br></pre></td></tr></table></figure><p>可自行尝试。</p><h6 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h6><blockquote><p>对于已经创建好的表，尤其是已经有大量数据的表，如果需要做一些结构上的改变，可以先将表删除（<code>drop</code>），然后再重新定义表，这样做没有问题，但是就必须重新对数据进行加载，因此，大多数情况下，表结构的更改都使用 <code>alter table</code> 语句，以下是一些常用命令。</p></blockquote><ul><li>修改表类型</li></ul><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">MODIFY</span> [<span class="keyword">COLUMN</span>] column_definition [<span class="keyword">FIRST</span>|<span class="keyword">AFTER</span> col_name];</span><br></pre></td></tr></table></figure><p>接下来我是实际进行尝试：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">modify</span> ename <span class="built_in">varchar</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>重新查看表结构，可以发现我们把 <code>ename</code> 字段的类型从 <code>varchar(10)</code> 修改成了 <code>varchar(20)</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc emp;</span><br></pre></td></tr></table></figure><ul><li>增加表字段</li></ul><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] column_definition [<span class="keyword">FIRST</span>|<span class="keyword">AFTER</span> col_name];</span><br></pre></td></tr></table></figure><p>例如，我们增加一个字段 <code>age</code>，类型为 <code>int(3)</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> age <span class="built_in">int</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>可以自己利用<code>desc</code>语句查看一下表结构的变化。</p><ul><li>删除表字段</li></ul><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] col_name;</span><br></pre></td></tr></table></figure><p>以下，我们删除 <code>age</code> 字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> age;</span><br></pre></td></tr></table></figure><p>自行查看表结构的变化。</p><ul><li>更改字段名</li></ul><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">CHANGE</span> [<span class="keyword">COLUMN</span>] old_col_name column_definition [<span class="keyword">FIRST</span>|<span class="keyword">AFTER</span> col_name];</span><br></pre></td></tr></table></figure><p>我们先将刚才删除的字段添加回来：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> age <span class="built_in">int</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>然后修改名称为 <code>age_1</code>，同时修改字段类型为 <code>int(4)</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">change</span> age age_1 <span class="built_in">int</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>查看表结构的变化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc emp;</span><br></pre></td></tr></table></figure><p>注意：<code>change</code> 和 <code>modify</code> 都可以修改表的定义，不同的是 <code>change</code> 后面需要写两次列名，但 <code>change</code> 的优点是可以修改列名称， <code>modify</code> 则不能。</p><ul><li>修改字段排列顺序</li></ul><p>前面介绍的方法都有一个可选项， <code>first|after cloumn_name</code>，这个选项可以修改字段在表中的位置。 <code>add</code> 默认是加在表的最后位置，<code>change</code> 和 <code>modify</code> 默认不会改变字段的位置。</p><p>下面我们将添加 <code>birth</code> 字段在 <code>ename</code> 之后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> birth <span class="built_in">date</span> <span class="keyword">after</span> ename;</span><br></pre></td></tr></table></figure><p>自行查看。</p><ul><li>更改表名</li></ul><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">RENAME</span> [<span class="keyword">TO</span>] new_name;</span><br></pre></td></tr></table></figure><p>我们将表名 <code>emp</code> 改为 <code>emp1</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp reanme emp1;</span><br></pre></td></tr></table></figure><p>查看变化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><h5 id="DML-语句"><a href="#DML-语句" class="headerlink" title="DML 语句"></a><code>DML</code> 语句</h5><blockquote><p><code>DML</code> 即数据操作语句，是指对数据库中表记录的操作，主要包括插入(<code>insert</code>)、更新(<code>update</code>)、删除(<code>delete</code>)和查询(<code>select</code>)，是开发人员日常使用最频繁的操作。</p></blockquote><p>开始之前，先将表进行调整，将表名改回 <code>emp</code>，并且删除 <code>age_1</code> 字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp1 <span class="keyword">rename</span> emp;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> age_1;</span><br></pre></td></tr></table></figure><h6 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h6><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablename (field_1, field_2,..., field_n) <span class="keyword">VALUES</span>(value_1, value_2,...,value_n);</span><br></pre></td></tr></table></figure><p>实际尝试：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp (ename, birth, hiredate, sal, deptno) <span class="keyword">values</span>(<span class="string">'akashi'</span>, <span class="string">'1997-09-28'</span>, <span class="string">'2019-08-01'</span>, <span class="string">'5000'</span>, <span class="number">01</span>);</span><br></pre></td></tr></table></figure><p>也可以不指定字段名，但是 <code>value</code> 后面的顺序要和字段的排列顺序一致：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="string">'asuka'</span>, <span class="string">'1998-08-10'</span>, <span class="string">'2019-08-01'</span>, <span class="string">'5000'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>可以通过以下语法进行查看插入情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h6 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h6><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tablename <span class="keyword">SET</span> field_1 = value_1, field_2 = value_2,...,field_n = value_n [<span class="keyword">WHERE</span> CONDITION]</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> sal = <span class="string">'6000'</span> <span class="keyword">where</span> ename = <span class="string">'asuka'</span>;</span><br></pre></td></tr></table></figure><p>查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h6 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h6><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tablename [<span class="keyword">WHERE</span> CONDITION]</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename = <span class="string">'akashi'</span>;</span><br></pre></td></tr></table></figure><p>使用别名的一个参考例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> a, b <span class="keyword">from</span> emp a, dept b <span class="keyword">where</span> a.depton = b.depton <span class="keyword">and</span> a.depton = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h6 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h6><p>其实上面有使用过最基础的查询，语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablename [<span class="keyword">WHERE</span> CONDITION]</span><br></pre></td></tr></table></figure><p>即：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><code>*</code> 表示全部，等价于：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, birth, hiredate, sal, deptno <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>注意：考虑到性能和效率问题，在大型的数据库查询中，并不提倡使用 <code>*</code> 来查询，要养成良好的习惯。</p><ul><li>查询不重复的记录</li></ul><blockquote><p>有时候需要将表中的记录去掉重复后显示出来，可以用 <code>distinct</code> 关键字来实现。</p></blockquote><p>一个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> depno <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><ul><li>条件查询</li></ul><blockquote><p>在很多情况下，不需要查询全部记录，而只是需要根据限定条件来查询一部分的数据，用 <code>where</code> 来实现。</p></blockquote><p>一个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, birth, hiredate, sal, deptno <span class="keyword">from</span> emp <span class="keyword">where</span> deptno = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>排序和限制</li></ul><blockquote><p>当需要取出按照某个字段进行排序后的记录结果集，可以使用关键字 <code>order by</code> 来实现。</p></blockquote><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablename [<span class="keyword">WHERE</span> CONDITION] [ORDEY <span class="keyword">BY</span> field_1 [<span class="keyword">DESC</span>|<span class="keyword">ASC</span>],...,field_2 [<span class="keyword">DESC</span>|<span class="keyword">ASC</span>]]</span><br></pre></td></tr></table></figure><p>其中，<code>desc</code> 和 <code>asc</code> 排序顺序关键字， <code>desc</code> 表示按照字段进行降序排序， <code>asc</code> 表示升序排序，如果不写，默认是升序。</p><p>一个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, birth, hiredate, sal, deptno <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal;</span><br></pre></td></tr></table></figure><p>稍微再复杂一点：(先按部门升序，再按奖金降序排序)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, birth, hiredate, sal, deptno <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> deptno, sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>对于排序后的记录，如果只希望显示部分，可以使用 <code>limit</code> 关键字。</p><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... [<span class="keyword">LIMIT</span> offset_start, <span class="keyword">row_count</span>]</span><br></pre></td></tr></table></figure><p>其中， <code>offset_start</code> 表示记录的起始偏移量， <code>row_count</code> 表示显示的行数。默认起始偏移量为 <code>0</code>，这时，实际显示的就是前 <code>n</code> 条记录。</p><p>具体例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, birth, hiredate, sal, deptno <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>这里显示了 <code>3</code> 条记录。</p><p>另一个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, birth, hiredate, sal, deptno <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">limit</span> <span class="number">1</span>, <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>表示排序后从第<code>2</code>条记录开始，显示<code>3</code>条记录。</p><p><code>limit</code> 经常和 <code>order by</code> 一起配合使用，来进行记录的分页显示。</p><ul><li>聚合</li></ul><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [field_1, field_2,...,field_n] fun_name</span><br><span class="line"><span class="keyword">FROM</span> tablenaem</span><br><span class="line">[<span class="keyword">WHERE</span> where_contition]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> field_1, field_2,...field_n</span><br><span class="line">[<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>]]</span><br><span class="line">[<span class="keyword">HAVING</span> where_contition]</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p><code>fun_naem</code> 表示要做的聚合参数，也就是聚合函数，常用的有 <code>sum</code>-求和, <code>count(*)</code>-记录数, <code>max</code>-最大值, <code>min</code>-最小值。</p></li><li><p><code>group by</code> 关键字表示要进行分类聚合的字段。</p></li><li><p><code>with rollup</code> 是可选字段（在<code>[]</code>里面表示可选参数），表明是否对分类聚合后的结果进行再汇总。</p></li><li><p><code>having</code> 关键字表示对分类后的结果再进行条件的过滤。</p></li></ul><p>注意：<code>having</code> 和 <code>where</code> 的区别在于， <code>having</code> 是对聚合后的结果进行再过滤，而 <code>where</code> 是在聚合前就对记录进行过滤， 如果逻辑允许，我们尽可能的用 <code>where</code> 先过滤记录， 因为这样结果集会减小，提高聚合效率，最后再根据情况看是否用 <code>having</code> 进行再过滤。</p><p>统计人数大于 <code>1</code> 的部门：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">having</span> <span class="keyword">count</span>(<span class="number">1</span>) &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>再看一些具体的函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(sal), <span class="keyword">max</span>(sal), <span class="keyword">min</span>(sal) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><ul><li>表连接</li></ul><blockquote><p>当需要同时显示多个表中的字段时，就可以通过表连接来实现。表连接分为外连接和内连接，他们最主要的区别是，内连接仅选出两张表中相互匹配的记录；而外连接会选出其他不匹配的记录。我们最常用的是内连接。</p></blockquote><p>一个例子(内连接)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, deptname <span class="keyword">from</span> emp.dept <span class="keyword">where</span> emp.deptno = dept.deptno;</span><br></pre></td></tr></table></figure><p>外连接又分为左连接和右连接：</p><p>左连接： 包含所有的左边表中的记录甚至是右边表中没有和它匹配的记录。</p><p>右连接： 包含所有的右边表中的记录甚至是左边表中没有和它匹配的记录。</p><p>左连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, deptname <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.deptno = dept.deptno;</span><br></pre></td></tr></table></figure><p>右连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, deptname <span class="keyword">from</span> emp <span class="keyword">right</span> <span class="keyword">join</span> emp <span class="keyword">on</span> dept.deptno = emp.deptno;</span><br></pre></td></tr></table></figure><p>两者效果相同，可以相互转化。</p><ul><li>子查询</li></ul><blockquote><p>有些情况下，查询时需要的条件是另外一个 <code>select</code> 语句的结果，这个时候，就需要子查询。用于子查询的关键字主要包括： <code>in</code>, <code>not in</code>, <code>=</code>, <code>!=</code>, <code>exists</code>, <code>not exists</code> 等。</p></blockquote><p>一个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="keyword">in</span> (<span class="keyword">select</span> deptno <span class="keyword">from</span> dept);</span><br></pre></td></tr></table></figure><p>如果子查询的记录唯一，还可以用 <code>=</code> 代替 <code>in</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno = (<span class="keyword">select</span> deptno <span class="keyword">from</span> dept);</span><br></pre></td></tr></table></figure><ul><li>记录联合</li></ul><blockquote><p>我们常常需要将两个表的数据按一定的查询条件查询出来以后，将结果合并到一起显示出来，这时候，需要 <code>union</code> 和 <code>union all</code> 关键字来实现。</p></blockquote><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">UNION</span> | <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">UNION</span> | <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tn</span><br></pre></td></tr></table></figure><p><code>union</code> 和 <code>union all</code> 的主要区别是 <code>union all</code> 是直接把结果合并在一起，而 <code>union</code> 是在 <code>union all</code> 的基础上进行了一次 <code>distinct</code>，去除了重复的记录。</p><p>一个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> dept;</span><br></pre></td></tr></table></figure><p>去重：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> dept;</span><br></pre></td></tr></table></figure><h5 id="DCL-语句"><a href="#DCL-语句" class="headerlink" title="DCL 语句"></a><code>DCL</code> 语句</h5><blockquote><p><code>DCL</code> 即数据控制语句，主要是DBA用来管理系统中的对象权限时使用，一般开发人员很少使用。</p></blockquote><h6 id="创建数据库用户，添加权限"><a href="#创建数据库用户，添加权限" class="headerlink" title="创建数据库用户，添加权限"></a>创建数据库用户，添加权限</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'akashi'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>, <span class="keyword">insert</span> <span class="keyword">on</span> emp.* <span class="keyword">to</span> <span class="string">'akashi'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><h6 id="收回权限"><a href="#收回权限" class="headerlink" title="收回权限"></a>收回权限</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">insert</span> <span class="keyword">on</span> emp.* <span class="keyword">from</span> <span class="string">'akashi'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><h5 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h5><p>一些实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 查询第三个字母为A的员工记录</span></span><br><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'__A%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 输出员工人数大于等于5的部门</span></span><br><span class="line"><span class="keyword">select</span> deptno, <span class="keyword">count</span>(empno) </span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno </span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(empno) &gt;= <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 以部门编号为统计单位，统计(聚合函数)</span></span><br><span class="line"><span class="keyword">select</span> deptno, <span class="keyword">count</span>(empno), <span class="keyword">max</span>(sal), <span class="keyword">min</span>(sal), <span class="keyword">avg</span>(sal)</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 查询没有奖金的员工信息</span></span><br><span class="line"><span class="comment">-- select * from emp where comm = 'NULL'</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> comm = <span class="number">0</span> <span class="keyword">or</span> comm <span class="keyword">is</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果字段为空，字段置零，如果为零，同样置零</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">ifnull</span>(comm, <span class="number">0</span>) = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 不重复的部门编号</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> emp</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6. 查询工资和奖金的和大于2000的员工信息(注意：奖金为空时，不参与运算)</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">ifnull</span>(sal, <span class="number">0</span>) + <span class="keyword">ifnull</span>(comm, <span class="number">0</span>) &gt; <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 7. 公式化：分页查询，n为开始的下标，m为显示的个数</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">limit</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- select * from emp limit （当前页码数-1）* 每页显示条数, 每页显示条数(实时分页，不再利用缓存，满足高并发的数据实时变化)</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">limit</span> （<span class="keyword">index</span><span class="number">-1</span>）* pageSize, pageSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 8. 添加</span></span><br><span class="line"><span class="comment">-- 语法规则：</span></span><br><span class="line"><span class="comment">-- 主键（自增长）</span></span><br><span class="line"><span class="comment">-- 字段的类型</span></span><br><span class="line"><span class="comment">-- 字段的长度</span></span><br><span class="line"><span class="comment">-- 日期（表单传入（应用程序）、系统传入、数据库获取）</span></span><br><span class="line"><span class="comment">-- 实体间的依赖关系</span></span><br><span class="line"><span class="comment">-- 添加字段顺序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(empno, ename, job, hiredate, sal, comm, deptno) </span><br><span class="line"><span class="keyword">values</span>(<span class="number">9999</span>, <span class="string">'AKASHI'</span>, <span class="string">'STUDENT'</span>, <span class="keyword">now</span>(), <span class="number">5000.56</span>, <span class="number">1000</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(ename, job, hiredate, sal, comm, deptno) </span><br><span class="line"><span class="keyword">values</span>(<span class="string">'AKASHI'</span>, <span class="string">'STUDENT'</span>, <span class="keyword">now</span>(), <span class="number">5000.56</span>, <span class="number">1000</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> empno = <span class="number">10000</span>;</span><br><span class="line"><span class="comment">-- 增删改===&gt; 注意事务的提交和回滚</span></span><br><span class="line"><span class="comment">-- 所有的关系型数据库，存在自动提交和手动提交；Oracle需要手动提交，MySQL自动提交，无需commit，rollback；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 9. 删除</span></span><br><span class="line"><span class="comment">-- 考虑临界值</span></span><br><span class="line"><span class="comment">-- 先检索语句确认是否满足要求，再删除</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt;= <span class="number">800</span> <span class="keyword">and</span> sal &lt;= <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt;= <span class="number">800</span> <span class="keyword">and</span> sal &lt;= <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">between</span> <span class="number">800</span> <span class="keyword">and</span> <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 10. 更新</span></span><br><span class="line"><span class="comment">-- 先检索</span></span><br><span class="line"><span class="comment">-- 考虑非空</span></span><br><span class="line"><span class="keyword">update</span> emp </span><br><span class="line"><span class="keyword">set</span> sal = <span class="keyword">ifnull</span>(sal, <span class="number">0</span>) + <span class="number">1000</span>, comm = <span class="keyword">ifnull</span>(comm, <span class="number">0</span>) + <span class="number">500</span></span><br><span class="line"><span class="keyword">where</span> <span class="keyword">ifnull</span>(comm,<span class="number">0</span>) = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则匹配食用指南</title>
      <link href="2019/08/02/Regular/regex/"/>
      <url>2019/08/02/Regular/regex/</url>
      
        <content type="html"><![CDATA[<h4 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h4><blockquote><p>正则表达式是处理字符串的强大工具，它有自己的特定语法结构，可以实现字符串的检索、替换、匹配验证等功能。</p></blockquote><a id="more"></a><h5 id="在线正则表达式测试工具"><a href="#在线正则表达式测试工具" class="headerlink" title="在线正则表达式测试工具"></a>在线正则表达式测试工具</h5><ul><li><a href="https://regex101.com/" target="_blank" rel="noopener">https://regex101.com/</a></li><li><a href="https://regexper.com/" target="_blank" rel="noopener">https://regexper.com/</a></li><li><a href="http://tool.oschina.net/regex/" target="_blank" rel="noopener">http://tool.oschina.net/regex/</a></li></ul><h5 id="常用匹配规则"><a href="#常用匹配规则" class="headerlink" title="常用匹配规则"></a>常用匹配规则</h5><table><thead><tr><th>模式</th><th>规则</th></tr></thead><tbody><tr><td><code>\w</code></td><td>匹配字母、数字及下划线</td></tr><tr><td><code>\W</code></td><td>匹配不是字母、数字及下划线的字符</td></tr><tr><td><code>\s</code></td><td>匹配任意空白字符，等价于<code>[\t\n\r\f]</code></td></tr><tr><td><code>\S</code></td><td>匹配任意非空白字符</td></tr><tr><td><code>\d</code></td><td>匹配任意数字，等价于<code>[0-9]</code></td></tr><tr><td><code>\D</code></td><td>匹配任意非数字的字符</td></tr><tr><td><code>\A</code></td><td>匹配字符串开头</td></tr><tr><td><code>\Z</code></td><td>匹配字符串结尾，如果存在换行，只匹配到换行前的字符串结束</td></tr><tr><td><code>\z</code></td><td>匹配字符串结尾，如果存在换行，同时还会匹配换行符</td></tr><tr><td><code>\G</code></td><td>匹配最后匹配完成的位置</td></tr><tr><td><code>\n</code></td><td>匹配一个换行符</td></tr><tr><td><code>\t</code></td><td>匹配一个制表符</td></tr><tr><td><code>^</code></td><td>匹配一行字符串的开头</td></tr><tr><td><code>$</code></td><td>匹配一行字符串的结尾</td></tr><tr><td><code>.</code></td><td>匹配任意字符，除了换行符</td></tr><tr><td><code>[...]</code></td><td>用来表示一组字符，单独列出，如<code>[amk]</code>，匹配<code>a</code>、<code>m</code>或<code>k</code></td></tr><tr><td><code>[^...]</code></td><td>匹配不在<code>[]</code>中的字符，如<code>[^abc]</code>，匹配除了<code>a</code>、<code>b</code>、<code>c</code>以外的字符</td></tr><tr><td><code>*</code></td><td>匹配<code>0</code>个或多个表达式</td></tr><tr><td><code>+</code></td><td>匹配<code>1</code>个或多个表达式</td></tr><tr><td><code>?</code></td><td>匹配<code>0</code>个或<code>1</code>个前面的正则表达式定义的片段，非贪婪方式</td></tr><tr><td><code>{n}</code></td><td>精确匹配<code>n</code>个前面的表达式</td></tr><tr><td><code>{n,m}</code></td><td>匹配<code>n</code>到<code>m</code>次由前面正则表达式定义的片段，贪婪方式</td></tr><tr><td><code>alb</code></td><td>匹配<code>a</code>或<code>b</code></td></tr><tr><td><code>()</code></td><td>匹配括号内的表达式，也表示一个组</td></tr></tbody></table><p>以上看不懂也没关系，接下来逐一用实例介绍。</p><h6 id><a href="#" class="headerlink" title="."></a><code>.</code></h6><blockquote><p>表示匹配任意单个字符</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5jyl0s9d0j213802egli.jpg" alt></p><p>代替任意一个字符，并且匹配多次</p><h6 id="（贪婪）"><a href="#（贪婪）" class="headerlink" title="*（贪婪）"></a><code>*</code>（贪婪）</h6><blockquote><p>表示匹配任意<code>0</code>个或多个字符</p></blockquote><p>以下匹配到所有的字符<code>a</code>，匹配多次：</p><p><code>a*</code></p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5jypp8retj2126036dfq.jpg" alt></p><h6 id="-1"><a href="#-1" class="headerlink" title="[]"></a><code>[]</code></h6><blockquote><p>表示匹配括号中的任意字符</p></blockquote><p>以下匹配到任意<code>0</code>到<code>9</code>的数字，匹配多次：</p><p><code>[0-9]</code></p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5jyvf5m3jj217603gjrb.jpg" alt></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eg:[abc] 匹配字符a、b或者c</span><br><span class="line"></span><br><span class="line">   [a-z] 匹配任何字母   </span><br><span class="line"></span><br><span class="line">   [<span class="number">0</span><span class="number">-9</span>] 匹配任何数字   </span><br><span class="line"></span><br><span class="line">   [<span class="number">0</span><span class="number">-9</span>]* 匹配任何数量的任何数字   </span><br><span class="line"></span><br><span class="line">   [a-z]* 匹配任何数量的任何字母</span><br></pre></td></tr></table></figure><h6 id="-2"><a href="#-2" class="headerlink" title="^"></a><code>^</code></h6><blockquote><p>表示匹配字符或字符串开头，有时还会匹配文档的起始位置</p></blockquote><p>以下匹配以<code>abc</code>开头的字符串，匹配一次：</p><p><code>^abc</code></p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5jyybhv7wj211a028dfr.jpg" alt></p><h6 id="-3"><a href="#-3" class="headerlink" title="$"></a><code>$</code></h6><blockquote><p>表示匹配字符或字符串的结尾</p></blockquote><p>以下匹配以<code>a</code>结尾的字符串，匹配一次：</p><p><code>a$</code></p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5jz0d2njlj2106028t8l.jpg" alt></p><h6 id="（懒惰）"><a href="#（懒惰）" class="headerlink" title="+（懒惰）"></a><code>+</code>（懒惰）</h6><blockquote><p>表示匹配任意<code>1</code>个或多个字符</p></blockquote><p>以下匹配<code>1</code>个或多个<code>a</code>，匹配多次：</p><p><code>a+</code></p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5jz4l0dhlj20z402emx1.jpg" alt></p><h6 id="（占有）"><a href="#（占有）" class="headerlink" title="?（占有）"></a><code>?</code>（占有）</h6><blockquote><p>表示匹配任意<code>0</code>个或<code>1</code>个字符</p></blockquote><p>以下匹配<code>0</code>个或<code>1</code>个<code>a</code>，匹配多次：</p><p><code>a?</code></p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5jz6telqyj20ys02m745.jpg" alt></p><h6 id="n"><a href="#n" class="headerlink" title="{n}"></a><code>{n}</code></h6><blockquote><p>表示重复<code>n</code>次</p></blockquote><p>以下匹配重复<code>2</code>次的<code>a</code>，匹配多次：</p><p><code>a{2}</code></p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5l2jm2n3tj2160038dfr.jpg" alt></p><h6 id="n-m"><a href="#n-m" class="headerlink" title="{n,m}"></a><code>{n,m}</code></h6><blockquote><p>表示重复<code>n</code>到<code>m</code>次</p></blockquote><p>以下匹配重复<code>2</code>到<code>3</code>次的<code>a</code>，匹配多次：</p><p><code>a{2,3}</code></p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5l2p8hjwyj20x203it8n.jpg" alt></p><h6 id="a-b"><a href="#a-b" class="headerlink" title="a|b"></a><code>a|b</code></h6><blockquote><p>表示匹配<code>a</code>或<code>b</code></p></blockquote><p>以下匹配到<code>a</code>或<code>b</code>，匹配多次：</p><p><code>a|b</code></p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5l2retq3vj21b003gglj.jpg" alt></p><h6 id="-4"><a href="#-4" class="headerlink" title="()"></a><code>()</code></h6><blockquote><p>表示分组</p></blockquote><h6 id="b"><a href="#b" class="headerlink" title="\b"></a><code>\b</code></h6><blockquote><p>表示匹配任意字符边界</p></blockquote><p>以下匹配在边界的<code>a</code>（前面或后面出现空格），匹配多次：</p><p><code>\ba\b</code></p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5l33fqzooj21bo02874b.jpg" alt></p><h6 id="d"><a href="#d" class="headerlink" title="\d"></a><code>\d</code></h6><blockquote><p>表示匹配任意数字</p></blockquote><p>以下匹配到任意一个数字，匹配多次：</p><p><code>\d</code></p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5l36rnw7tj216g01u0sk.jpg" alt></p><h6 id="w"><a href="#w" class="headerlink" title="\w"></a><code>\w</code></h6><blockquote><p>表示匹配数字、字母及下划线</p></blockquote><p>以下匹配任意数字、字母、下划线，匹配多次：</p><p><code>\w</code></p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5l38eixjwj216u026a9w.jpg" alt></p><h6 id="s"><a href="#s" class="headerlink" title="\s"></a><code>\s</code></h6><blockquote><p>表示匹配空格</p></blockquote><p>以下匹配任意空格，匹配多次：</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5l39zxuw1j210a022wed.jpg" alt></p><h5 id="一些实例"><a href="#一些实例" class="headerlink" title="一些实例"></a>一些实例</h5><h6 id="Email"><a href="#Email" class="headerlink" title="Email"></a><code>Email</code></h6><p><code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></p><h6 id="URL"><a href="#URL" class="headerlink" title="URL"></a><code>URL</code></h6><p><code>[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code></p><h6 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h6><blockquote><p>以字母开头，长度在6~18之间，只能包含字母、数字和下划线</p></blockquote><p><code>^[a-zA-Z]\w{5,17}$</code></p><h6 id="日期格式"><a href="#日期格式" class="headerlink" title="日期格式"></a>日期格式</h6><p><code>^\d{4}-\d{1,2}-\d{1,2}</code></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
            <tag> 正则匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emmet 使用指南</title>
      <link href="2019/07/30/Emmet/emmet/"/>
      <url>2019/07/30/Emmet/emmet/</url>
      
        <content type="html"><![CDATA[<h4 id="Emmet-使用指南"><a href="#Emmet-使用指南" class="headerlink" title="Emmet 使用指南"></a><code>Emmet</code> 使用指南</h4><blockquote><p><code>Emment</code> 是一个可以极大程度提高前端开发效率的工具。它提供了一种十分简练的语法规则，生成对应的 <code>HTML</code> 结构和 <code>CSS</code> 代码。</p></blockquote><a id="more"></a><h5 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h5><blockquote><p>首先，你需要记住的是键入缩写后使用 <code>Tab</code> 键进行自动补全，生成完整的 <code>HTML</code> 标签。</p></blockquote><ul><li>输入 <code>!</code> 或者 <code>html:5</code> 按下 <code>tab</code> 键就可以生成一个基本的 <code>HTML</code> 结构：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 语言设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置默认缩放 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 兼容IE8设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，一个最简单的文档结构还可以更简化：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Emmet<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，便可以进行更多的探索，以下以 <code>E</code> 指代一个 <code>HTML</code> 标签，通过 <code>Emmet</code> 语法，可以实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">E 代表HTML标签。</span><br><span class="line">E#id 代表id属性。</span><br><span class="line">E.class 代表<span class="class"><span class="keyword">class</span>属性。</span></span><br><span class="line">E[attr=foo] 代表某一个特定属性。</span><br><span class="line">E&#123;foo&#125; 代表标签包含的内容是foo。</span><br><span class="line">E&gt;N 代表N是E的子元素。</span><br><span class="line">E+N 代表N是E的同级元素。</span><br><span class="line">E^N 代表N是E的上级元素。</span><br></pre></td></tr></table></figure><p>一个比较综合的例子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#page&gt;div.logo+ul#navigation&gt;li*5&gt;a&#123;Item $&#125;</span><br></pre></td></tr></table></figure><p>按下 <code>tab</code> 你就会得到：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Item 5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h5><h6 id="元素-标签"><a href="#元素-标签" class="headerlink" title="元素(标签)"></a>元素(标签)</h6><blockquote><p>键入标签名称，按下 <code>tab</code> 键，就会得到对应的标签元素。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h3</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="class"><a href="#class" class="headerlink" title="class"></a><code>class</code></h6><blockquote><p>使用点(<code>.</code>)生成 <code>class</code> 属性。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.page</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.info</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.header</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：默认不写前面的标签会自动生成一个 <code>div</code> 标签。</p><h6 id="id"><a href="#id" class="headerlink" title="id"></a><code>id</code></h6><blockquote><p>使用 <code>#</code> 生成 <code>id</code> 标签。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.footer</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个比较复杂的例子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div#header+div.page+div#footer.class1.class2.class3</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span> <span class="attr">class</span>=<span class="string">"class1 class2 class3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="a"><a href="#a" class="headerlink" title="a"></a><code>a</code></h6><blockquote><p>使用 <code>:</code> 可以生成一些特殊的属性。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a:link      =&gt;          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">a:blank     =&gt;          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"noopener noreferrer"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">inp         =&gt;          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">input       =&gt;          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">input:b 或者 input:button       =&gt;          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">input:c 或者 input:checkbox     =&gt;          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">input:email                     =&gt;          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">input:f 或者 input:file         =&gt;          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">input:h 或者 input:hidden       =&gt;          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">input:p 或者 input:password     =&gt;          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">input:r                        =&gt;          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">input:s 或者 input:submit       =&gt;          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">form                 =&gt;          <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">form:get             =&gt;          <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">form:post            =&gt;          <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">label                =&gt;          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">select               =&gt;          <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">select:d             =&gt;          <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">bq                   =&gt;          <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line">btn 或者 button       =&gt;          <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">btn:d                =&gt;          <span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">btn:r                =&gt;          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">btn:s                =&gt;          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="子标签生成"><a href="#子标签生成" class="headerlink" title="子标签生成"></a>子标签生成</h6><blockquote><p>使用 <code>&gt;</code> 生成子标签。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;ul&gt;li</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="同级标签生成"><a href="#同级标签生成" class="headerlink" title="同级标签生成"></a>同级标签生成</h6><blockquote><p>使用 <code>+</code> 生成同级标签。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div+p+bq</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="父级标签生成"><a href="#父级标签生成" class="headerlink" title="父级标签生成"></a>父级标签生成</h6><blockquote><p>使用 <code>^</code> 生成父级标签。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div+div&gt;p&gt;span+em</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div+div&gt;p&gt;span+em^bq</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更复杂一点的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div+div&gt;p&gt;span+em^^^bq</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h6><blockquote><p>使用 <code>*</code> 生成多个标签。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li*<span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h6><blockquote><p>使用 <code>()</code> 进行分组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;(header&gt;ul&gt;li*<span class="number">2</span>&gt;a)+footer&gt;p</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个比较复杂的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(div&gt;dl&gt;(dt+dd)*<span class="number">3</span>)+footer&gt;p</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h6><blockquote><p>使用 <code>[]</code> 自定义属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[href=<span class="string">'#'</span> data-title=<span class="string">'customer'</span> target=<span class="string">'_blank'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-title</span>=<span class="string">"customer"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="编号"><a href="#编号" class="headerlink" title="编号"></a>编号</h6><blockquote><p>使用 <code>$</code> 进行编号</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$*<span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以$连续使用多个用零填充数字：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$$$*<span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item001"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item002"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item003"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>@</code> 修改器，可以改变编号起始值。</p><p><code>@N</code> 改变起始值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$@<span class="number">3</span>*<span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item6"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item7"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h6><blockquote><p>使用 <code>{}</code> 添加文本。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&#123;Click me&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h5><h6 id="随机填充文本"><a href="#随机填充文本" class="headerlink" title="随机填充文本"></a>随机填充文本</h6><blockquote><p>在开发的过程中，常有需要一些文本填充位置占位。 <code>Emmet</code> 内置了 <code>Lorem Ipsum</code> 功能来实现。<code>loremN</code> 或者 <code>lipsumN</code> ，<code>N</code> 表示生成的单词数，正整数。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lorem</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptas iusto, incidunt, est facilis quisquam possimus, aliquid provident aperiam sunt numquam a et. Asperiores distinctio explicabo quibusdam accusamus nesciunt, eius autem!</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(p&gt;lorem4)*<span class="number">3</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p*<span class="number">3</span>&gt;lorem4</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Voluptatibus cumque quisquam facere!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Error incidunt fugiat explicabo?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
            <tag> 开发技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5 笔记整理</title>
      <link href="2019/07/29/html5/HTML5/"/>
      <url>2019/07/29/html5/HTML5/</url>
      
        <content type="html"><![CDATA[<h4 id="H5-笔记整理"><a href="#H5-笔记整理" class="headerlink" title="H5 笔记整理"></a><code>H5</code> 笔记整理</h4><hr><blockquote><p>整理复习 <code>H5</code> 的基础内容。</p></blockquote><a id="more"></a><h5 id="将-HTML5-元素定义为块元素"><a href="#将-HTML5-元素定义为块元素" class="headerlink" title="将 HTML5 元素定义为块元素"></a>将 <code>HTML5</code> 元素定义为块元素</h5><blockquote><p><code>HTML5</code> 定义了 <code>8</code> 个新的 <code>HTML</code> 语义（<code>semantic</code>） 元素。所有这些元素都是 <code>块级</code> 元素。</p></blockquote><p>通过设置 <code>CSS</code> 的 <code>display</code> 属性值为 <code>block</code>，让旧版本的浏览器正确显示这些元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span>, <span class="selector-tag">section</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">main</span>, <span class="selector-tag">article</span>, <span class="selector-tag">figure</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="为-HTML-添加新元素"><a href="#为-HTML-添加新元素" class="headerlink" title="为 HTML 添加新元素"></a>为 <code>HTML</code> 添加新元素</h5><p>通过设置块级元素，还可以自定义 <code>HTML</code> 新元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Custom<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.createElement(<span class="string">"ele"</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        ele &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            padding: 50px;</span><br><span class="line">            font-family: 'plantc'</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ele</span>&gt;</span>自定义元素<span class="tag">&lt;/<span class="name">ele</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="HTML5-新元素"><a href="#HTML5-新元素" class="headerlink" title="HTML5 新元素"></a><code>HTML5</code> 新元素</h5><ul><li><code>&lt;canvas&gt;</code> 新元素</li></ul><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;canvas&gt;</code></td><td>标签定义图形，比如图表和其他图像。该标签基于 <code>JavaScript</code> 的绘图 <code>API</code></td></tr></tbody></table><ul><li>新多媒体元素</li></ul><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;audio&gt;</code></td><td>定义音频内容</td></tr><tr><td><code>&lt;video&gt;</code></td><td>定义视频（<code>video</code> 或者 <code>movie</code>）</td></tr><tr><td><code>&lt;source&gt;</code></td><td>定义多媒体资源 <code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code></td></tr><tr><td><code>&lt;embed&gt;</code></td><td>定义嵌入的内容，比如插件。</td></tr><tr><td><code>&lt;track&gt;</code></td><td>为诸如 <code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code> 元素之类的媒介规定外部文本轨道。</td></tr></tbody></table><ul><li>新表单元素</li></ul><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;datalist&gt;</code></td><td>定义选项列表。请与 <code>input</code> 元素配合使用该元素，来定义 <code>input</code> 可能的值。</td></tr><tr><td><code>&lt;keygen&gt;</code></td><td>规定用于表单的密钥对生成器字段。</td></tr><tr><td><code>&lt;output&gt;</code></td><td>定义不同类型的输出，比如脚本的输出。</td></tr></tbody></table><ul><li>新的语义和结构元素</li></ul><blockquote><p><code>HTML5</code> 提供了新的元素来创建更好的页面结构：</p></blockquote><table><thead><tr><th>标签</th><th>元素</th></tr></thead><tbody><tr><td><code>&lt;article&gt;</code></td><td>定义页面独立的内容区域。</td></tr><tr><td><code>&lt;aside&gt;</code></td><td>定义页面的侧边栏内容。</td></tr><tr><td><code>&lt;bdi&gt;</code></td><td>允许您设置一段文本，使其脱离其父元素的文本方向设置。</td></tr><tr><td><code>&lt;command&gt;</code></td><td>定义命令按钮，比如单选按钮、复选框或按钮</td></tr><tr><td><code>&lt;details&gt;</code></td><td>用于描述文档或文档某个部分的细节</td></tr><tr><td><code>&lt;dialog&gt;</code></td><td>定义对话框，比如提示框</td></tr><tr><td><code>&lt;summary&gt;</code></td><td>标签包含 <code>details</code> 元素的标题</td></tr><tr><td><code>&lt;figure&gt;</code></td><td>规定独立的流内容（图像、图表、照片、代码等等）。</td></tr><tr><td><code>&lt;figcaption&gt;</code></td><td>定义 <code>&lt;figure&gt;</code> 元素的标题</td></tr><tr><td><code>&lt;footer&gt;</code></td><td>定义 <code>section</code> 或 <code>document</code> 的页脚。</td></tr><tr><td><code>&lt;header&gt;</code></td><td>定义了文档的头部区域</td></tr><tr><td><code>&lt;mark&gt;</code></td><td>定义带有记号的文本。</td></tr><tr><td><code>&lt;meter&gt;</code></td><td>定义度量衡。仅用于已知最大和最小值的度量。</td></tr><tr><td><code>&lt;nav&gt;</code></td><td>定义导航链接的部分。</td></tr><tr><td><code>&lt;progress&gt;</code></td><td>定义任何类型的任务的进度。</td></tr><tr><td><code>&lt;ruby&gt;</code></td><td>定义 <code>ruby</code> 注释（中文注音或字符）。</td></tr><tr><td><code>&lt;rt&gt;</code></td><td>定义字符（中文注音或字符）的解释或发音。</td></tr><tr><td><code>&lt;rp&gt;</code></td><td>在 <code>ruby</code> 注释中使用，定义不支持 <code>ruby</code> 元素的浏览器所显示的内容。</td></tr><tr><td><code>&lt;section&gt;</code></td><td>定义文档中的节（<code>section</code>、区段）。</td></tr><tr><td><code>&lt;time&gt;</code></td><td>定义日期或时间。</td></tr><tr><td><code>&lt;wbr&gt;</code></td><td>规定在文本中的何处适合添加换行符。</td></tr></tbody></table><p>需要记住经常使用的标签：<code>&lt;article&gt;</code>, <code>&lt;aside&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;nav&gt;</code>, <code>&lt;section&gt;</code>。</p><h5 id="HTML5-Canvas"><a href="#HTML5-Canvas" class="headerlink" title="HTML5 Canvas"></a><code>HTML5</code> <code>Canvas</code></h5><blockquote><p><code>&lt;canvas&gt;</code> 标签定义图形，是一个图形容器，用于图形的绘制，通过脚本 (通常是<code>JavaScript</code>)来完成。</p></blockquote><h6 id="创建一个画布（Canvas）"><a href="#创建一个画布（Canvas）" class="headerlink" title="创建一个画布（Canvas）"></a>创建一个画布（<code>Canvas</code>）</h6><p>注意: 默认情况下 <code>&lt;canvas&gt;</code> 元素没有边框和内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid black"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="使用-JavaScript-来绘制图像"><a href="#使用-JavaScript-来绘制图像" class="headerlink" title="使用 JavaScript 来绘制图像"></a>使用 <code>JavaScript</code> 来绘制图像</h6><p><code>canvas</code> 元素本身是没有绘图能力的。所有的绘制工作必须在 <code>JavaScript</code> 内部完成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找到canvas元素</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="comment">// 创建context对象</span></span><br><span class="line"><span class="keyword">var</span> ctx = c.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="comment">// 设置颜色和填充方式</span></span><br><span class="line">ctx.fillStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br></pre></td></tr></table></figure><p><code>getContext(&quot;2d&quot;)</code> 对象是内建的 <code>HTML5</code> 对象，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</p><p>设置<code>fillStyle</code>属性可以是<code>CSS</code>颜色，渐变，或图案。<code>fillStyle</code> 默认设置是<code>#000000</code>（黑色）。</p><p><code>fillRect(x,y,width,height)</code> 方法定义了矩形当前的填充方式。</p><h6 id="Canvas-坐标"><a href="#Canvas-坐标" class="headerlink" title="Canvas 坐标"></a><code>Canvas</code> 坐标</h6><p><code>canvas</code> 是一个二维网格。</p><p><code>canvas 的左上角坐标为</code>(0,0)`</p><blockquote><p><code>fillRect(0, 0, 150, 150)</code> 意为从<code>(0,0)</code>左上角开始，填充一个<code>150*150</code>的矩形。画布默认为<code>300*150</code>，如果超出了画布大小，最大以画布为界，溢出部分隐藏。</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5fm0p16gfj215m07oglf.jpg" alt="canvas"></p><h6 id="Canvas-路径"><a href="#Canvas-路径" class="headerlink" title="Canvas 路径"></a><code>Canvas</code> 路径</h6><p>使用<code>canvas</code>画线：</p><ul><li><p><code>moveTo(x,y)</code> 定义线条开始坐标</p></li><li><p><code>lineTo(x,y)</code> 定义线条结束坐标</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = c.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="comment">// 定义开始坐标(0,0)，结束坐标(200,100)，然后使用stroke() 方法绘制线条</span></span><br><span class="line">ctx.moveTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p>在<code>canvas</code>中绘制圆形：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arc(x, y, r, start, stop)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Circle<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#circle</span> &#123;</span></span><br><span class="line">            background-color: orange;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"circle"</span> <span class="attr">width</span>=<span class="string">"200px"</span> <span class="attr">height</span>=<span class="string">"200px"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建context对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"circle"</span>).getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 开始一条路径，或重置当前的路径</span></span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 设置线条宽度</span></span></span><br><span class="line"><span class="actionscript">    ctx.lineWidth = <span class="string">"2"</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 设置线条颜色</span></span></span><br><span class="line"><span class="actionscript">    ctx.strokeStyle = <span class="string">"pink"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 绘制圆 arc(x, y, r, start, stop)</span></span></span><br><span class="line"><span class="javascript">    ctx.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI);</span></span><br><span class="line">    ctx.stroke();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="Canvas-文本"><a href="#Canvas-文本" class="headerlink" title="Canvas 文本"></a><code>Canvas</code> 文本</h6><p>使用 <code>canvas</code> 绘制文本，重要的属性和方法如下：</p><ul><li><p><code>font</code> 定义字体</p></li><li><p><code>fillText(text, x, y)</code> 在 <code>canvas</code> 上绘制实心的文本</p></li><li><p><code>strokeText(text, x, y)</code> 在 <code>canvas</code> 上绘制空心的文本</p></li></ul><p>实心的文本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = c.getContext(<span class="string">"2d"</span>);</span><br><span class="line">ctx.font = <span class="string">"30px Arial"</span>;</span><br><span class="line">ctx.fillText(<span class="string">"Akashi"</span>, <span class="number">10</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>空心的文本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = c.getContext(<span class="string">"2d"</span>);</span><br><span class="line">ctx.font = <span class="string">"30px Arial"</span>;</span><br><span class="line">ctx.strokeText(<span class="string">"Akashi"</span>, <span class="number">10</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><h6 id="Canvas-渐变"><a href="#Canvas-渐变" class="headerlink" title="Canvas 渐变"></a><code>Canvas</code> 渐变</h6><ul><li><p><code>createLinearGradient(x, y, x1, y1)</code>  创建线条渐变</p></li><li><p><code>createRadialGradient(x, y, r, x1 , y1, r1)</code>  创建一个径向/圆渐变</p></li></ul><blockquote><p>在使用渐变对象时，必须使用两种或两种以上的停止颜色，<code>addColorStop()</code> 方法指定颜色停止，参数使用坐标来描述，可以是 <code>0</code> 至 <code>1</code> 。</p></blockquote><p>线性渐变：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Gradient<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#canvas</span> &#123;</span></span><br><span class="line">            border: 1px solid black;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> grd = ctx.createLinearGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);</span></span><br><span class="line"><span class="actionscript">    grd.addColorStop(<span class="number">0</span>, <span class="string">"red"</span>);</span></span><br><span class="line"><span class="actionscript">    grd.addColorStop(<span class="number">1</span>, <span class="string">"white"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 填充</span></span></span><br><span class="line">    ctx.fillStyle = grd;</span><br><span class="line">    ctx.fillRect(0, 0, 300, 150)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>径向\圆渐变：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Gradient<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#gradient</span> &#123;</span></span><br><span class="line">            border: 1px solid black;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"gradient"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"gradient"</span>).getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> grd = ctx.createRadialGradient(<span class="number">150</span>, <span class="number">75</span>, <span class="number">0</span>, <span class="number">150</span>, <span class="number">75</span>, <span class="number">100</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    grd.addColorStop(<span class="number">0</span>, <span class="string">"red"</span>);</span></span><br><span class="line"><span class="actionscript">    grd.addColorStop(<span class="number">1</span>, <span class="string">"white"</span>);</span></span><br><span class="line"></span><br><span class="line">    ctx.fillStyle = grd;</span><br><span class="line">    ctx.fillRect(0, 0, 300, 150);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="HTML5-内联-SVG"><a href="#HTML5-内联-SVG" class="headerlink" title="HTML5 内联 SVG"></a><code>HTML5</code> 内联 <code>SVG</code></h5><blockquote><p><code>HTML5</code> 支持内联 <code>SVG</code>。</p></blockquote><h6 id="什么是-SVG？"><a href="#什么是-SVG？" class="headerlink" title="什么是 SVG？"></a>什么是 <code>SVG</code>？</h6><p><code>SVG</code> 指可伸缩矢量图形 (<code>Scalable Vector Graphics</code>)<br><code>SVG</code> 用于定义用于网络的基于矢量的图形<br><code>SVG</code> 使用 <code>XML</code> 格式定义图形<br><code>SVG</code> 图像在放大或改变尺寸的情况下其图形质量不会有损失<br><code>SVG</code> 是万维网联盟的标准</p><h6 id="SVG-优势"><a href="#SVG-优势" class="headerlink" title="SVG 优势"></a><code>SVG</code> 优势</h6><p>与其他图像格式相比（比如 <code>JPEG</code> 和 <code>GIF</code>），使用 <code>SVG</code> 的优势在于：</p><p><code>SVG</code> 图像可通过文本编辑器来创建和修改<br><code>SVG</code> 图像可被搜索、索引、脚本化或压缩<br><code>SVG</code> 是可伸缩的<br><code>SVG</code> 图像可在任何的分辨率下被高质量地打印<br><code>SVG</code> 可在图像质量不下降的情况下被放大</p><h6 id="Canvas-与-SVG-的比较"><a href="#Canvas-与-SVG-的比较" class="headerlink" title="Canvas 与 SVG 的比较"></a><code>Canvas</code> 与 <code>SVG</code> 的比较</h6><table><thead><tr><th><code>Canvas</code></th><th><code>SVG</code></th></tr></thead><tbody><tr><td>依赖分辨率</td><td>不依赖分辨率</td></tr><tr><td>不支持事件处理器</td><td>支持事件处理器</td></tr><tr><td>弱的文本渲染能力</td><td>最适合带有大型渲染区域的应用程序（比如谷歌地图）</td></tr><tr><td>能够以 .png 或 .jpg 格式保存结果图像</td><td>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</td></tr><tr><td>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</td><td>不适合游戏应用</td></tr></tbody></table><h5 id="HTML5-拖放（Drag-和-Drop）"><a href="#HTML5-拖放（Drag-和-Drop）" class="headerlink" title="HTML5 拖放（Drag 和 Drop）"></a><code>HTML5</code> 拖放（<code>Drag</code> 和 <code>Drop</code>）</h5><h6 id="设置元素可拖放"><a href="#设置元素可拖放" class="headerlink" title="设置元素可拖放"></a>设置元素可拖放</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Drag_Drop<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        img &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: auto;</span><br><span class="line">            border: 1px solid black;</span><br><span class="line">            margin: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">            border: 1px solid black;</span><br><span class="line">            width: 120px;</span><br><span class="line">            min-height: 170px;</span><br><span class="line">            margin: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">ondrop</span>=<span class="string">"drop(event)"</span> <span class="attr">ondragover</span>=<span class="string">"allowDrop(event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"asuka"</span> <span class="attr">src</span>=<span class="string">"./asuka.jpg"</span> <span class="attr">alt</span>=<span class="string">"asuka"</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">ondragstart</span>=<span class="string">"drag(event)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">allowDrop</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">drag</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        event.dataTransfer.setData(<span class="string">"Text"</span>, event.target.id);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">drop</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line">        event.preventDefault();</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> data = event.dataTransfer.getData(<span class="string">"Text"</span>);</span></span><br><span class="line"><span class="javascript">        event.target.appendChild(<span class="built_in">document</span>.getElementById(data));</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先，要设置元素是可以被拖放的，把 <code>draggable</code> 属性设置为 <code>true</code> ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="定义元素被拖动时事件"><a href="#定义元素被拖动时事件" class="headerlink" title="定义元素被拖动时事件"></a>定义元素被拖动时事件</h6><ul><li><p><code>ondragstart</code></p></li><li><p><code>setData()</code></p></li></ul><p><code>ondragstart</code> 属性调用了一个函数，<code>drag(event)</code>，它规定了被拖动的数据。</p><p><code>dataTransfer.setData()</code> 方法设置被拖数据的数据类型和值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    ev.dataTransfer.setData(<span class="string">"Text"</span>, ev.target.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="设置元素拖放后事件"><a href="#设置元素拖放后事件" class="headerlink" title="设置元素拖放后事件"></a>设置元素拖放后事件</h5><p><code>ondragover</code> 事件规定在何处放置被拖动的数据。</p><p>默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。</p><p>这要通过调用 <code>ondragover</code> 事件的 <code>event.preventDefault()</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ev.preventDefault()</span><br></pre></td></tr></table></figure><h5 id="进行放置"><a href="#进行放置" class="headerlink" title="进行放置"></a>进行放置</h5><p>当放置被拖数据时，会发生 <code>drop</code> 事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drop</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    ev.preventDefault();</span><br><span class="line">    <span class="keyword">var</span> data = ev.dataTransfer.getData(<span class="string">"Text"</span>);</span><br><span class="line">    ev.target.appendChild(<span class="built_in">document</span>.getElementById(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释：</p><ul><li>调用 <code>preventDefault()</code> 来避免浏览器对数据的默认处理（<code>drop</code> 事件的默认行为是以链接形式打开）</li><li>通过 <code>dataTransfer.getData(&quot;Text&quot;)</code> 方法获得被拖的数据。该方法将返回在 <code>setData()</code> 方法中设置为相同类型的任何数据。</li><li>被拖数据是被拖元素的 <code>id (&quot;asuka&quot;)</code></li><li>把被拖元素追加到放置元素（目标元素）中</li></ul><h5 id="HTML5-Video-视频"><a href="#HTML5-Video-视频" class="headerlink" title="HTML5 Video(视频)"></a><code>HTML5</code> <code>Video</code>(视频)</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Video<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">width</span>=<span class="string">"500px"</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"./gakki.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"playControl()"</span>&gt;</span>播放/暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> video = <span class="built_in">document</span>.getElementById(<span class="string">"video"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">playControl</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">        if (video.paused) &#123;</span><br><span class="line">            video.play();</span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">            video.pause();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h6><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>autoplay</code></td><td><code>autoplay</code></td><td>如果出现该属性，则视频在就绪后马上播放。</td></tr><tr><td><code>controls</code></td><td><code>controls</code></td><td>如果出现该属性，则向用户显示控件，比如播放按钮。</td></tr><tr><td><code>height</code></td><td><code>pixels</code></td><td>设置视频播放器的高度。</td></tr><tr><td><code>loop</code></td><td><code>loop</code></td><td>如果出现该属性，则当媒介文件完成播放后再次开始播放。</td></tr><tr><td><code>muted</code></td><td><code>muted</code></td><td>如果出现该属性，视频的音频输出为静音。</td></tr><tr><td><code>poster</code></td><td><code>URL</code></td><td>规定视频正在下载时显示的图像，直到用户点击播放按钮。</td></tr><tr><td><code>preload</code></td><td><code>auto</code> <code>metadata</code> <code>none</code></td><td>如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “<code>autoplay</code>“，则忽略该属性。</td></tr><tr><td><code>src</code></td><td><code>URL</code></td><td>要播放的视频的 <code>URL</code>。</td></tr><tr><td><code>width</code></td><td><code>pixels</code></td><td>设置视频播放器的宽度。</td></tr></tbody></table><h5 id="HTML5-Audio-音频"><a href="#HTML5-Audio-音频" class="headerlink" title="HTML5 Audio (音频)"></a><code>HTML5</code> <code>Audio</code> (音频)</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Audio<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"audio"</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"./aimer.mp3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"playControl()"</span>&gt;</span>播放/暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> audio = <span class="built_in">document</span>.getElementById(<span class="string">"audio"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 设置自动播放</span></span></span><br><span class="line">    audio.play();</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">playControl</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">        if (audio.paused) &#123;</span><br><span class="line">            audio.play();</span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">            audio.pause();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="可选属性-1"><a href="#可选属性-1" class="headerlink" title="可选属性"></a>可选属性</h6><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>autoplay</code></td><td><code>autoplay</code></td><td>如果出现该属性，则音频在就绪后马上播放。</td></tr><tr><td><code>controls</code></td><td><code>controls</code></td><td>如果出现该属性，则向用户显示音频控件（比如播放/暂停按钮）。</td></tr><tr><td><code>loop</code></td><td><code>loop</code></td><td>如果出现该属性，则每当音频结束时重新开始播放。</td></tr><tr><td><code>muted</code></td><td><code>muted</code></td><td>如果出现该属性，则音频输出为静音。</td></tr><tr><td><code>preload</code></td><td><code>auto</code> <code>metadata</code> <code>none</code></td><td>规定当网页加载时，音频是否默认被加载以及如何被加载。</td></tr><tr><td><code>src</code></td><td><code>URL</code></td><td>规定音频文件的 <code>URL</code>。</td></tr></tbody></table><h5 id="HTML5-语义元素"><a href="#HTML5-语义元素" class="headerlink" title="HTML5 语义元素"></a><code>HTML5</code> 语义元素</h5><blockquote><p>语义元素可以清楚地描述标签的意义，方便开发者的开发和浏览器的识别。</p></blockquote><h6 id="lt-section-gt"><a href="#lt-section-gt" class="headerlink" title="&lt;section&gt;"></a><code>&lt;section&gt;</code></h6><blockquote><p><code>&lt;section&gt;</code> 标签定义文档中的节（<code>section</code>、区段）。比如章节、页眉、页脚或文档中的其他部分。</p></blockquote><h6 id="lt-article-gt"><a href="#lt-article-gt" class="headerlink" title="&lt;article&gt;"></a><code>&lt;article&gt;</code></h6><blockquote><p><code>&lt;article&gt;</code> 标签定义独立的内容。</p></blockquote><h6 id="lt-nav-gt"><a href="#lt-nav-gt" class="headerlink" title="&lt;nav&gt;"></a><code>&lt;nav&gt;</code></h6><blockquote><p><code>&lt;nav&gt;</code> 标签定义导航链接的部分。</p></blockquote><h6 id="lt-aside-gt"><a href="#lt-aside-gt" class="headerlink" title="&lt;aside&gt;"></a><code>&lt;aside&gt;</code></h6><blockquote><p><code>&lt;aside&gt;</code> 标签定义页面主区域内容之外的内容（比如侧边栏）。</p></blockquote><h6 id="lt-header-gt"><a href="#lt-header-gt" class="headerlink" title="&lt;header&gt;"></a><code>&lt;header&gt;</code></h6><blockquote><p><code>&lt;header&gt;</code>元素描述了文档的头部区域，主要用于定义内容的介绍展示区域。</p></blockquote><h6 id="lt-footer-gt"><a href="#lt-footer-gt" class="headerlink" title="&lt;footer&gt;"></a><code>&lt;footer&gt;</code></h6><blockquote><p><code>&lt;footer&gt;</code> 元素描述了文档的底部区域。</p></blockquote><h6 id="lt-figure-gt-和-lt-figcaption-gt"><a href="#lt-figure-gt-和-lt-figcaption-gt" class="headerlink" title="&lt;figure&gt; 和 &lt;figcaption&gt;"></a><code>&lt;figure&gt;</code> 和 <code>&lt;figcaption&gt;</code></h6><blockquote><p><code>&lt;figure&gt;</code> 标签规定独立的流内容（图像、图表、照片、代码等等）。</p></blockquote><p><code>&lt;figure&gt;</code> 元素的内容应该与主内容相关，但如果被删除，则不应对文档流产生影响。</p><blockquote><p><code>&lt;figcaption&gt;</code> 标签定义 <code>&lt;figure&gt;</code> 元素的标题.</p></blockquote><p><code>&lt;figcaption&gt;</code> 元素应该被置于 “<code>figure</code>“ 元素的第一个或最后一个子元素的位置。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> H5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Highmaps 地图数据可视化</title>
      <link href="2019/07/27/highmap/highmaps/"/>
      <url>2019/07/27/highmap/highmaps/</url>
      
        <content type="html"><![CDATA[<h4 id="Highmaps"><a href="#Highmaps" class="headerlink" title="Highmaps"></a><code>Highmaps</code></h4><hr><blockquote><p><code>Highmaps</code> 是继承自 <code>Highcharts</code> 的专门用于地图的图表插件。<code>Highmaps</code> 除了根据值展示地理区域色块外，还支持线段（可以表示公路，河流等）、点（城市，兴趣点等）等其他地理元素。</p></blockquote><a id="more"></a><h5 id="加载js文件"><a href="#加载js文件" class="headerlink" title="加载js文件"></a>加载<code>js</code>文件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://img.hcharts.cn/highmaps/highmaps.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>如果需要和<code>Highcharts</code> 一起使用，则是引入 <code>map.js</code> 即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://img.hcharts.cn/highcharts/highcharts.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/img.hcharts.cn/</span>highmaps/modules/map.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="加载地图数据文件"><a href="#加载地图数据文件" class="headerlink" title="加载地图数据文件"></a>加载地图数据文件</h5><blockquote><p>以下以加载中国地图为例：</p></blockquote><h6 id="通过加载-js-文件加载地图数据"><a href="#通过加载-js-文件加载地图数据" class="headerlink" title="通过加载 js 文件加载地图数据"></a>通过加载 <code>js</code> 文件加载地图数据</h6><p>直接以 <code>script</code> 标签的形式加载文件，对应的取地图数据的方法是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://data.jianshukeji.com/geochina/china.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var mapdata = Highcharts.maps['cn/china'];</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>其中 <code>Highcharts.maps[&#39;cn/china&#39;]</code> 可以通过查看文件获得。</p><h6 id="通过加载-json-文件加载地图数据"><a href="#通过加载-json-文件加载地图数据" class="headerlink" title="通过加载 json 文件加载地图数据"></a>通过加载 <code>json</code> 文件加载地图数据</h6><p>由于跨域问题，所以加载 <code>json</code> 时需要用到 <code>jsonp</code>，这里直接用我们提供的接口即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(<span class="string">'https://data.jianshukeji.com/jsonp?filename=geochina/china.json&amp;callback=?'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mapdata = data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>地图数据集查询：<code>https://img.hcharts.cn/mapdata/</code></p><h5 id="初始化地图"><a href="#初始化地图" class="headerlink" title="初始化地图"></a>初始化地图</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化地图</span></span><br><span class="line"><span class="keyword">var</span> map = Highcharts.mapChart(<span class="string">'container'</span>, &#123;</span><br><span class="line">    series: [&#123;</span><br><span class="line">        mapData: mapdata,</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="加载数据并与地图关联"><a href="#加载数据并与地图关联" class="headerlink" title="加载数据并与地图关联"></a>加载数据并与地图关联</h5><p>加载地图数据并初始化图表后，可以将业务数据配置在 <code>series.data</code> 中，格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">series: [&#123;</span><br><span class="line">    mapData: mapdata,</span><br><span class="line">    data: [&#123;</span><br><span class="line">        name: <span class="string">'北京'</span>,</span><br><span class="line">        value: <span class="number">2000</span>,</span><br><span class="line">        rank: <span class="number">1</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        name: <span class="string">'上海'</span>,</span><br><span class="line">        value: <span class="number">1500</span>,</span><br><span class="line">        rank: <span class="number">2</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>需要注意的是，设置完数据后，我们还需要指定数据与地图数据的关联属性，即 <code>joinBy</code>，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">series: [&#123;</span><br><span class="line">    mapData: mapdata,</span><br><span class="line">    data: [&#123;</span><br><span class="line">        name: <span class="string">'北京'</span>,</span><br><span class="line">        value: <span class="number">2000</span>,</span><br><span class="line">        rank: <span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: <span class="string">'上海'</span>,</span><br><span class="line">        value: <span class="number">1500</span>,</span><br><span class="line">        rank: <span class="number">2</span></span><br><span class="line">    &#125;],</span><br><span class="line">    joinBy: <span class="string">'name'</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>这样，一个简单的中国地图图表数据就创建好了。</p><h5 id="js-加载地图数据实例展示"><a href="#js-加载地图数据实例展示" class="headerlink" title="js 加载地图数据实例展示"></a><code>js</code> 加载地图数据实例展示</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>China_Map<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 js 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://img.hcharts.cn/highcharts/highcharts.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://img.hcharts.cn/highmaps/modules/map.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过 js 加载地图数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://data.jianshukeji.com/geochina/china.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> mapdata = Highcharts.maps[<span class="string">'cn/china'</span>];</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 初始化地图</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> map = Highcharts.mapChart(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 添加标题</span></span></span><br><span class="line">        title: &#123;</span><br><span class="line"><span class="actionscript">            text: <span class="string">"China_Map"</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="comment">// 图表配置</span></span></span><br><span class="line">        series: [&#123;</span><br><span class="line">            mapData: mapdata,</span><br><span class="line">            data: [&#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'北京'</span>,</span></span><br><span class="line">                value: 2000,</span><br><span class="line">                rank: 1</span><br><span class="line">            &#125;, &#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'上海'</span>,</span></span><br><span class="line">                value: 1500,</span><br><span class="line">                rank: 2</span><br><span class="line">            &#125;],</span><br><span class="line"><span class="actionscript">            joinBy: <span class="string">'name'</span></span></span><br><span class="line">        &#125;],</span><br><span class="line"><span class="actionscript">        <span class="comment">// 去除水印</span></span></span><br><span class="line">        credits: &#123;</span><br><span class="line"><span class="actionscript">            enabled: <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5efug2pndj216y0lwq5d.jpg" alt="js_map"></p><h5 id="json-加载地图数据实例展示"><a href="#json-加载地图数据实例展示" class="headerlink" title="json 加载地图数据实例展示"></a><code>json</code> 加载地图数据实例展示</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>China_Map<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 js 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://img.hcharts.cn/highcharts/highcharts.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://img.hcharts.cn/highmaps/modules/map.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过 js 加载地图数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://data.jianshukeji.com/geochina/china.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载 jQuery 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $.getJSON(<span class="string">'https://data.jianshukeji.com/jsonp?filename=geochina/china.json&amp;callback=?'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">mapdata</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = Highcharts.mapChart(<span class="string">'main'</span>, &#123;</span></span><br><span class="line">            title: &#123;</span><br><span class="line"><span class="actionscript">                text: <span class="string">'China_Map'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            series: [&#123;</span><br><span class="line">                mapData: mapdata,</span><br><span class="line"><span class="actionscript">                name: <span class="string">'value'</span>,</span></span><br><span class="line">                data: [&#123;</span><br><span class="line"><span class="actionscript">                    city: <span class="string">'北京'</span>,</span></span><br><span class="line">                    value: 2000,</span><br><span class="line">                    rank: 1</span><br><span class="line">                &#125;,&#123;</span><br><span class="line"><span class="actionscript">                    city: <span class="string">'上海'</span>,</span></span><br><span class="line">                    value: 1500,</span><br><span class="line">                    rank: 2</span><br><span class="line">                &#125;,&#123;</span><br><span class="line"><span class="actionscript">                    city: <span class="string">'四川'</span>,</span></span><br><span class="line"><span class="actionscript">                    value: <span class="string">'1300'</span>,</span></span><br><span class="line">                    rank: 3</span><br><span class="line">                &#125;,&#123;</span><br><span class="line"><span class="actionscript">                    city: <span class="string">'重庆'</span>,</span></span><br><span class="line"><span class="actionscript">                    value: <span class="string">'1300'</span>,</span></span><br><span class="line">                    rank: 3</span><br><span class="line">                &#125;,&#123;</span><br><span class="line"><span class="actionscript">                    city: <span class="string">'广东'</span>,</span></span><br><span class="line">                    value: 1200,</span><br><span class="line">                    rank: 4</span><br><span class="line">                &#125;],</span><br><span class="line"><span class="actionscript">                joinBy: [<span class="string">'name'</span>, <span class="string">'city'</span>]</span></span><br><span class="line">            &#125;],</span><br><span class="line">            credits: &#123;</span><br><span class="line"><span class="actionscript">                enabled: <span class="literal">false</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5efuy1pi3j216u0momzn.jpg" alt="json_map"></p><h4 id="尝试创建一个世界地图"><a href="#尝试创建一个世界地图" class="headerlink" title="尝试创建一个世界地图"></a>尝试创建一个世界地图</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Map_World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://img.hcharts.cn/highcharts/highcharts.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://img.hcharts.cn/highmaps/modules/map.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 地图数据集参考：https://img.hcharts.cn/mapdata/ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://img.hcharts.cn/mapdata/custom/world-eckert3-highres.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> mapdata = Highcharts.maps[<span class="string">'custom/world-eckert3-highres'</span>];</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> map = Highcharts.mapChart(<span class="string">'container'</span>, &#123;</span></span><br><span class="line">        title: &#123;</span><br><span class="line"><span class="actionscript">            text: <span class="string">'World_Map'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        series: [&#123;</span><br><span class="line">            mapData: mapdata,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'Country'</span>,</span></span><br><span class="line">            data: [&#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'China'</span>,</span></span><br><span class="line">                value: 1230</span><br><span class="line">            &#125;,&#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'United States of America'</span>,</span></span><br><span class="line">                value: 1235</span><br><span class="line">            &#125;,&#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'Australia'</span>,</span></span><br><span class="line">                value: 1245</span><br><span class="line">            &#125;,&#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'Russia'</span>,</span></span><br><span class="line">                value: 1256</span><br><span class="line">            &#125;],</span><br><span class="line"><span class="actionscript">            joinBy: <span class="string">'name'</span></span></span><br><span class="line">        &#125;],</span><br><span class="line">        credits:&#123;</span><br><span class="line"><span class="actionscript">            enabled:<span class="literal">false</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        mapNavigation: &#123;</span><br><span class="line"><span class="actionscript">            enabled: <span class="literal">true</span>, <span class="comment">// 开启地图导航器，默认是 false</span></span></span><br><span class="line"><span class="actionscript">            enableButtons: <span class="literal">true</span>, <span class="comment">// 是否启用缩放按钮</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5eg2yosjgj21uo0m6afj.jpg" alt="world_map"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> Charts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> charts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery DOM 操作（下）</title>
      <link href="2019/07/26/basic-jquery-dom-2/DOM/"/>
      <url>2019/07/26/basic-jquery-dom-2/DOM/</url>
      
        <content type="html"><![CDATA[<h4 id="JQuery-DOM-操作（下）"><a href="#JQuery-DOM-操作（下）" class="headerlink" title="JQuery DOM 操作（下）"></a><code>JQuery</code> <code>DOM</code> 操作（下）</h4><h5 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h5><blockquote><p><code>jQuery</code> 拥有可操作 <code>HTML</code> 元素和属性的强大方法。</p></blockquote><a id="more"></a><h6 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h6><ul><li><code>text()</code></li></ul><blockquote><p>设置或返回所选元素的文本内容</p></blockquote><ul><li><code>html()</code></li></ul><blockquote><p>设置或返回所选元素的内容（包括 HTML 标记）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>get value<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文本内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-1"</span>&gt;</span>text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-2"</span>&gt;</span>html<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn-1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            text = $(<span class="string">"#text"</span>).text();</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(text);</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn-2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            html = $(<span class="string">"#text"</span>).html();</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(html);</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>val()</code></li></ul><blockquote><p>设置或返回表单字段的值</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>get val<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"akashi"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>val<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            value = $(<span class="string">"input"</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(value);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h6><ul><li><code>attr()</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>get attr<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://akashi_sai.gitee.io/"</span>&gt;</span>点击访问<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>attribute<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            attribute = $(<span class="string">"a"</span>).attr(<span class="string">"href"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(attribute);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h5><blockquote><p>通过之前的四个方法，设置内容和属性。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>set value<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"text-1"</span>&gt;</span>这里是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"text-2"</span>&gt;</span>这里是另外一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"akashi"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-1"</span>&gt;</span>set text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-2"</span>&gt;</span>set html<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-3"</span>&gt;</span>set val<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn-1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#text-1"</span>).text(<span class="string">"set text"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn-2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#text-2"</span>).html(<span class="string">"set &lt;b&gt;html&lt;/b&gt;"</span>);</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn-3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"input"</span>).val(<span class="string">"asuka"</span>);</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>set attr<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://akashi_sai.gitee.io/"</span>&gt;</span>访问博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>set attr<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"a"</span>).attr(&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="string">"href"</span>: <span class="string">"https://akashigakki.github.io/"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"title"</span>: <span class="string">"GitHub Blog"</span></span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            title = $(<span class="string">"a"</span>).attr(<span class="string">"title"</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"a"</span>).html(title);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h5><h6 id="添加新的HTML元素"><a href="#添加新的HTML元素" class="headerlink" title="添加新的HTML元素"></a>添加新的<code>HTML</code>元素</h6><ul><li><code>append()</code></li></ul><blockquote><p><code>jQuery</code> <code>append()</code> 方法在被选元素的结尾插入内容（仍在该元素的内部）。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>append<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>append<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item_1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item_2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item_3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"ul"</span>).append(<span class="string">"&lt;li&gt;追加列表项&lt;/li&gt;"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>prepend()</code></li></ul><blockquote><p><code>jQuery</code> <code>prepend()</code> 方法在被选元素的开头插入内容。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>prepend<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>prepend<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item_1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item_2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item_3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"ul"</span>).prepend(<span class="string">"&lt;li&gt;追加列表项&lt;/li&gt;"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>after()</code></li></ul><blockquote><p><code>jQuery</code> <code>after()</code> 方法在被选元素之后插入内容。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>after<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>after<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item_1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item_2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item_3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"ul"</span>).after(<span class="string">"&lt;li&gt;追加列表项&lt;/li&gt;"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>before()</code></li></ul><blockquote><p><code>jQuery</code> <code>before()</code> 方法在被选元素之前插入内容。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>before<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>before<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item_1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item_2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item_3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"ul"</span>).before(<span class="string">"&lt;li&gt;追加列表项&lt;/li&gt;"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：<code>append()</code>和<code>prepend()</code>方法添加新元素是在选中元素的内部，而<code>after()</code>和<code>before()</code>方法添加新元素是在选中元素的外部（元素之后或元素之前）。</p><h5 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h5><h6 id="删除元素-内容"><a href="#删除元素-内容" class="headerlink" title="删除元素/内容"></a>删除元素/内容</h6><ul><li><code>remove()</code></li></ul><blockquote><p>删除被选元素（及其子元素）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>remove<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">            text-align: center;</span><br><span class="line">            margin: 5px;</span><br><span class="line">            padding: 5px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击删除元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是元素内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是元素内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#container"</span>).remove();</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>empty()</code></li></ul><blockquote><p>从被选元素中删除子元素</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>empty<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">            text-align: center;</span><br><span class="line">            margin: 5px;</span><br><span class="line">            padding: 5px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击清空元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是元素内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是元素内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#container"</span>).empty();</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="过滤被删除的元素"><a href="#过滤被删除的元素" class="headerlink" title="过滤被删除的元素"></a>过滤被删除的元素</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).remove(<span class="string">".part"</span>);</span><br></pre></td></tr></table></figure><p>删除了<code>class</code>名为<code>part</code>的段落（<code>p</code>），如果存在<code>class</code>名不是<code>part</code>的段落，则不会被删除。</p><h5 id="CSS类"><a href="#CSS类" class="headerlink" title="CSS类"></a><code>CSS</code>类</h5><ul><li><code>addClass()</code></li></ul><blockquote><p>向被选元素添加一个或多个类</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"h1, h2, p"</span>).addClass(<span class="string">"yellow"</span>);</span><br><span class="line">  $(<span class="string">"div"</span>).addClass(<span class="string">"important"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>也可以同时添加多个类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"body div:first"</span>).addClass(<span class="string">"important blue"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>removeClass()</code></li></ul><blockquote><p>从被选元素删除一个或多个类</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"h1, h2, p"</span>).removeClass(<span class="string">"yellow"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>toggleClass()</code></li></ul><blockquote><p>对被选元素进行添加/删除类的切换操作</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"h1,h2,p"</span>).toggleClass(<span class="string">"yellow"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>css()</code></li></ul><blockquote><p>设置或返回样式属性</p></blockquote><h5 id="css-方法"><a href="#css-方法" class="headerlink" title="css()方法"></a><code>css()</code>方法</h5><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">css(<span class="string">"propertyname"</span>, <span class="string">"value"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>也可以同时设置多个：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).css(&#123;<span class="string">"background-color"</span>:<span class="string">"yellow"</span>, <span class="string">"font-size"</span>:<span class="string">"200%"</span>&#125;);</span><br></pre></td></tr></table></figure><h5 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h5><blockquote><p><code>jQuery</code> 提供多个处理尺寸的重要方法：</p></blockquote><ul><li><code>width()</code></li></ul><blockquote><p><code>width()</code> 方法设置或返回元素的宽度（不包括内边距、边框或外边距）。</p></blockquote><ul><li><code>height()</code></li></ul><blockquote><p><code>height()</code> 方法设置或返回元素的高度（不包括内边距、边框或外边距）。</p></blockquote><ul><li><code>innerWidth()</code></li></ul><blockquote><p><code>innerWidth()</code> 方法返回元素的宽度（包括内边距）。</p></blockquote><ul><li><code>innerHeight()</code></li></ul><blockquote><p><code>innerHeight()</code> 方法返回元素的高度（包括内边距）。</p></blockquote><ul><li><code>outerWidth()</code></li></ul><blockquote><p><code>outerWidth()</code> 方法返回元素的宽度（包括内边距和边框）。</p></blockquote><ul><li><code>outerHeight()</code></li></ul><blockquote><p><code>outerHeight()</code> 方法返回元素的高度（包括内边距和边框）。</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5b2jy58lcj20ro0kagnw.jpg" alt="size"></p><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><blockquote><p><code>jQuery</code> 遍历，意为移动，用于根据其相对于其他元素的关系来查找（或选取）<code>HTML</code>元素。</p></blockquote><p>通过<code>jQuery</code>遍历，可以从当前元素开始，在家族树中向上移动（祖先），向下移动（子孙），水平移动（同胞），这种移动被称为对<code>DOM</code>树进行遍历：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            border: 1px solid pink;</span><br><span class="line">            list-style: none;</span><br><span class="line">            margin: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>ul</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>li</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>li</span><br><span class="line">                <span class="tag">&lt;<span class="name">b</span>&gt;</span>b<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5c6dfw4r5j21520jgq3e.jpg" alt="DOM"></p><h5 id="jQuery-祖先"><a href="#jQuery-祖先" class="headerlink" title="jQuery 祖先"></a><code>jQuery</code> 祖先</h5><blockquote><p>通过 <code>jQuery</code>，可以向上遍历 <code>DOM</code> 树，以查找元素的祖先。</p></blockquote><ul><li><code>parent()</code> 方法</li></ul><blockquote><p><code>parent()</code> 方法返回被选元素的直接父元素。该方法只会向上一级对 <code>DOM</code> 树进行遍历</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div * &#123;</span><br><span class="line">            border: 1px solid pink;</span><br><span class="line">            list-style: none;</span><br><span class="line">            margin: 15px;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div（祖父元素）</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>ul（父元素）</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>li（当前选中元素）</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>span（子孙元素）<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"li"</span>).parent().css(&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"border"</span>: <span class="string">"2px solid yellow"</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>parents()</code>方法</li></ul><blockquote><p><code>parents()</code> 方法返回被选元素的所有祖先元素，一直到文档根元素。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>parents<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div * &#123;</span><br><span class="line">            border: 1px solid pink;</span><br><span class="line">            list-style: none;</span><br><span class="line">            margin: 15px;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div（祖父元素）</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>ul（父元素）</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>li（当前选中元素）</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>span（子孙元素）<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"li"</span>).parents().css(&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"border"</span>: <span class="string">"2px solid yellow"</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>parentsUntil()</code>方法</li></ul><blockquote><p><code>parentsUntil()</code> 方法返回介于两个给定元素之间的所有祖先元素。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>parentsUntil<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div * &#123;</span><br><span class="line">            border: 1px solid pink;</span><br><span class="line">            list-style: none;</span><br><span class="line">            margin: 15px;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div（祖父元素）</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>ul（父元素）</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>li（当前选中元素）</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>span（子孙元素）<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"li"</span>).parentsUntil(<span class="string">"body"</span>).css(&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"border"</span>: <span class="string">"2px solid yellow"</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="jQuery-子孙"><a href="#jQuery-子孙" class="headerlink" title="jQuery 子孙"></a><code>jQuery</code> 子孙</h5><ul><li><code>children()</code> 方法</li></ul><blockquote><p><code>children()</code> 方法返回被选元素的所有直接子元素。该方法只会向下一级对 <code>DOM</code> 树进行遍历。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>children<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div * &#123;</span><br><span class="line">            border: 1px solid pink;</span><br><span class="line">            list-style: none;</span><br><span class="line">            margin: 15px;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div（祖父元素）</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>ul（父元素）</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>li（当前选中元素）</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>span（子孙元素）</span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"li"</span>).children().css(&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"border"</span>: <span class="string">"2px solid yellow"</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>find()</code> 方法</li></ul><blockquote><p><code>find()</code> 方法返回被选元素的后代元素，一直到最后一个。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>children<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div * &#123;</span><br><span class="line">            border: 1px solid pink;</span><br><span class="line">            list-style: none;</span><br><span class="line">            margin: 15px;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div（祖父元素）</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>ul（父元素）</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>li（当前选中元素）</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>span（子孙元素）</span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"li"</span>).find(<span class="string">"*"</span>).css(&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"border"</span>: <span class="string">"2px solid yellow"</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，也可以对返回的标签进行过滤，来返回固定的标签。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"li"</span>).find(<span class="string">"span"</span>).css(&#123;</span><br><span class="line">        <span class="string">"border"</span>: <span class="string">"2px solid yellow"</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="jQuery-同胞"><a href="#jQuery-同胞" class="headerlink" title="jQuery 同胞"></a><code>jQuery</code> 同胞</h5><ul><li><code>siblings()</code> 方法</li></ul><blockquote><p><code>siblings()</code> 方法返回被选元素的所有同胞元素。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">"h2"</span>).siblings();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同时，也可以传入参数来过滤同胞元素进行搜索。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"h2"</span>).siblings(<span class="string">"span"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td><code>next()</code></td><td>返回被选元素的下一个同胞元素。该方法只返回一个元素</td></tr><tr><td><code>nextAll()</code></td><td>返回被选元素的所有跟随的同胞元素</td></tr><tr><td><code>nextUntil()</code></td><td>返回介于两个给定参数之间的所有跟随的同胞元素</td></tr><tr><td><code>prev()</code></td><td>返回被选元素的前一个同胞元素。该方法只返回一个元素</td></tr><tr><td><code>prevAll()</code></td><td>返回被选元素的所有之前的同胞元素</td></tr><tr><td><code>prevUntil()</code></td><td>返回介于两个给定参数之间的所有之前的同胞元素</td></tr></tbody></table><h5 id="jQuery-过滤"><a href="#jQuery-过滤" class="headerlink" title="jQuery 过滤"></a><code>jQuery</code> 过滤</h5><blockquote><p>遍历-过滤，缩小搜索元素的范围。</p></blockquote><ul><li><code>first()</code> 方法</li></ul><blockquote><p><code>first()</code> 方法返回被选元素的首个元素。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).first();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>last()</code> 方法</li></ul><blockquote><p><code>last()</code> 方法返回被选元素的最后一个元素。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).last();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>eq()</code> 方法</li></ul><blockquote><p><code>eq()</code> 方法返回被选元素中带有指定索引号的元素。</p></blockquote><p>索引号从 0 开始，因此首个元素的索引号是 <code>0</code> 而不是 <code>1</code> 。<br>下面的例子选取第二个 <code>&lt;p&gt;</code> 元素（索引号 1）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).eq(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>filter()</code> 方法</li></ul><blockquote><p><code>filter()</code> 方法允许规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。</p></blockquote><p>下面的例子返回带有类名 “<code>title</code>“ 的所有 <code>&lt;p&gt;</code> 元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).filter(<span class="string">".title"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>not()</code> 方法</li></ul><blockquote><p><code>not()</code> 方法返回不匹配标准的所有元素。</p></blockquote><p>提示：<code>not()</code> 方法与 <code>filter()</code> 相反。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).not(<span class="string">".title"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="jQuery-AJAX"><a href="#jQuery-AJAX" class="headerlink" title="jQuery AJAX"></a><code>jQuery</code> <code>AJAX</code></h5><blockquote><p><code>AJAX</code> 是与服务器交换数据的技术，它在不重载全部页面的情况下，实现了对部分网页的更新。</p></blockquote><p><code>AJAX</code> = 异步 <code>JavaScript</code> 和 <code>XML</code>（<code>Asynchronous JavaScript and XML</code>）。</p><p>简短地说，在不重载整个网页的情况下，<code>AJAX</code> 通过后台加载数据，并在网页上进行显示。</p><p><code>jQuery</code> 提供多个与 <code>AJAX</code> 有关的方法。</p><p>通过 <code>jQuery</code> <code>AJAX</code> 方法，可以使用 <code>HTTP Get</code> 和 <code>HTTP Post</code> 从远程服务器上请求<code>文本</code>、<code>HTML</code>、<code>XML</code> 或 <code>JSON</code> ，同时可以把这些外部数据直接载入网页的被选元素中。</p><h5 id="jQuery-load-方法"><a href="#jQuery-load-方法" class="headerlink" title="jQuery load() 方法"></a><code>jQuery</code> <code>load()</code> 方法</h5><blockquote><p><code>load()</code> 方法从服务器加载数据，并把返回的数据放入被选元素中。</p></blockquote><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).load(URL, data, callback);</span><br></pre></td></tr></table></figure><p><code>URL</code> 为必须参数，指定加载文件的路径。</p><p><code>data</code> 为可选参数，规定与请求一同发送的查询字符串键/值对集合。</p><p><code>callback</code> 回调函数，规定方法完成后执行的函数名称。</p><h5 id="jQuery-get-post"><a href="#jQuery-get-post" class="headerlink" title="jQuery get() / post()"></a><code>jQuery</code> <code>get()</code> / <code>post()</code></h5><p>两种在客户端和服务器端进行请求-响应的常用方法：</p><p><code>DET</code> 和 <code>POST</code></p><p><code>Get</code> 从指定的资源请求数据</p><p><code>Post</code> 向指定的资源提交要处理的数据</p><ul><li><code>$.get()</code> 方法</li></ul><blockquote><p><code>$.get()</code> 方法通过 <code>HTTP GET</code> 请求从服务器上请求数据。</p></blockquote><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>(URL, callback);</span><br></pre></td></tr></table></figure><ul><li><code>$.post()</code> 方法</li></ul><blockquote><p><code>$.post()</code> 方法通过 <code>HTTP POST</code> 请求向服务器提交数据。</p></blockquote><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(URL, data, callback);</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">    cache: <span class="literal">false</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    url: <span class="string">'xxx.xxx.com'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取成功后的处理函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="jQuery-JSONP"><a href="#jQuery-JSONP" class="headerlink" title="jQuery JSONP"></a><code>jQuery</code> <code>JSONP</code></h5><blockquote><p><code>Jsonp</code>(<code>JSON with Padding</code>) 是 <code>json</code> 的一种”使用模式”，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。</p></blockquote><p>要理解跨域，先要了解一下“同源策略”。所谓同源是指，域名，协议，端口相同。所谓“同源策略“，简单的说就是基于安全考虑，当前域不能访问其他域的东西。</p><p>同源策略，它是由 <code>Netscape</code> 提出的一个著名的安全策略，现在所有支持 <code>JavaScript</code> 的浏览器都会使用这个策略。</p><p><a href="https://blog.csdn.net/hansexploration/article/details/80314948" target="_blank" rel="noopener">参考实现</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Highcharts 数据可视化</title>
      <link href="2019/07/26/highcharts/highcharts/"/>
      <url>2019/07/26/highcharts/highcharts/</url>
      
        <content type="html"><![CDATA[<h4 id="Highcharts"><a href="#Highcharts" class="headerlink" title="Highcharts"></a>Highcharts</h4><hr><blockquote><p><code>Highcharts</code> 是一个用纯<code>JavaScript</code>编写的一个图表库， 能够很简单便捷的在<code>web</code>网站或是<code>web</code>应用程序添加有交互性的图表</p></blockquote><a id="more"></a><h5 id="获取Highcharts"><a href="#获取Highcharts" class="headerlink" title="获取Highcharts"></a>获取<code>Highcharts</code></h5><ul><li><code>CDN</code>获取<ul><li><code>https://code.highcharts.com.cn/index.html</code></li></ul></li><li>官网获取资源包<ul><li><code>https://www.highcharts.com.cn/download</code></li></ul></li><li><code>npm</code>、<code>bower</code>等第三方包管理工具下载<ul><li><code>npm</code>:<ul><li><code>https://www.highcharts.com.cn/docs/install-from-npm</code></li></ul></li><li><code>bower</code>:<ul><li><code>https://www.highcharts.com.cn/docs/install-from-bower</code></li></ul></li></ul></li></ul><h5 id="引入Highcharts"><a href="#引入Highcharts" class="headerlink" title="引入Highcharts"></a>引入<code>Highcharts</code></h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.highcharts.com.cn/highcharts/highcharts.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="创建一个简单的图表"><a href="#创建一个简单的图表" class="headerlink" title="创建一个简单的图表"></a>创建一个简单的图表</h5><ul><li>引入<code>CDN</code>的<code>JS</code>文件</li><li>初始化函数 <code>Highcharts.chart</code> 来创建图表<ul><li>该函数接受两个参数，第一个参数是 <code>DOM</code> 容器的 <code>Id</code>，第二个参数是<code>图表配置</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Highcharts_Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图表容器 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"width: 600px;height:400px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 highcharts.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.highcharts.com.cn/highcharts/highcharts.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 图表配置</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> options = &#123;</span></span><br><span class="line">            chart: &#123;</span><br><span class="line"><span class="actionscript">                type: <span class="string">'bar'</span>                          <span class="comment">//指定图表的类型，默认是折线图（line）</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            title: &#123;</span><br><span class="line"><span class="actionscript">                text: <span class="string">'Highcharts_Demo'</span>                 <span class="comment">// 标题</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            xAxis: &#123;</span><br><span class="line"><span class="actionscript">                categories: [<span class="string">'苹果'</span>, <span class="string">'香蕉'</span>, <span class="string">'橙子'</span>]   <span class="comment">// x 轴分类</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            yAxis: &#123;</span><br><span class="line">                title: &#123;</span><br><span class="line"><span class="actionscript">                    text: <span class="string">'吃水果个数'</span>                <span class="comment">// y 轴标题</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            series: [&#123;                              <span class="comment">// 数据列</span></span></span><br><span class="line"><span class="actionscript">                name: <span class="string">'Akashi'</span>,                        <span class="comment">// 数据列名</span></span></span><br><span class="line"><span class="actionscript">                data: [<span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>]                     <span class="comment">// 数据</span></span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'Asuka'</span>,</span></span><br><span class="line">                data: [5, 7, 3]</span><br><span class="line">            &#125;],</span><br><span class="line">            credits:&#123;</span><br><span class="line"><span class="actionscript">                enabled:<span class="literal">false</span>                       <span class="comment">// 去除右下角水印</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 图表初始化函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> chart = Highcharts.chart(<span class="string">'container'</span>, options);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="去除水印"><a href="#去除水印" class="headerlink" title="去除水印"></a>去除水印</h5><blockquote><p>去除右下角水印链接，只需要在<code>highcharts.js</code>中修改</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">credits:&#123;</span><br><span class="line">    enabled:<span class="literal">false</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5ddzbrb0cj215e0memxp.jpg" alt="效果"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> Charts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> charts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程 - 测试代码</title>
      <link href="2019/07/24/python_11_test/test/"/>
      <url>2019/07/24/python_11_test/test/</url>
      
        <content type="html"><![CDATA[<h4 id="十一、代码测试"><a href="#十一、代码测试" class="headerlink" title="十一、代码测试"></a>十一、代码测试</h4><h5 id="11-1-测试函数"><a href="#11-1-测试函数" class="headerlink" title="11.1 测试函数"></a>11.1 测试函数</h5><blockquote><p>学习测试之前，需要有测试的代码。下面编写一个简单的函数。</p></blockquote><a id="more"></a><p><code>name_function.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first, last)</span>:</span></span><br><span class="line">    full_name = first + <span class="string">" "</span> + last</span><br><span class="line">    <span class="keyword">return</span> full_name</span><br></pre></td></tr></table></figure><p><code>names.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Enter 'q' at any time to quit."</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first = input(<span class="string">"\nPlease give me a first name: "</span>)</span><br><span class="line">    <span class="keyword">if</span> first == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    last = input(<span class="string">"Please give me a last name: :"</span>)</span><br><span class="line">    <span class="keyword">if</span> last == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    formatted_name = get_formatted_name(first, last)</span><br><span class="line">    print(<span class="string">"Full name: "</span> + formatted_name)</span><br></pre></td></tr></table></figure><ul><li>单元测试和测试用例</li></ul><blockquote><p><code>Python</code>标准库中的模块<code>unittest</code>提供了代码测试工具。单元测试用于核实函数的某个方面没有问题；测试用例是一组单元测试，这些单元测试一起核实函数在各种情况z下的行为都符合要求。</p></blockquote><ul><li>可通过的测试</li></ul><blockquote><p>创建测试用例的语法需要一段时间才能习惯，但测试用例创建以后，再添加针对函数的单元测试就很简单了。</p></blockquote><p>为函数编写测试用例，可先导入模块<code>unittest</code>以及要测试的函数，再创建一个继承 <code>unittest.TestCase</code>的类，并编写一系列方法对函数行为的不同方面进行测试。</p><p><code>test_name_function.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamesTestCase</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="string">""" 测试name_function.py """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_name_function</span><span class="params">(self)</span>:</span></span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">'akashi'</span>, <span class="string">'sai'</span>)</span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">'akashi sai'</span>)</span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure><p>运行：</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5aog9loarj20r803ojrf.jpg" alt="test"></p><p>首先，导入了<code>unittest</code>模块和测试函数；创建一个NameTestCase的类，可以随便命名，需要继承<code>unittest.TestCase</code>；编写函数测试，注意，在测试函数中，所有<code>test_</code>打头的方法都会自动运行。</p><p>之后使用了一个断言方法，<code>unittest</code>类的功能之一。断言方法用来核实得到的结果是否与期望的结果一致。</p><ul><li>不能通过的测试</li></ul><p>修改函数，让其可以出来中间名。先故意不做判断让其一般情况不能通过，查看结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first, middle, last)</span>:</span></span><br><span class="line">    full_name = first + <span class="string">" "</span> + middle + <span class="string">" "</span> + last</span><br><span class="line">    <span class="keyword">return</span> full_name</span><br></pre></td></tr></table></figure><p>传入的值不变，查看输出：</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5aoujn0g3j20r80awmzj.jpg" alt="error"></p><p>其中，<code>E</code>指出测试用例中有一个单元测试导致了错误。</p><ul><li>测试未通过时怎么办</li></ul><blockquote><p>测试未通过，意味着编写的代码有错，因此需要修改导致测试不能通过的代码，而不是修改测试。</p></blockquote><p><code>name_function.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first, last, middle = <span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> middle:</span><br><span class="line">        full_name = first + <span class="string">" "</span> + middle + <span class="string">" "</span> + last</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        full_name = first + <span class="string">" "</span> + last</span><br><span class="line">    <span class="keyword">return</span> full_name</span><br></pre></td></tr></table></figure><p>这样，根据不同的情况，有中间名和没有，函数都可以进行处理了，测试就自然可以通过了。</p><ul><li>添加新测试</li></ul><p>再添加一个测试，用来测试包含中间名的。这时就会发现继续添加函数测试就十分简单和方便了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamesTestCase</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="string">""" 测试name_function.py """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_name_function</span><span class="params">(self)</span>:</span></span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">'akashi'</span>, <span class="string">'sai'</span>)</span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">'akashi sai'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_middle_name_function</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 测试包含中间名的姓名 """</span></span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">'portgas'</span>, <span class="string">'ace'</span>, <span class="string">'D'</span>)</span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">'portgas D ace'</span>)</span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g5api5vfflj20r804odg8.jpg" alt="test"></p><h5 id="11-2-测试类"><a href="#11-2-测试类" class="headerlink" title="11.2 测试类"></a>11.2 测试类</h5><ul><li>各种断言方法</li></ul><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td><code>assertEqual(a, b)</code></td><td>核实 <code>a == b</code></td></tr><tr><td><code>assertNotEqual(a, b)</code></td><td>核实 <code>a != b</code></td></tr><tr><td><code>assertTrue(x)</code></td><td>核实 <code>x</code> 为 <code>True</code></td></tr><tr><td><code>assertFalse(x)</code></td><td>核实<code>x</code>为<code>False</code></td></tr><tr><td><code>assertIn(item, list)</code></td><td>核实<code>item</code>在<code>lisst</code>中</td></tr><tr><td><code>assertNotIn(item, list)</code></td><td>核实<code>item</code>不在<code>list</code>中</td></tr></tbody></table><ul><li>一个要测试的类</li></ul><p><code>sruvey.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousSurvey</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, question)</span>:</span></span><br><span class="line">        self.question = question</span><br><span class="line">        self.responses = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_question</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.question)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_response</span><span class="params">(self, new_response)</span>:</span></span><br><span class="line">        self.responses.append(new_response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_results</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Survey results: "</span>)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            print(<span class="string">"- "</span> + response)</span><br></pre></td></tr></table></figure><p>编写简单的使用程序</p><p><code>language_survey.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个问题，并创建一个表示调查的AnonymousSurvey对象</span></span><br><span class="line">question = <span class="string">"What language did you first learn to speak?"</span></span><br><span class="line">my_survey = AnonymousSurvey(question)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示问题并存储答案</span></span><br><span class="line">my_survey.show_question()</span><br><span class="line">print(<span class="string">"Enter 'q' at any time to quit.\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    response = input(<span class="string">"Language: "</span>)</span><br><span class="line">    <span class="keyword">if</span> response == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    my_survey.store_response(response)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示调查结果</span></span><br><span class="line">print(<span class="string">"\nThank you to everyone who participated in the survey!"</span>)</span><br><span class="line">my_survey.show_results()</span><br></pre></td></tr></table></figure><ul><li>测试<code>AnonymousSurvey</code>类</li></ul><p><code>test_survey.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousSurvey</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span><span class="params">(self)</span>:</span></span><br><span class="line">        question = <span class="string">"What language did you first learn to speak?"</span></span><br><span class="line">        my_survey = AnonymousSurvey(question)</span><br><span class="line">        my_survey.store_response(<span class="string">'English'</span>)</span><br><span class="line"></span><br><span class="line">        self.assertIn(<span class="string">'English'</span>, my_survey.responses)</span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure><p>当用户提供三个答案时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousSurvey</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span><span class="params">(self)</span>:</span></span><br><span class="line">        question = <span class="string">"What language did you first learn to speak?"</span></span><br><span class="line">        my_survey = AnonymousSurvey(question)</span><br><span class="line">        my_survey.store_response(<span class="string">'English'</span>)</span><br><span class="line"></span><br><span class="line">        self.assertIn(<span class="string">'English'</span>, my_survey.responses)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_three_response</span><span class="params">(self)</span>:</span></span><br><span class="line">        question = <span class="string">"What language did you first learn to speak?"</span></span><br><span class="line">        my_survey = AnonymousSurvey(question)</span><br><span class="line">        responses = [<span class="string">'English'</span>, <span class="string">'Spanish'</span>, <span class="string">'Mandarin'</span>]</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> responses:</span><br><span class="line">            my_survey.store_response(response)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> responses:</span><br><span class="line">            self.assertIn(response, my_survey.responses)</span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure><p>当然，我们还可以继续提高效率。</p><ul><li>方法<code>setUp()</code></li></ul><blockquote><p><code>unittest.TestCase</code>类包含方法<code>setUp()</code>，让我们只需创建这些对象一次，并在每个测试方法中使用它们。如果在<code>TestCast</code>类中包含了方法 <code>setUp()</code>，<code>Python</code>会先运行它，然后再运行各个以<code>test_</code>打头的方法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousSurvey</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        question = <span class="string">"What language did you first learn to speak?"</span></span><br><span class="line">        self.my_survey = AnonymousSurvey(question)</span><br><span class="line">        self.responses = [<span class="string">'English'</span>, <span class="string">'Spanish'</span>, <span class="string">'Mandarin'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.my_survey.store_response(self.responses[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        self.assertIn(self.responses[<span class="number">0</span>], self.my_survey.responses)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_three_response</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.my_survey.store_response(response)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.assertIn(response, self.my_survey.responses)</span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure><p>注意：运行测试用例时，每完成一个单元测试，<code>Python</code>都打印一个字符：通过测试时打印一个句点(<code>.</code>)；测试引发错误时打印一个<code>E</code>；测试导致断言失败打印一个<code>F</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery DOM 操作（上）</title>
      <link href="2019/07/23/basic-jquery-dom-1/JQuery_DOM/"/>
      <url>2019/07/23/basic-jquery-dom-1/JQuery_DOM/</url>
      
        <content type="html"><![CDATA[<h4 id="JQuery-DOM-操作（上）"><a href="#JQuery-DOM-操作（上）" class="headerlink" title="JQuery DOM 操作（上）"></a>JQuery DOM 操作（上）</h4><h5 id="什么是JQuery"><a href="#什么是JQuery" class="headerlink" title="什么是JQuery"></a>什么是<code>JQuery</code></h5><blockquote><p><code>jQuery</code>是一个轻量级的<code>JavaScript</code>库，它极大地简化了<code>JavaScript</code>编程。</p></blockquote><a id="more"></a><p><code>jQuery</code>包含以下功能：</p><ul><li><code>HTML</code>元素选取</li><li><code>HTML</code>元素操作</li><li><code>CSS</code>操作</li><li><code>HTML</code>事件函数</li><li><code>JavaScript</code>特效和动画</li><li><code>HTML</code> <code>DOM</code>遍历和修改</li><li><code>AJAX</code></li><li><code>Utilities</code></li></ul><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ul><li><p>官网下载导入</p><ul><li><code>https://jquery.com/download/</code></li></ul></li><li><p><code>CDN</code> 载入<code>jQuery</code></p><ul><li><code>https://www.bootcdn.cn/jquery/</code></li></ul></li></ul><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><blockquote><p><code>jQuery</code> 语法是通过选取 <code>HTML</code> 元素，并对选取的元素执行某些操作。</p></blockquote><p>基础语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).action()</span><br></pre></td></tr></table></figure><p>通过美元符号(<code>$</code>)定义<code>jQuery</code>。</p><ul><li>文档就绪事件</li></ul><blockquote><p>为了防止文档在完全加载（就绪）之前运行 <code>jQuery</code> 代码，即在 <code>DOM</code> 加载完成后才可以对 <code>DOM</code> 进行操作。如果在文档没有完全加载之前就运行函数，操作可能失败。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>简洁写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h5><blockquote><p><code>jQuery</code>选择器可以快速选择<code>HTML</code>元素进行操作。</p></blockquote><ul><li><p>元素选择器</p><ul><li>基于元素名选取元素</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"p"</span>).hide();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><code>id</code>(<code>#</code>)选择器</p><ul><li>基于<code>id</code>选取元素</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"#test"</span>).hide();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><code>class</code>(<code>.</code>)选择器</p><ul><li>基于<code>class</code>选取元素</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">".test"</span>).hide();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><blockquote><p>事件，即页面对访问者的响应。</p></blockquote><p>常见<code>DOM</code>事件</p><table><thead><tr><th>鼠标事件</th><th>键盘事件</th><th>表单事件</th><th>文档/窗口事件</th></tr></thead><tbody><tr><td>click</td><td>keypress</td><td>submit</td><td>load</td></tr><tr><td>dblclick</td><td>keydown</td><td>change</td><td>resize</td></tr><tr><td>mouseenter</td><td>keyup</td><td>focus</td><td>scroll</td></tr><tr><td>mouseleave</td><td></td><td>blur</td><td>unload</td></tr><tr><td>hover</td><td></td></tr></tbody></table><ul><li>事件方法</li></ul><p>点击事件<code>click()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>双击事件<code>dblclick()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).dblclick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>鼠标进入<code>mouseenter()</code></p><p>鼠标离开<code>mouseleave()</code></p><p>按下鼠标<code>mousedown()</code></p><p>松开鼠标<code>mouseup()</code></p><p>光标悬停<code>hover()</code></p><p>元素获得焦点<code>focus()</code></p><p>元素失去焦点<code>blur()</code></p><blockquote><p>使用方式大体相同，具体实现效果根据需求使用。</p></blockquote><h4 id="jQuery效果"><a href="#jQuery效果" class="headerlink" title="jQuery效果"></a><code>jQuery</code>效果</h4><h5 id="显示-隐藏"><a href="#显示-隐藏" class="headerlink" title="显示/隐藏"></a>显示/隐藏</h5><blockquote><p>通过 <code>jQuery</code>，可以使用 <code>hide()</code> 和 <code>show()</code> 方法来隐藏和显示 <code>HTML</code> 元素。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Show and Hide&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="https:/</span><span class="regexp">/cdn.bootcss.com/</span>jquery/<span class="number">3.4</span><span class="number">.1</span>/jquery.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;这里是显示/隐藏的文字。&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;button id="</span>show<span class="string">"&gt;显示&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;button id="</span>hide<span class="string">"&gt;隐藏&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    $(function() &#123;</span></span><br><span class="line"><span class="string">        // 隐藏</span></span><br><span class="line">        $("#hide").click(function() &#123;</span><br><span class="line">            $(<span class="string">"p"</span>).hide();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 显示</span></span><br><span class="line">        $(<span class="string">"#show"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"p"</span>).show();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(selector).hide(speed,callback);</span><br><span class="line"></span><br><span class="line">$(selector).show(speed,callback);</span><br></pre></td></tr></table></figure><p>可选的 <code>speed</code> 参数规定隐藏/显示的速度，可以取以下值：<code>&quot;slow&quot;</code>、<code>&quot;fast&quot;</code> 或毫秒。</p><p>可选的 <code>callback</code> 参数是隐藏或显示完成后所执行的函数名称。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Show &amp;&amp; Hide<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是显示/隐藏的文字。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Hide<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"p"</span>).hide(<span class="number">1000</span>, alertHandle);</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">alertHandle</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"文字被隐藏！"</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>通过 <code>jQuery</code>，还可以使用 <code>toggle()</code> 方法来切换 <code>hide()</code> 和 <code>show()</code> 方法。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Show &amp;&amp; Hide<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是显示/隐藏的文字。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Show/Hide<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"p"</span>).toggle(<span class="number">1000</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h5><ul><li><code>fadeIn()</code></li></ul><blockquote><p><code>jQuery</code> <code>fadeIn()</code> 用于淡入已隐藏的元素。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Fade<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            display: none;</span><br><span class="line">            margin: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#red</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#orange</span> &#123;</span></span><br><span class="line">            background-color: orange;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#yellow</span> &#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Control<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"orange"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"yellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#red"</span>).fadeIn();</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#orange"</span>).fadeIn(<span class="string">"slow"</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#yellow"</span>).fadeIn(<span class="number">1200</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).fadeIn(speed,callback);</span><br></pre></td></tr></table></figure><ul><li><code>fadeOut()</code></li></ul><blockquote><p><code>jQuery</code> <code>fadeOut()</code> 方法用于淡出可见元素。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Fade<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            margin: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#red</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#orange</span> &#123;</span></span><br><span class="line">            background-color: orange;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#yellow</span> &#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Control<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"orange"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"yellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#red"</span>).fadeOut();</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#orange"</span>).fadeOut(<span class="string">"slow"</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#yellow"</span>).fadeOut(<span class="number">1200</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).fadeOut(speed,callback);</span><br></pre></td></tr></table></figure><ul><li><code>fadeToggle()</code></li></ul><blockquote><p><code>jQuery</code> <code>fadeToggle()</code> 方法可以在 <code>fadeIn()</code> 与 <code>fadeOut()</code> 方法之间进行切换。</p></blockquote><p>如果元素已淡出，则 <code>fadeToggle()</code> 会向元素添加淡入效果。</p><p>如果元素已淡入，则 <code>fadeToggle()</code> 会向元素添加淡出效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Fade<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            margin: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#red</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#orange</span> &#123;</span></span><br><span class="line">            background-color: orange;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#yellow</span> &#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Control<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"orange"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"yellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#red"</span>).fadeToggle();</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#orange"</span>).fadeToggle(<span class="string">"slow"</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#yellow"</span>).fadeToggle(<span class="number">1200</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).fadeToggle(speed,callback);</span><br></pre></td></tr></table></figure><ul><li><code>fadeTo()</code></li></ul><blockquote><p><code>jQuery</code> <code>fadeTo()</code> 方法允许渐变为给定的不透明度（值介于 <code>0</code> 与 <code>1</code> 之间）。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Fade<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            margin: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#red</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#orange</span> &#123;</span></span><br><span class="line">            background-color: orange;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#yellow</span> &#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Control<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"orange"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"yellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#red"</span>).fadeTo(<span class="string">"slow"</span>, <span class="number">0.15</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#orange"</span>).fadeTo(<span class="string">"slow"</span>, <span class="number">0.4</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#yellow"</span>).fadeTo(<span class="string">"slow"</span>, <span class="number">0.6</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).fadeTo(speed,opacity,callback);</span><br></pre></td></tr></table></figure><h5 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h5><ul><li><code>slideDown()</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Slid Down<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#flip</span>, <span class="selector-id">#panel</span> &#123;</span></span><br><span class="line">            padding: 5px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: aquamarine;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#panel</span> &#123;</span></span><br><span class="line">            padding: 30px;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"flip"</span>&gt;</span>点击下拉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"panel"</span>&gt;</span>这里是隐藏的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#flip"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#panel"</span>).slideDown(<span class="string">"slow"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).slideDown(speed,callback);</span><br></pre></td></tr></table></figure><ul><li><code>slideUp()</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Slid Down<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#flip</span>, <span class="selector-id">#panel</span> &#123;</span></span><br><span class="line">            padding: 5px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: aquamarine;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#panel</span> &#123;</span></span><br><span class="line">            padding: 30px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"flip"</span>&gt;</span>点击上滑<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"panel"</span>&gt;</span>这里是隐藏的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#flip"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#panel"</span>).slideUp(<span class="string">"slow"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).slideUp(speed,callback);</span><br></pre></td></tr></table></figure><ul><li><code>slideToggle()</code></li></ul><blockquote><p><code>jQuery</code> <code>slideToggle()</code> 方法可以在 <code>slideDown()</code> 与 <code>slideUp()</code> 方法之间进行切换。</p></blockquote><p>如果元素向下滑动，则 slideToggle() 可向上滑动它们。</p><p>如果元素向上滑动，则 slideToggle() 可向下滑动它们。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Slid Down<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#flip</span>, <span class="selector-id">#panel</span> &#123;</span></span><br><span class="line">            padding: 5px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: aquamarine;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#panel</span> &#123;</span></span><br><span class="line">            padding: 30px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"flip"</span>&gt;</span>点击下拉/上滑<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"panel"</span>&gt;</span>这里是隐藏的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#flip"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#panel"</span>).slideToggle(<span class="string">"slow"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).slideToggle(speed,callback);</span><br></pre></td></tr></table></figure><h5 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h5><ul><li><code>animate()</code></li></ul><blockquote><p><code>jQuery</code> <code>animate()</code> 方法用于创建自定义动画。默认情况下，所有的 <code>HTML</code> 元素有一个静态的位置，且是不可移动的。 如果需要改变为，我们需要将元素的 <code>position</code> 属性设置为 <code>relative</code>, <code>fixed</code>, 或 <code>absolute</code>!</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).animate(&#123;<span class="attr">left</span>:<span class="string">'250px'</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>操作多个属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">        left:<span class="string">'250px'</span>,</span><br><span class="line">        opacity:<span class="string">'0.5'</span>,</span><br><span class="line">        height:<span class="string">'150px'</span>,</span><br><span class="line">        width:<span class="string">'150px'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>使用相对值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">        left:<span class="string">'250px'</span>,</span><br><span class="line">        height:<span class="string">'+=150px'</span>,</span><br><span class="line">        width:<span class="string">'+=150px'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>使用队列功能</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Animate<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            margin: 30px;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>开始动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dom = $(<span class="string">"#container"</span>);</span></span><br><span class="line">            dom.animate(&#123;</span><br><span class="line"><span class="actionscript">                height: <span class="string">'300px'</span>,</span></span><br><span class="line"><span class="actionscript">                opacity: <span class="string">'0.4'</span>,</span></span><br><span class="line"><span class="actionscript">            &#125;, <span class="string">"slow"</span>);</span></span><br><span class="line">            dom.animate(&#123;</span><br><span class="line"><span class="actionscript">                width: <span class="string">'300px'</span>,</span></span><br><span class="line"><span class="actionscript">                opacity: <span class="string">'0.7'</span>,</span></span><br><span class="line"><span class="actionscript">            &#125;, <span class="string">"slow"</span>);</span></span><br><span class="line">            dom.animate(&#123;</span><br><span class="line"><span class="actionscript">                height: <span class="string">'100px'</span>,</span></span><br><span class="line"><span class="actionscript">                opacity: <span class="string">'0.4'</span>,</span></span><br><span class="line"><span class="actionscript">            &#125;, <span class="string">"slow"</span>);</span></span><br><span class="line">            dom.animate(&#123;</span><br><span class="line"><span class="actionscript">                width: <span class="string">'100px'</span>,</span></span><br><span class="line"><span class="actionscript">                opacity: <span class="string">'0.7'</span>,</span></span><br><span class="line"><span class="actionscript">            &#125;, <span class="string">"slow"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).animate(&#123;params&#125;,speed,callback);</span><br></pre></td></tr></table></figure><h5 id="停止动画"><a href="#停止动画" class="headerlink" title="停止动画"></a>停止动画</h5><ul><li><code>stop()</code></li></ul><blockquote><p><code>jQuery</code> <code>stop()</code> 方法用于停止动画或效果，在它们完成之前。<code>stop()</code> 方法适用于所有 <code>jQuery</code> 效果函数，包括滑动、淡入淡出和自定义动画。</p></blockquote><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).stop(stopAll,goToEnd);</span><br></pre></td></tr></table></figure><p>可选的 <code>stopAll</code> 参数规定是否应该清除动画队列。默认是 <code>false</code>，即仅停止活动的动画，允许任何排入队列的动画向后执行。</p><p>可选的 <code>goToEnd</code> 参数规定是否立即完成当前动画。默认是 <code>false</code>。</p><p>因此，默认地，<code>stop()</code> 会清除在被选元素上指定的当前动画。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Slid Down<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#flip</span>, <span class="selector-id">#panel</span> &#123;</span></span><br><span class="line">            padding: 5px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: aquamarine;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#panel</span> &#123;</span></span><br><span class="line">            padding: 30px;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击停止<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"flip"</span>&gt;</span>点击下拉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"panel"</span>&gt;</span>这里是隐藏的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#flip"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#panel"</span>).slideDown(<span class="number">3000</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#panel"</span>).stop();</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Callback"><a href="#Callback" class="headerlink" title="Callback"></a><code>Callback</code></h5><blockquote><p><code>Callback</code> 函数在当前效果（动画） 100% 完成之后执行。回调函数在以上效果中作为可选参数，如果选择传入，则会在效果完成后触发函数。</p></blockquote><h5 id="链"><a href="#链" class="headerlink" title="链"></a>链</h5><blockquote><p><code>jQuery</code>允许把动作/方法链接在一起。这种链式操作是<code>JS</code>的一种特性。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#p1"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>).slideUp(<span class="number">2000</span>).slideDown(<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程 - 文件和异常</title>
      <link href="2019/07/23/python_10_file/file/"/>
      <url>2019/07/23/python_10_file/file/</url>
      
        <content type="html"><![CDATA[<h4 id="十、文件和异常"><a href="#十、文件和异常" class="headerlink" title="十、文件和异常"></a>十、文件和异常</h4><h5 id="10-1-从文件中读取数据"><a href="#10-1-从文件中读取数据" class="headerlink" title="10.1 从文件中读取数据"></a>10.1 从文件中读取数据</h5><ul><li>读取整个文件</li></ul><a id="more"></a><p>首先要创建一个文本文件(<code>pi_digits.txt</code>)，用于存储圆周率<code>PI</code>小数点后30位</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g58ebuy544j20zk044dg5.jpg" alt="PI"></p><p>读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi_digits.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g58eca0be8j20r80320t5.jpg" alt="读取"></p><ul><li><p>读取流程</p><ul><li><p><code>open()</code>函数</p><ul><li>打开文件</li><li>它接收一个参数：要打开文件的名称</li><li>返回一个表示文件的对象</li></ul></li><li><p>关键字<code>with</code></p><ul><li>不再需要访问文件后将其关闭，<code>Python</code>会在合适的时候自动将其关闭</li></ul></li><li><p><code>read()</code>方法</p><ul><li>读取文件的全部内容，并存储为字符串</li></ul></li></ul></li></ul><p>注意：可以使用<code>rstrip()</code>删除字符串末尾空白字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi_digits.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents.rstrip())</span><br></pre></td></tr></table></figure><ul><li><p>文件路径</p><ul><li><p>相对文件路径<br>在<code>Linux</code>和<code>OS X</code>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.text'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure><p>在<code>Windows</code>中，在文件路径中使用的是反斜杠(<code>\</code>)而不是斜杆(<code>/</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files\filename.text'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></li><li><p>绝对文件路径<br>在<code>Linux</code>和<code>OS X</code>中类似于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'/home/ehmatthes/other_files/text_files/filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure><p>在<code>Windows</code>中，在文件路径中使用的是反斜杠(<code>\</code>)而不是斜杆(<code>/</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'C:\Users\ehmatthes\other_files\text_files\finename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></li></ul></li><li><p>逐行读取</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename= <span class="string">'pi_digits.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure><p>去掉多余空行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename= <span class="string">'pi_digits.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure><ul><li>创建一个包含文件各行内容的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filename= <span class="string">'pi_digits.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure><p>方法<code>readlines()</code>从文件读取每一行，并将其存储在一个列表中。</p><ul><li>使用文件内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">filename= <span class="string">'pi_digits.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line"></span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure><p>注意：<code>strip()</code>删除字符串两端的空格；读取文本文件时，文件被解析成字符串，如果是数字并且需要作为数值使用，就必须使用函数<code>int()</code>将其转换为整数，或者使用<code>float()</code>将其转换为浮点数。</p><h5 id="10-2-写入文件"><a href="#10-2-写入文件" class="headerlink" title="10.2 写入文件"></a>10.2 写入文件</h5><ul><li>写入空文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_object:</span><br><span class="line">    f_object.write(<span class="string">"akashi"</span>)</span><br></pre></td></tr></table></figure><p><code>open()</code>传入的第二个实参：</p><pre><code>- `r`读取模式    - 只读模式，默认为只读模式打开文件- `w`写入模式    - 如果指定文件已存在，返回的文件会覆盖之前的文件内容- `a`附加模式    - 不会在返回文件对象时覆盖原来文件内容- `r+`读取和写入文件</code></pre><p>注意：<code>Python</code>只能将字符串写入文件，要将数值数据存储到文本文件中，必须先使用函数<code>str()</code>将其转换为字符串格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_object:</span><br><span class="line">    f_object.write(<span class="string">"21"</span>)</span><br></pre></td></tr></table></figure><p><code>or</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_object:</span><br><span class="line">    f_object.write(str(<span class="number">21</span>))</span><br></pre></td></tr></table></figure><ul><li>写入多行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_object:</span><br><span class="line">    f_object.write(<span class="string">"akashi\n"</span>)</span><br><span class="line">    f_object.write(<span class="string">"asuka\n"</span>)</span><br></pre></td></tr></table></figure><ul><li>附加到文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'a'</span>) <span class="keyword">as</span> f_object:</span><br><span class="line">    <span class="comment"># f_object.write("akashi\n")</span></span><br><span class="line">    <span class="comment"># f_object.write("asuka\n")</span></span><br><span class="line">    f_object.write(<span class="string">"gakki\n"</span>)</span><br></pre></td></tr></table></figure><p>你会发现之前存储的两个字符串依然存在，没有被覆盖。</p><h5 id="10-3-异常"><a href="#10-3-异常" class="headerlink" title="10.3 异常"></a>10.3 异常</h5><ul><li>处理<code>ZeroDivisionError</code>异常</li></ul><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g58n3xmi6hj20r80340t7.jpg" alt="zero"></p><ul><li>使用<code>try-except</code>代码块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br></pre></td></tr></table></figure><ul><li>使用异常避免奔溃</li></ul><blockquote><p>发生错误时，如果程序还有工作没有完成，妥善处理错误就尤其重要。</p></blockquote><p>异常处理可以让程序接着运行，用户看到的是一条友好的错误消息，程序也不至于奔溃。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Give me two numbers, and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"\nEnter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst nmuber: "</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"Second number: "</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number) / int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"You can't divide by zero!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure><ul><li><p>处理<code>FileNotFoundError</code>异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'asuka.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">   contents = f_obj.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">   msg = <span class="string">"Sorry, the file "</span> + filename + <span class="string">" does not exist."</span></span><br><span class="line">   print(msg)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>分析文本</p><ul><li>使用<code>split()</code>方法分割字符串，默认以空格拆分，也可以传入参数进行拆分</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        contents = f_obj.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    msg = <span class="string">"Sorry, the file "</span> + filename + <span class="string">" does not exist."</span></span><br><span class="line">    print(msg)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    words = contents.split()</span><br><span class="line">    num_words = len(words)</span><br><span class="line">    print(<span class="string">"The file "</span> + filename + <span class="string">" has about "</span> + str(num_words) + <span class="string">" words."</span>)</span><br></pre></td></tr></table></figure><ul><li><p>决定报告哪些错误</p><blockquote><p>并非每次捕获错误都需要告诉用户。使用<code>pass</code>语句可以像没发生过一样让代码继续运行。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">try</span>:</span><br><span class="line">    --snip--</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    --snip--</span><br></pre></td></tr></table></figure></li></ul><h5 id="10-4-存储数据"><a href="#10-4-存储数据" class="headerlink" title="10.4 存储数据"></a>10.4 存储数据</h5><ul><li><p>使用<code>json.dump()</code>和<code>json.load()</code></p><p>存储：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">number = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'number.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">   json.dump(number, f_obj)</span><br></pre></td></tr></table></figure></li></ul><p>函数<code>json.dump()</code>接收两个实参，要存储的数据以及可用于存储数据的文件对象。</p><p>读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'number.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line"></span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure><ul><li><p>保存和读取用户生成的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果之前存储了用户名，就加载它</span></span><br><span class="line"><span class="comment"># 否则，就提示输入并存储它</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'username.json'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What is your name? "</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username, f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">" !"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Welcome back "</span> + username.title() + <span class="string">" !"</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li>重构</li></ul><blockquote><p>将代码划分成一系列完成具体工作的函数，这样的过程被称为重构。重构让代码更清晰，更易于理解，更容易扩展。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" 问候用户，并指明名字 """</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back "</span> + username.title() + <span class="string">" !"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">" !"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" 如果存取了用户名，就获取它 """</span></span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" 未存储用户名，提示用户输入用户名，并存储 """</span></span><br><span class="line">    username = input(<span class="string">"What is your name? "</span>)</span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username, f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程 - 类</title>
      <link href="2019/07/22/python_9_class/class/"/>
      <url>2019/07/22/python_9_class/class/</url>
      
        <content type="html"><![CDATA[<h4 id="九、类"><a href="#九、类" class="headerlink" title="九、类"></a>九、类</h4><h5 id="9-1-创建和使用类"><a href="#9-1-创建和使用类" class="headerlink" title="9.1 创建和使用类"></a>9.1 创建和使用类</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        <span class="string">""" 初始化属性name和age """</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 模拟蹲下 """</span></span><br><span class="line">        print(self.name.title() + <span class="string">" is now sitting."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 模拟打滚 """</span></span><br><span class="line">        print(self.name.title() + <span class="string">" rolled over!"</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>方法<code>__init__()</code></li></ul><p>类中的函数被称为方法，<code>__init__()</code>是一个特殊的方法，每当根据类创建新的实例时，<code>Python</code>就会自动运行它。为了区别，放过名称开头和末尾各有两个下划线，方法的形参<code>self</code>必不可少！！！还必须位于其他形参的前面。它是指向实例本身的一个引用，让实例能够访问类中的属性和方法。<code>self</code>不用传递实参，由程序自动传入。</p><ul><li>创建实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_dog = Dog(<span class="string">"kii"</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">print(my_dog.name.title())</span><br><span class="line">print(my_dog.age)</span><br></pre></td></tr></table></figure><ul><li><p>访问属性</p><ul><li>通过点(<code>.</code>)访问</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.attribute</span><br></pre></td></tr></table></figure><ul><li>调用方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.function_name()</span><br></pre></td></tr></table></figure><ul><li>创建多个实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_dog = Dog(<span class="string">"kii"</span>, <span class="number">6</span>)</span><br><span class="line">your_dog = Dog(<span class="string">"chip"</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h5 id="9-2-使用类和实例"><a href="#9-2-使用类和实例" class="headerlink" title="9.2 使用类和实例"></a>9.2 使用类和实例</h5><blockquote><p>类可以用来模拟现实世界中的很多场景，创建好类以后，大部分的时间都使用根据类创建的实例上。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">""" 初始化汽车属性 """</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 返回汽车信息 """</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>, <span class="string">'a4'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br></pre></td></tr></table></figure><ul><li>给属性指定默认值</li></ul><blockquote><p>类中的每个属性都必须有初始值，哪怕这个值是<code>0</code>或者空字符串。可以在<code>__init__()</code>中指定属性的初始值，这样就无需它初始值的形参。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">""" 初始化汽车属性 """</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 返回汽车信息 """</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 打印汽车里程 """</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>, <span class="string">'a4'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure><ul><li><p>修改属性的值</p><ul><li><p>直接修改属性的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure></li><li><p>通过方法修改属性的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">""" 初始化汽车属性 """</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 返回汽车信息 """</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 打印汽车里程 """</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self, mileage)</span>:</span></span><br><span class="line">        <span class="string">""" 更新汽车里程 """</span></span><br><span class="line">        self.odometer_reading = mileage</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>, <span class="string">'a4'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_new_car.update_odometer(<span class="number">230</span>)</span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>- 通过方法对属性的值进行递增<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">""" 初始化汽车属性 """</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 返回汽车信息 """</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 打印汽车里程 """</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self, mileage)</span>:</span></span><br><span class="line">        <span class="string">""" 更新汽车里程 """</span></span><br><span class="line">        self.odometer_reading = mileage</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span><span class="params">(self, miles)</span>:</span></span><br><span class="line">        <span class="string">""" 更新汽车里程特定的量 """</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>, <span class="string">'a4'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_new_car.update_odometer(<span class="number">230</span>)</span><br><span class="line">my_new_car.increment_odometer(<span class="number">100</span>)</span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure></code></pre><h5 id="9-3-继承"><a href="#9-3-继承" class="headerlink" title="9.3 继承"></a>9.3 继承</h5><blockquote><p>类的编写并非都要从空白开始，可以使用继承。一个类继承另一个类时，它将自动获得另一个类的所有属性和方法；原有的类称为父类，而新的类称为子类。子类继承了其父类的所有属性和方法，同时还可以定义自己的属性和方法。</p></blockquote><ul><li>子类方法<code>__init__()</code></li></ul><blockquote><p>创建子类的实例时，首先是给父类的所有属性赋值。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">""" 初始化汽车属性 """</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 返回汽车信息 """</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 打印汽车里程 """</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self, mileage)</span>:</span></span><br><span class="line">        <span class="string">""" 更新汽车里程 """</span></span><br><span class="line">        self.odometer_reading = mileage</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span><span class="params">(self, miles)</span>:</span></span><br><span class="line">        <span class="string">""" 更新汽车里程特定的量 """</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="string">""" 电动车 """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">""" 初始化父类属性 """</span></span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model s'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure><p><code>super()</code>是一个特殊函数，将父类和子类关联起来。父类也称为超类(<code>superclass</code>)。</p><ul><li>给子类定义属性和方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="string">""" 电动车 """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">""" 初始化父类属性 """</span></span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line">        self.battery_size = <span class="number">70</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 电池容量 """</span></span><br><span class="line">        print(<span class="string">"This car has a "</span> + str(self.battery_size) + <span class="string">"-kWh battery."</span>)</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model s'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.describe_battery()</span><br></pre></td></tr></table></figure><ul><li>重写父类的方法</li></ul><blockquote><p>在子类里面定义一个和父类同名的方法，可以对父类方法进行重写。这样，<code>Python</code>将不会考虑父类的这个方法，而只关注在子类中定义的相应的方法。</p></blockquote><ul><li>将实例作用属性</li></ul><blockquote><p>类的代码过多（属性和方法），可以抽出类的部分，作为一个独立的类提取出来，进行细化拆分。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="string">""" 电动车 """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">""" 初始化父类属性 """</span></span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line">        self.battery = Battery()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, battery_size = <span class="number">70</span>)</span>:</span></span><br><span class="line">        self.battery_size = battery_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 电池容量 """</span></span><br><span class="line">        print(<span class="string">"This car has a "</span> + str(self.battery_size) + <span class="string">"-kWh battery."</span>)</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model s'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.battery.describe_battery()</span><br></pre></td></tr></table></figure><h5 id="9-4-导入类"><a href="#9-4-导入类" class="headerlink" title="9.4 导入类"></a>9.4 导入类</h5><ul><li>导入单个类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car</span><br></pre></td></tr></table></figure><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> class_name</span><br></pre></td></tr></table></figure><ul><li>从一个模块中导入多个类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> class_name1, class_name2</span><br></pre></td></tr></table></figure><ul><li>导入整个模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module_name</span><br></pre></td></tr></table></figure><p>注意：在导入整个模块后，使用必须通过模块访问。例如：<code>module_name.class_name</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> car</span><br><span class="line"></span><br><span class="line">my_car = car.Car(<span class="string">'audi'</span>, <span class="string">'a4'</span>, <span class="number">2016</span>)</span><br></pre></td></tr></table></figure><ul><li>导入模块中的所有类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程 - 函数</title>
      <link href="2019/07/21/python_8_function/function/"/>
      <url>2019/07/21/python_8_function/function/</url>
      
        <content type="html"><![CDATA[<h4 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h4><h5 id="8-1-定义函数"><a href="#8-1-定义函数" class="headerlink" title="8.1 定义函数"></a>8.1 定义函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" 显示问候 """</span></span><br><span class="line">    print(<span class="string">"Hello!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><p>定义</p><ul><li>使用关键字<code>def</code>告诉<code>Python</code>定义一个函数</li><li>函数名，如<code>greet_user()</code>，括号里面传参数</li><li>定义以冒号结尾<code>:</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(形参)</span>:</span></span><br><span class="line">    <span class="comment"># 函数体</span></span><br></pre></td></tr></table></figure><ul><li>向函数传递信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="string">""" 显示问候 """</span></span><br><span class="line">    print(<span class="string">"Hello, "</span> + username.title() + <span class="string">" !"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line">greet_user(input(<span class="string">"What's you name?"</span>))</span><br></pre></td></tr></table></figure><ul><li><p>实参和形参</p><ul><li>在函数定义中，传入的变量是一个形参</li><li>在函数的调用中，传递的变量是一个实参</li></ul></li></ul><h5 id="8-2-传递实参"><a href="#8-2-传递实参" class="headerlink" title="8.2 传递实参"></a>8.2 传递实参</h5><ul><li>位置实参</li></ul><blockquote><p>函数调用中的每一个实参都关联到函数定义中的一个形参，基于实参的顺序进行关联的方式被称为位置实参</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type, pet_name)</span>:</span></span><br><span class="line">    <span class="string">""" 显示宠物信息 """</span></span><br><span class="line">    print(<span class="string">"\ntype: "</span> + animal_type)</span><br><span class="line">    print(<span class="string">"name: "</span> + pet_name)</span><br><span class="line"></span><br><span class="line">describe_pet(<span class="string">'hamster'</span>, <span class="string">'harry'</span>)</span><br></pre></td></tr></table></figure><p>注意：传入不同的实参可以对函数多次调用，实现复用；位置实参的顺序很重要，要与形参的位置相对应。</p><ul><li>关键字实参</li></ul><blockquote><p>关键字实参是传递给函数一个键值对，将实参的名称和值关联起来，顺序便无关紧要了。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type, pet_name)</span>:</span></span><br><span class="line">    <span class="string">""" 显示宠物信息 """</span></span><br><span class="line">    print(<span class="string">"\ntype: "</span> + animal_type)</span><br><span class="line">    print(<span class="string">"name: "</span> + pet_name)</span><br><span class="line"></span><br><span class="line">describe_pet(animal_type = <span class="string">'hamster'</span>, pet_name = <span class="string">'harry'</span>)</span><br></pre></td></tr></table></figure><ul><li>默认值</li></ul><blockquote><p>可以给每个形参指定默认值，在调用时如果没有出入实参，则使用默认值。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(pet_name, animal_type = <span class="string">'cat'</span>)</span>:</span></span><br><span class="line">    <span class="string">""" 显示宠物信息 """</span></span><br><span class="line">    print(<span class="string">"\ntype: "</span> + animal_type)</span><br><span class="line">    print(<span class="string">"name: "</span> + pet_name)</span><br><span class="line"></span><br><span class="line">describe_pet(<span class="string">'nieko'</span>)</span><br></pre></td></tr></table></figure><p>注意：在定义函数时需将有默认参数的形参（无需传递实参的形参）放在形参列表的最后面，因为<code>Python</code>依然将需要传入的实参视为位置实参，位置错误会报“非默认参数跟随默认参数”的错误。</p><p>注意：在无默认值的情况下，形参和实参的位置和个数都需要一一对应，缺少传入实参也会报错。</p><ul><li>避免实参错误</li></ul><blockquote><p>实参不匹配问题，仔细查看错误，在无默认值的情况下，必须为形参提供实参，并一一关联（位置关联或关键字关联）。</p></blockquote><h5 id="8-3-返回值"><a href="#8-3-返回值" class="headerlink" title="8.3 返回值"></a>8.3 返回值</h5><ul><li><p>返回简单值</p><ul><li><code>return</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first_name, last_name)</span>:</span></span><br><span class="line">    <span class="string">""" 返回姓名 """</span></span><br><span class="line">    full_name = first_name + <span class="string">" "</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">person = get_formatted_name(<span class="string">'akashi'</span>, <span class="string">'sai'</span>)</span><br><span class="line">print(person)</span><br></pre></td></tr></table></figure><ul><li>返回字典</li></ul><blockquote><p>函数可以返回任何类型的值，包括列表和字典等较为复杂的数据结构。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_person</span><span class="params">(name, age = <span class="string">''</span>, sex = <span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="string">""" 返回一个字典，定义个人信息 """</span></span><br><span class="line">    person = &#123;</span><br><span class="line">        <span class="string">'name'</span>: name,</span><br><span class="line">        <span class="string">'age'</span>: age,</span><br><span class="line">        <span class="string">'sex'</span>: sex</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line"></span><br><span class="line">person = build_person(<span class="string">'akashi'</span>, <span class="number">21</span>, <span class="string">'male'</span>)</span><br><span class="line">print(person)</span><br></pre></td></tr></table></figure><p>或者你也可以只传入<code>name</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person = build_person(<span class="string">'akashi'</span>)</span><br><span class="line">print(person)</span><br></pre></td></tr></table></figure><ul><li>结合使用函数和<code>while</code>循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first_name, last_name)</span>:</span></span><br><span class="line">    <span class="string">""" 返回姓名 """</span></span><br><span class="line">    full_name = first_name + <span class="string">" "</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">"\nPlease tell me your name: "</span>)</span><br><span class="line">    print(<span class="string">"(enter'q' at any time to quit)"</span>)</span><br><span class="line"></span><br><span class="line">    f_name = input(<span class="string">"First name： "</span>)</span><br><span class="line">    <span class="keyword">if</span> f_name == <span class="string">'q'</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    l_name = input(<span class="string">"Last name: "</span>)</span><br><span class="line">    <span class="keyword">if</span> l_name == <span class="string">'q'</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    person = get_formatted_name(f_name, l_name)</span><br><span class="line">    print(<span class="string">"\nHello, "</span> + person + <span class="string">" !"</span>)</span><br></pre></td></tr></table></figure><h5 id="8-4-传递列表"><a href="#8-4-传递列表" class="headerlink" title="8.4 传递列表"></a>8.4 传递列表</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_users</span><span class="params">(names)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        msg = <span class="string">"Hello, "</span> + name + <span class="string">"!"</span></span><br><span class="line">        print(msg)</span><br><span class="line"></span><br><span class="line">username = [<span class="string">'akashi'</span>, <span class="string">'asuka'</span>, <span class="string">'gakki'</span>]</span><br><span class="line">greet_users(username)</span><br></pre></td></tr></table></figure><ul><li>在函数中修改列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">unprinted_designs = [<span class="string">'akashi'</span>, <span class="string">'asuka'</span>, <span class="string">'gakki'</span>]</span><br><span class="line">completed_models = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> unprinted_designs:</span><br><span class="line">    current_design = unprinted_designs.pop();</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Priint: "</span> + current_design)</span><br><span class="line">    completed_models.append(current_design)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\nThe following models have been printed:"</span>)</span><br><span class="line"><span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:</span><br><span class="line">    print(completed_model)</span><br></pre></td></tr></table></figure><p>重新组织：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_models</span><span class="params">(unprinted_designs, completed_models)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> unprinted_designs:</span><br><span class="line">        current_design = unprinted_designs.pop()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"Print model: "</span> + current_design)</span><br><span class="line">        completed_models.append(current_design)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_completed_models</span><span class="params">(completed_models)</span>:</span></span><br><span class="line">    print(<span class="string">"\nThe following models have been printed:"</span>)</span><br><span class="line">    <span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:</span><br><span class="line">        print(completed_model)</span><br><span class="line"></span><br><span class="line">unprinted_designs = [<span class="string">'akashi'</span>, <span class="string">'asuka'</span>, <span class="string">'gakki'</span>]</span><br><span class="line">completed_models = []</span><br><span class="line"></span><br><span class="line">print_models(unprinted_designs, completed_models)</span><br><span class="line">show_completed_models(completed_models)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注意：重新梳理流程，提高效率，每个函数都只应负责一项具体的工作。</span><br><span class="line"></span><br><span class="line">- 禁止函数修改列表</span><br><span class="line"></span><br><span class="line">    - 将列表的副本传递给函数</span><br><span class="line">    </span><br><span class="line">```python</span><br><span class="line"># 切片</span><br><span class="line">function_name(list_name[:])</span><br></pre></td></tr></table></figure><p>注意：除非有充分的理由需要传递副本，否则不推荐。考虑到效率，创建副本需要有时间和内存的开销。</p><h5 id="8-5-传递任意数量的实参"><a href="#8-5-传递任意数量的实参" class="headerlink" title="8.5 传递任意数量的实参"></a>8.5 传递任意数量的实参</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(*toppings)</span>:</span></span><br><span class="line">    <span class="string">""" 打印顾客点的配料 """</span></span><br><span class="line">    print(toppings)</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>形参名<code>*toppings</code>中的星号让<code>Python</code>创建了一个名为<code>topping</code>的元组，并将收到的所有的值都封装到元组中。这样，无论多少个实参，都可以传递。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(*toppings)</span>:</span></span><br><span class="line">    <span class="string">""" 打印顾客点的配料 """</span></span><br><span class="line">    print(<span class="string">"\ntoppings list:"</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        print(topping)</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><ul><li>结合使用位置实参和任意数量实参</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size, *toppings)</span>:</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"\ntoppings list:"</span>)</span><br><span class="line">    print(size)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        print(topping)</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><p>注意：函数定义时，先定义位置形参，将任意数量形参定义在最后。</p><ul><li>使用任意数量的关键字实参</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bulid_profile</span><span class="params">(name, age, **user_info)</span>:</span></span><br><span class="line">    <span class="string">""" 创建一个空字典，存储用户信息 """</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">'name'</span>] = <span class="string">'akashi'</span></span><br><span class="line">    profile[<span class="string">'age'</span>] = <span class="number">21</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line">user_profile = bulid_profile(<span class="string">'akashi'</span>, <span class="number">21</span>, sex = <span class="string">'male'</span>, location = <span class="string">'Chengdu'</span>)</span><br><span class="line"></span><br><span class="line">print(user_profile)</span><br></pre></td></tr></table></figure><blockquote><p>形参名<code>**user_info</code>的两个星号让<code>Python</code>创建了一个<code>user_info</code>的空字典，并接收所有传入的键值对。</p></blockquote><h5 id="8-6-将函数存储在模块中"><a href="#8-6-将函数存储在模块中" class="headerlink" title="8.6 将函数存储在模块中"></a>8.6 将函数存储在模块中</h5><blockquote><p><code>import</code>允许在当前运行的程序文件中使用o模块中的代码。</p></blockquote><ul><li>导入整个模块</li></ul><p>将之前编辑的文件创建为模块：</p><p><code>pizza.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size, *toppings)</span>:</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"\ntoppings list:"</span>)</span><br><span class="line">print(size)</span><br><span class="line"><span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">    print(topping)</span><br></pre></td></tr></table></figure></p><p>创建<code>make_pizzas.py</code>并导入模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> pizza</span><br><span class="line"></span><br><span class="line">pizza.make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</span><br><span class="line">pizza.make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><p>即：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入</span></span><br><span class="line"><span class="keyword">import</span> module_name</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用</span></span><br><span class="line">module_name.function_name()</span><br></pre></td></tr></table></figure></p><ul><li>导入特定的函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块中的特定函数</span></span><br><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入模块中的任意函数</span></span><br><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_0, functon_1</span><br></pre></td></tr></table></figure><ul><li>使用<code>as</code>给函数指定别名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name <span class="keyword">as</span> fn</span><br></pre></td></tr></table></figure><ul><li>使用<code>as</code>给模块指定别名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module_name <span class="keyword">as</span> mn</span><br></pre></td></tr></table></figure><ul><li>导入模块中的所有函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>注意：使用<code>*</code>导入模块中的所有函数</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript DOM</title>
      <link href="2019/07/20/basic-js-dom/JS_DOM/"/>
      <url>2019/07/20/basic-js-dom/JS_DOM/</url>
      
        <content type="html"><![CDATA[<h4 id="JavaScript-DOM-操作"><a href="#JavaScript-DOM-操作" class="headerlink" title="JavaScript DOM 操作"></a><code>JavaScript</code> <code>DOM</code> 操作</h4><h5 id="HTML-DOM（文档对象模型）"><a href="#HTML-DOM（文档对象模型）" class="headerlink" title="HTML DOM（文档对象模型）"></a><code>HTML</code> <code>DOM</code>（文档对象模型）</h5><blockquote><p>当网页被加载时，浏览器会创建页面的文档对象模型（<code>Document Object Model</code>）。</p></blockquote><ul><li><code>HTML</code> <code>DOM</code>树</li></ul><a id="more"></a><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g56f6qie3zj216e0ou0ui.jpg" alt="DOM"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>My Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>通过可编程的对象模型，<code>JavaScript</code>可以创建动态的<code>HTML</code>。</p><ul><li>改变页面中<code>HTML</code>的元素</li><li>改变页面中<code>HTML</code>的属性</li><li>改变页面中<code>CSS</code>的样式</li><li>对页面中的事件做出反应</li></ul></li></ul><h5 id="查找HTML元素"><a href="#查找HTML元素" class="headerlink" title="查找HTML元素"></a>查找<code>HTML</code>元素</h5><ul><li>通过<code>id</code>查找</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.getElementById(<span class="string">"intro"</span>);</span><br></pre></td></tr></table></figure><ul><li>通过标签名查找</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.getElementById(<span class="string">"main"</span>);</span><br><span class="line"><span class="keyword">var</span> y = x.getElementsByTagName(<span class="string">"p"</span>);</span><br></pre></td></tr></table></figure><ul><li>通过类名查找</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"intro"</span>);</span><br></pre></td></tr></table></figure><h5 id="改变HTML"><a href="#改变HTML" class="headerlink" title="改变HTML"></a>改变<code>HTML</code></h5><ul><li>改变<code>HTML</code>输出流</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Date</span>());</span><br></pre></td></tr></table></figure><ul><li>改变<code>HTML</code>内容</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">'header'</span>).innerHTML = <span class="string">'new title'</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>改变<code>HTML</code>属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"images"</span> <span class="attr">src</span>=<span class="string">"images/akashi.jpg"</span> <span class="attr">alt</span>=<span class="string">"images"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'images'</span>).src = <span class="string">"images/asuka.jpg"</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="改变CSS"><a href="#改变CSS" class="headerlink" title="改变CSS"></a>改变<code>CSS</code></h5><ul><li>改变<code>HTML</code>样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#block</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"block"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"block"</span>).style.backgroundColor = <span class="string">"red"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>).style.color = <span class="string">"red"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>).style.fontFamily = <span class="string">"plantc"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>).style.fontSize = <span class="string">"larger"</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>CSS</code>属性使用中划线(<code>-</code>)分隔，在<code>JS</code>中，需要换成<code>驼峰式</code>写法。</p></blockquote><ul><li>使用事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#block</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"block"</span> <span class="attr">onclick</span>=<span class="string">"change()"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"block"</span>).style.backgroundColor = <span class="string">"yellow"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="DOM-事件"><a href="#DOM-事件" class="headerlink" title="DOM 事件"></a><code>DOM</code> 事件</h5><ul><li>对事件做出反应</li></ul><blockquote><p>在事件发生时执行<code>JavaScript</code>，可以完成一系列功能。</p></blockquote><p><code>eg</code>:<br>    当用户点击鼠标时；<br>    当网页已加载时；<br>    当图像已加载时；<br>    当鼠标移动到元素上时；<br>    当输入字段被改变时；<br>    当提交<code>HTML</code>表单时；<br>    当用户触发按键时；</p><ul><li><p><code>onload</code> 和 <code>onunload</code> 事件</p><ul><li><code>onload</code> 和 <code>onunload</code> 事件会在用户进入或离开页面时被触发</li><li><code>onload</code> 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本</li><li><code>onload</code> 和 <code>onunload</code> 事件可用于处理 <code>cookie</code></li></ul></li><li><p><code>onchange</code> 事件</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>onChange<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">onchange</span>=<span class="string">"change()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> value = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).value;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(value);</span></span><br><span class="line">        alert(value);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：点击回车或者离开输入框后事件触发。</p><p>另一种写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>onChange<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">onchange</span>=<span class="string">"change(this.value)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">change</span><span class="params">(obj)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(obj);</span></span><br><span class="line">        alert(obj);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>实现了同样的效果，但第二种写法在一开始就通过<code>this</code>获取了输入框的值以实参的方式传入方法。</p></blockquote><ul><li><code>onmouseover</code> 和 <code>onmouseout</code> 事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>onmouseover &amp;&amp; onmouseout<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#block</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        color: aliceblue;</span><br><span class="line">        background-color: orange;</span><br><span class="line">        text-align: center;</span><br><span class="line">        line-height: 200px;</span><br><span class="line">        font-size: larger;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"block"</span> <span class="attr">onmouseover</span>=<span class="string">"overHandle(this)"</span> <span class="attr">onmouseout</span>=<span class="string">"outHandle(this)"</span>&gt;</span>Try<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">overHandle</span><span class="params">(obj)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        obj.innerHTML = <span class="string">"Over"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">outHandle</span><span class="params">(obj)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        obj.innerHTML = <span class="string">"Out"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>onmousedown</code>、<code>onmouseup</code> 以及 <code>onclick</code> 事件</p><ul><li>当点击鼠标按钮时，会触发 <code>onmousedown</code> 事件</li><li>当释放鼠标按钮时，会触发 <code>onmouseup</code> 事件</li><li>当完成鼠标点击时，会触发 <code>onclick</code> 事件</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>onChange<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#block</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"block"</span> <span class="attr">onclick</span>=<span class="string">"clickHandle(this)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">clickHandle</span><span class="params">(obj)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        obj.style.backgroundColor = <span class="string">"yellow"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="DOM-事件监听"><a href="#DOM-事件监听" class="headerlink" title="DOM 事件监听"></a><code>DOM</code> 事件监听</h5><ul><li><p><code>addEventListener()</code> 方法</p><ul><li><code>addEventListener()</code> 方法用于向指定元素添加事件句柄</li><li><code>addEventListener()</code> 方法添加的事件句柄不会覆盖已存在的事件句柄</li><li>可以向一个元素添加多个事件句柄</li><li>可以向同个元素添加多个同类型的事件句柄，如：两个 <code>&quot;click&quot;</code> 事件</li></ul></li></ul><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(event, <span class="function"><span class="keyword">function</span>, <span class="title">useCapture</span>);</span></span><br></pre></td></tr></table></figure><p>第一个参数是事件的类型 (如 “click” 或 “mousedown”;<br>第二个参数是事件触发后调用的函数(只是函数名，不加括号；加括号是直接调用);<br>第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>eventListener<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>Click!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).addEventListener(<span class="string">"click"</span>, displayDate);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">displayDate</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="built_in">Date</span>();</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>传递参数</li></ul><blockquote><p>当传递参数值时，使用<code>&quot;匿名函数&quot;</code>调用带参数的函数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>eventListener<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>Click!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        clickHandle(<span class="keyword">this</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">clickHandle</span><span class="params">(obj)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(obj);</span></span><br><span class="line"><span class="javascript">        obj.innerHTML = <span class="built_in">Date</span>();</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>事件冒泡或事件捕获</li></ul><blockquote><p>事件传递有两种方式：冒泡与捕获。</p></blockquote><p>事件传递定义了元素事件触发的顺序。 如果将 <code>&lt;p&gt;</code> 元素插入到 <code>&lt;div&gt;</code> 元素中，用户点击 <code>&lt;p&gt;</code> 元素, 哪个元素的 <code>&quot;click&quot;</code> 事件先被触发呢？</p><p>在 <code>冒泡</code> 中，<code>内部元素</code>的事件会<code>先</code>被触发，然后再触发外部元素，即： <code>&lt;p&gt;</code> 元素的点击事件先触发，然后会触发 <code>&lt;div&gt;</code> 元素的点击事件。</p><p>在 <code>捕获</code> 中，<code>外部元素</code>的事件会先被触发，然后才会触发内部元素的事件，即： <code>&lt;div&gt;</code> 元素的点击事件先触发 ，然后再触发 <code>&lt;p&gt;</code> 元素的点击事件。</p><p><code>addEventListener()</code> 方法可以指定 <code>&quot;useCapture&quot;</code> 参数来设置传递类型<br>默认值为 <code>false</code>, 即<code>冒泡传递</code>，当值为 <code>true</code> 时, 事件使用<code>捕获传递</code>。</p><ul><li><code>removeEventListener()</code> 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.removeEventListener(<span class="string">"click"</span>, clickHandle);</span><br></pre></td></tr></table></figure><h5 id="DOM-元素"><a href="#DOM-元素" class="headerlink" title="DOM 元素"></a><code>DOM</code> 元素</h5><ul><li><p>创建新的 <code>HTML</code> 元素 (节点)</p><ul><li><code>appendChild()</code></li><li>添加到元素尾部</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>这里是第一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>这里是第二个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> node = <span class="built_in">document</span>.createTextNode(<span class="string">"这里是插入的段落"</span>);</span></span><br><span class="line"></span><br><span class="line">    para.appendChild(node);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).appendChild(para);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>创建新的 <code>HTML</code> 元素 (节点)</p><ul><li><code>insertBefore()</code></li><li>添加到开始位置</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>这里是第一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>这里是第二个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> node = <span class="built_in">document</span>.createTextNode(<span class="string">"这里是插入的段落"</span>);</span></span><br><span class="line"></span><br><span class="line">    para.appendChild(node);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> child = <span class="built_in">document</span>.getElementById(<span class="string">"p2"</span>);</span></span><br><span class="line"></span><br><span class="line">    element.insertBefore(para, child);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>移除已存在的元素</p><ul><li><code>removeChild()</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>这里是第一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>这里是第二个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> node = <span class="built_in">document</span>.createTextNode(<span class="string">"这里是插入的段落"</span>);</span></span><br><span class="line"></span><br><span class="line">    para.appendChild(node);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> child = <span class="built_in">document</span>.getElementById(<span class="string">"p2"</span>);</span></span><br><span class="line"></span><br><span class="line">    element.insertBefore(para, child);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> removeChild = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span></span><br><span class="line">    element.removeChild(removeChild);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>已知要查找的子元素，然后查找其父元素，再删除这个子元素（删除节点必须知道父节点）:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>这里是第一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>这里是第二个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 在p中插入内容</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> node = <span class="built_in">document</span>.createTextNode(<span class="string">"这里是插入的段落"</span>);</span></span><br><span class="line">    para.appendChild(node);</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// 将新的段落插入到两个段落之间</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> child = <span class="built_in">document</span>.getElementById(<span class="string">"p2"</span>);</span></span><br><span class="line">    element.insertBefore(para, child);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 删除第一个段落</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> reChild = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 利用子节点查找父节点，再通过父节点删除子节点</span></span></span><br><span class="line">    reChild.parentNode.removeChild(reChild);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>替换 <code>HTML</code> 元素</p><ul><li><code>replaceChild()</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>这里是第一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>这里是第二个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> node = <span class="built_in">document</span>.createTextNode(<span class="string">"这里是插入的段落"</span>);</span></span><br><span class="line">    para.appendChild(node);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> child = <span class="built_in">document</span>.getElementById(<span class="string">"p2"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> reChild = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span></span><br><span class="line">    reChild.parentNode.removeChild(reChild);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 替换</span></span></span><br><span class="line">    element.replaceChild(para, child);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程 - 用户输入和while循环</title>
      <link href="2019/07/20/python_7_while/while/"/>
      <url>2019/07/20/python_7_while/while/</url>
      
        <content type="html"><![CDATA[<h4 id="七、用户输入和while循环"><a href="#七、用户输入和while循环" class="headerlink" title="七、用户输入和while循环"></a>七、用户输入和<code>while</code>循环</h4><h5 id="7-1-input函数"><a href="#7-1-input函数" class="headerlink" title="7.1 input函数"></a>7.1 <code>input</code>函数</h5><ul><li><code>input</code></li></ul><blockquote><p>函数<code>input()</code>让程序暂停运行，等待用户输入一些文本。获取用户输入后，<code>Python</code>将其存储在一个变量中，以方便使用。</p></blockquote><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">"Please enter your name: "</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Hello, "</span> + name.title() +  <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure><p>注意：<code>input()</code>接收一个参数，即要向用户显示的提示或说明。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"If you tell ue who you are, we can personalize the message you see."</span></span><br><span class="line">prompt += <span class="string">"\nWhat is your first name? "</span></span><br><span class="line"></span><br><span class="line">name = input(prompt)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\nHello! "</span> + name.title() + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure><ul><li>使用<code>int()</code>来获取数值输入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = input(<span class="string">"How old are you? "</span>)</span><br><span class="line">age = int(age)</span><br><span class="line"></span><br><span class="line">print(age &gt;= <span class="number">18</span>)</span><br></pre></td></tr></table></figure><ul><li>求模运算符</li></ul><blockquote><p>可以通过是否被<code>2</code>整除判断奇偶。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">number = input(<span class="string">"Enter a number, and I'll tell you if it's even or odd: "</span>)</span><br><span class="line"></span><br><span class="line">number = int(number)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"\nThe nubmer "</span> + str(number) + <span class="string">" is even."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"\nThe nubmer "</span> + str(number) + <span class="string">" is odd."</span>)</span><br></pre></td></tr></table></figure><h5 id="7-2-while循环"><a href="#7-2-while循环" class="headerlink" title="7.2 while循环"></a>7.2 <code>while</code>循环</h5><ul><li>使用<code>while</code>循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">current_number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt;= <span class="number">5</span>:</span><br><span class="line">    print(current_number)</span><br><span class="line">    current_number += <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>让用户选择何时退出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"\nTell me something, and I will repeat it back to you:"</span></span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' to end the program. "</span></span><br><span class="line"></span><br><span class="line">message = <span class="string">""</span></span><br><span class="line"><span class="keyword">while</span> message != <span class="string">'quit'</span>:</span><br><span class="line">    message = input(prompt)</span><br><span class="line">    <span class="keyword">if</span> message != <span class="string">'quit'</span>:</span><br><span class="line">        print(message)</span><br></pre></td></tr></table></figure><ul><li>使用标志</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"\nTell me something, and I will repeat it back to you:"</span></span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' to end the program. "</span></span><br><span class="line"></span><br><span class="line">active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> active:</span><br><span class="line">    message = input(prompt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">'quit'</span>:</span><br><span class="line">        active = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(message)</span><br></pre></td></tr></table></figure><ul><li>使用<code>break</code>退出循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"\nTell me something, and I will repeat it back to you:"</span></span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' to end the program. "</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    message = input(prompt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">'quit'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(message)</span><br></pre></td></tr></table></figure><ul><li>使用<code>continue</code>继续下一次循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">current_number = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> current_number &lt; <span class="number">10</span>:</span><br><span class="line">    current_number += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> current_number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(current_number)</span><br></pre></td></tr></table></figure><h5 id="7-3-使用while循环处理列表和字典"><a href="#7-3-使用while循环处理列表和字典" class="headerlink" title="7.3 使用while循环处理列表和字典"></a>7.3 使用<code>while</code>循环处理列表和字典</h5><ul><li>在列表之间移动元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">unconfirmed_users = [<span class="string">'akashi'</span>, <span class="string">'asuka'</span>, <span class="string">'gakki'</span>]</span><br><span class="line"></span><br><span class="line">confirmed_users = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"verifying user: "</span> + current_user.title())</span><br><span class="line">    confirmed_users.append(current_user)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\nconfirmed users: "</span>)</span><br><span class="line">print(confirmed_users)</span><br></pre></td></tr></table></figure><ul><li>删除包含特定值的所有列表元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pets = [<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'goldfish'</span>, <span class="string">'cat'</span>, <span class="string">'rabbit'</span>, <span class="string">'cat'</span>]</span><br><span class="line">print(pets)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="string">'cat'</span> <span class="keyword">in</span> pets:</span><br><span class="line">    pets.remove(<span class="string">'cat'</span>)</span><br><span class="line"></span><br><span class="line">print(pets)</span><br></pre></td></tr></table></figure><ul><li>使用用户输入来填充字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">responses = &#123;&#125;</span><br><span class="line"></span><br><span class="line">polling_active = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> polling_active:</span><br><span class="line">    name = input(<span class="string">"\nWhat's your name? "</span>)</span><br><span class="line">    age =input(<span class="string">"How old are you? "</span>)</span><br><span class="line"></span><br><span class="line">    responses[name] = age</span><br><span class="line"></span><br><span class="line">    repeat = input(<span class="string">"next? (yes/no) "</span>)</span><br><span class="line">    <span class="keyword">if</span> repeat == <span class="string">'no'</span>:</span><br><span class="line">        polling_active = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n=== Poll Results ==="</span>)</span><br><span class="line">print(responses)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程 - 字典</title>
      <link href="2019/07/19/python_6_dict/dictionary/"/>
      <url>2019/07/19/python_6_dict/dictionary/</url>
      
        <content type="html"><![CDATA[<h4 id="六、字典"><a href="#六、字典" class="headerlink" title="六、字典"></a>六、字典</h4><h5 id="6-1-使用字典"><a href="#6-1-使用字典" class="headerlink" title="6.1 使用字典"></a>6.1 使用字典</h5><blockquote><p>在<code>Pyhton</code>中，字典是一系列<code>键-值</code>对。</p></blockquote><a id="more"></a><ul><li><p>字典</p><ul><li><code>键-值</code>对</li><li>用花括号<code>{}</code>表示</li><li>键和值之间用冒号<code>:</code>分隔</li><li>键值对之间用逗号<code>,</code>分隔</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">print(alien_0[<span class="string">'color'</span>])</span><br><span class="line">print(alien_0[<span class="string">'points'</span>])</span><br></pre></td></tr></table></figure><ul><li>添加<code>键-值</code>对</li></ul><blockquote><p>字典是一种动态结构，可随时在其中添加键值对。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">'x_position'</span>] = <span class="number">0</span></span><br><span class="line">alien_0[<span class="string">'y_position'</span>] = <span class="number">25</span></span><br><span class="line">print(alien_0)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>, <span class="string">'x_position'</span>: <span class="number">0</span>, <span class="string">'y_position'</span>: <span class="number">25</span>&#125;</span><br></pre></td></tr></table></figure></p><ul><li>先创建一个空字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alien_1 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">alien_1[<span class="string">'color'</span>] = <span class="string">'green'</span></span><br><span class="line">alien_1[<span class="string">'points'</span>] = <span class="number">5</span></span><br><span class="line">print(alien_1)</span><br></pre></td></tr></table></figure><ul><li>修改字典中的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alien_1 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">alien_1[<span class="string">'color'</span>] = <span class="string">'green'</span></span><br><span class="line">alien_1[<span class="string">'points'</span>] = <span class="number">5</span></span><br><span class="line">print(alien_1)</span><br><span class="line"></span><br><span class="line">alien_1[<span class="string">'color'</span>] = <span class="string">'yellow'</span></span><br><span class="line">print(alien_1)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'yellow'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>删除键值对</p><ul><li>使用<code>del</code>语句将相对应的键值对彻底删除</li><li>必须指定要删除的字典名和键</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_1 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> alien_1[<span class="string">'points'</span>]</span><br><span class="line">print(alien_1)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>&#125;</span><br></pre></td></tr></table></figure></p><h5 id="6-2-遍历字典"><a href="#6-2-遍历字典" class="headerlink" title="6.2 遍历字典"></a>6.2 遍历字典</h5><ul><li><p>遍历所有的键值对</p><ul><li>使用方法<code>items()</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123;</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'Akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> user_0.items():</span><br><span class="line">    print(<span class="string">'\nkey:'</span> + key)</span><br><span class="line">    print(<span class="string">'value:'</span> + str(value))</span><br></pre></td></tr></table></figure><p>注意：即便遍历字典时，键值对的返回顺序也与存储顺序不同，<code>Python</code>不关心键值对的存储顺序，而只跟踪键和值之间的关联关系。</p><ul><li><p>遍历字典中所有的键</p><ul><li>使用方法<code>keys()</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123;</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'Akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> user_0.keys():</span><br><span class="line">    print(key.title())</span><br></pre></td></tr></table></figure><p>注意：将代码中<code>for key in user_0.keys():</code>替换为<code>for key in user_0:</code>输出不变。</p><blockquote><p>显式地使用方法<code>keys()</code>可以让代码更容易理解，当然也可以省略。</p></blockquote><ul><li><p>按顺序遍历字典中所有的键</p><ul><li>要以特定的顺序返回元素，一种办法是在<code>for</code>循环中对返回的键进行排序</li><li>使用<code>sorted()</code>来获得按特定顺序排列的键列表的副本</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123;</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'Akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按字母顺序排列</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> sorted(user_0.keys()):</span><br><span class="line">    print(key)</span><br></pre></td></tr></table></figure><ul><li><p>遍历字典中所有的值</p><ul><li><p>使用方法<code>values()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123;</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'Akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> user_0.values():</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure></li><li><p>剔除重复项，使用集合<code>set()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123;</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'Akashi'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> set(user_0.values()):</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="6-3-嵌套"><a href="#6-3-嵌套" class="headerlink" title="6.3 嵌套"></a>6.3 嵌套</h5><ul><li>字典列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien_1 = &#123;<span class="string">'color'</span>: <span class="string">'yellow'</span>, <span class="string">'points'</span>: <span class="number">10</span>&#125;</span><br><span class="line">alien_2 = &#123;<span class="string">'color'</span>: <span class="string">'red'</span>, <span class="string">'points'</span>: <span class="number">15</span>&#125;</span><br><span class="line"></span><br><span class="line">aliens = [alien_0, alien_1, alien_2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">    print(alien)</span><br></pre></td></tr></table></figure><ul><li>在字典中存储列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">'jen'</span>: [<span class="string">'python'</span>, <span class="string">'ruby'</span>],</span><br><span class="line">    <span class="string">'sarah'</span>: [<span class="string">'c'</span>],</span><br><span class="line">    <span class="string">'edward'</span>: [<span class="string">'ruby'</span>, <span class="string">'go'</span>],</span><br><span class="line">    <span class="string">'phil'</span>: [<span class="string">'python'</span>, <span class="string">'haskell'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, languages <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    print(<span class="string">"\n"</span> + name.title() + <span class="string">"'s favorite languages are:"</span>)</span><br><span class="line">    <span class="keyword">for</span> language <span class="keyword">in</span> languages:</span><br><span class="line">        print(<span class="string">'\t'</span> + language.title())</span><br></pre></td></tr></table></figure><ul><li>在字典中存储字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">users = &#123;</span><br><span class="line">    <span class="string">'akashi'</span>: &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'akashi'</span>,</span><br><span class="line">        <span class="string">'age'</span>: <span class="number">21</span>,</span><br><span class="line">        <span class="string">'sex'</span>: <span class="string">'male'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">'asuka'</span>: &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'asuka'</span>,</span><br><span class="line">        <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="string">'sex'</span>: <span class="string">'female'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> username, user_info <span class="keyword">in</span> users.items():</span><br><span class="line">    print(<span class="string">'\nUsername: '</span> + username)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\tAge: '</span> + str(user_info[<span class="string">'age'</span>]))</span><br><span class="line">    print(<span class="string">'\tSex: '</span> + user_info[<span class="string">'sex'</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程 - if条件语句</title>
      <link href="2019/07/18/python_5_if/if/"/>
      <url>2019/07/18/python_5_if/if/</url>
      
        <content type="html"><![CDATA[<h4 id="五、if语句"><a href="#五、if语句" class="headerlink" title="五、if语句"></a>五、<code>if</code>语句</h4><h5 id="5-1-一个简单的示例"><a href="#5-1-一个简单的示例" class="headerlink" title="5.1 一个简单的示例"></a>5.1 一个简单的示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'subaru'</span>, <span class="string">'tuyota'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line">    <span class="keyword">if</span> car == <span class="string">'bmw'</span>:</span><br><span class="line">        print(car.upper())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(car.title())</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="5-2-条件测试"><a href="#5-2-条件测试" class="headerlink" title="5.2 条件测试"></a>5.2 条件测试</h5><blockquote><p>每条<code>if</code>语句的核心都是一个值为<code>True</code>或<code>False</code>的表达式，这种表达式被称为条件测试。</p></blockquote><ul><li>检查是否相等<ul><li>使用<code>==</code>符号</li></ul></li></ul><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g52uu5bzscj20r802aq44.jpg" alt></p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g52uuidpebj20r802cwfu.jpg" alt></p><p>注意：一个等号是陈述（赋值），两个等号是发问（判断是否相等）。</p><ul><li>不考虑大小写</li></ul><blockquote><p>在<code>Python</code>中检查是否相等时区分大小写，那如何判断是不考虑区分大小写呢？</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g52uy6odslj20r802ejsv.jpg" alt></p><p>转换为小写比较：<br><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g52uymbzzcj20r803u416.jpg" alt></p><p>注意：原来的值不会发生改变。</p><ul><li><p>检查是否不相等</p><ul><li>使用<code>!=</code>符号<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">requested_topping = <span class="string">'mushrooms'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> requested_topping != <span class="string">'anchovies'</span>:</span><br><span class="line">    print(<span class="string">'Hold the anchovies!'</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>检查多个条件</p><ul><li><p>使用<code>and</code>检查多个条件</p><ul><li><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g52v9g94uej20r8036jtn.jpg" alt></li><li><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g52vcejw5gj20r80360uz.jpg" alt></li></ul></li><li><p>使用<code>or</code>检查多个条件</p><ul><li><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g52vef4js5j20r805e0wp.jpg" alt></li></ul></li></ul></li><li><p>检查特定值是否包含</p><ul><li>使用<code>in</code></li></ul></li><li><p>检查特定值是否不包含</p><ul><li>使用<code>not in</code></li></ul></li><li><p>布尔表达式</p></li></ul><blockquote><p>布尔表达式，即条件测试的别名。结果要么为<code>True</code>，要么<code>False</code>。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">game_active = <span class="literal">True</span></span><br><span class="line">can_edit = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h5 id="5-3-if-elif-else结构"><a href="#5-3-if-elif-else结构" class="headerlink" title="5.3 if-elif-else结构"></a>5.3 <code>if-elif-else</code>结构</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line">    print(<span class="string">'Your admission cost is $0.'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'Your admission cost is $5.'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Your admission cost is $10.'</span>)</span><br></pre></td></tr></table></figure><h5 id="5-4-使用if语句处理列表"><a href="#5-4-使用if语句处理列表" class="headerlink" title="5.4 使用if语句处理列表"></a>5.4 使用<code>if</code>语句处理列表</h5><ul><li><p>检查特殊元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">print(<span class="string">'Adding '</span> + requested_topping + <span class="string">'.'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\nFinished making your pizza!'</span>)</span><br></pre></td></tr></table></figure></li><li><p>确定列表不为空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> requested_toppings:</span><br><span class="line">    <span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">        print(<span class="string">'Adding '</span> + requested_topping + <span class="string">'.'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\nFinished making your pizza!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Are you sure you want a plain pizza?'</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python - 操作列表</title>
      <link href="2019/07/17/python_4_list_handle/list_handle/"/>
      <url>2019/07/17/python_4_list_handle/list_handle/</url>
      
        <content type="html"><![CDATA[<h4 id="四、操作列表"><a href="#四、操作列表" class="headerlink" title="四、操作列表"></a>四、操作列表</h4><h5 id="4-1-遍历整个列表"><a href="#4-1-遍历整个列表" class="headerlink" title="4.1 遍历整个列表"></a>4.1 遍历整个列表</h5><ul><li>遍历<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mangicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> mangician <span class="keyword">in</span> mangicians:</span><br><span class="line">    print(mangician)</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h5 id="4-2-避免缩进错误"><a href="#4-2-避免缩进错误" class="headerlink" title="4.2 避免缩进错误"></a>4.2 避免缩进错误</h5><blockquote><p><code>Python</code>根据缩进来判断代码行与前一个代码行的关系</p></blockquote><ul><li>缩进<ul><li>忘记缩进<ul><li>报错</li><li>逻辑错误</li></ul></li><li>不必要的缩进<ul><li>报错</li></ul></li><li>循环后不必要的缩进<ul><li>逻辑错误</li></ul></li><li>遗漏了冒号<ul><li>语法错误</li><li><code>for</code>语句末尾的冒号告诉<code>Python</code>下一行是循环的第一行</li></ul></li></ul></li></ul><h5 id="4-3-创建数值列表"><a href="#4-3-创建数值列表" class="headerlink" title="4.3 创建数值列表"></a>4.3 创建数值列表</h5><ul><li><p>使用函数<code>range()</code></p><ul><li>从指定的第一个值开始，到指定的第二个值结束，不包含第二个值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用<code>range()</code>创建数字列表——使用<code>list()</code>转换为列表</p><ul><li><p>使用<code>list()</code>转换为列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = list(range(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>[1, 2, 3, 4]</p></blockquote></li><li><p>指定步长</p><ul><li>打印1~10内的偶数：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = list(range(<span class="number">2</span>, <span class="number">11</span>, <span class="number">2</span>))</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>练习</p><ul><li><p>打印1~10内的平方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    square = value ** <span class="number">2</span></span><br><span class="line">    squares.append(square)</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure></li><li><p>优化</p><ul><li>使用临时变量会让代码更易读，而在其他情况下，只会让代码无谓地变长；</li><li>首先考虑编写清晰易懂且能完成所需功能的代码；</li><li>审核时，再考虑更高效的方法。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    squares.append(value ** <span class="number">2</span>)</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>统计计算</p><ul><li>最大值<code>max()</code>、最小值<code>min()</code>、总和<code>sum()</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line">print(max(digits))</span><br><span class="line">print(min(digits))</span><br><span class="line">print(sum(digits))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>列表解析</p><ul><li>解析列表将<code>for</code>循环和创建新元素的代码合并成一行，并自动附加新元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">列表解析</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">squares = [value ** <span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="4-4-使用列表的一部分"><a href="#4-4-使用列表的一部分" class="headerlink" title="4.4 使用列表的一部分"></a>4.4 使用列表的一部分</h5><ul><li><p>切片</p><ul><li><p>处理列表的部分元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">打印从第1个开始，到第4个为止，不包括第4个(下标从0开始)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line"></span><br><span class="line">print(players[<span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure></li><li><p>如果没有指定第一个索引，将从列表开头开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">打印从列表开头开始，到第5个为止，不包括第5个(下标从0开始)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(players[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure></li><li><p>如果省略终止索引，将终止于列表末尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">打印从第2个开始，到列表末尾为止</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(players[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure></li><li><p>负数索引返回离列末尾相应距离的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">打印从最后3个开始，到列表末尾为止</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(players[<span class="number">-3</span>:])</span><br></pre></td></tr></table></figure></li></ul></li><li><p>遍历切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]:</span><br><span class="line">    print(player.title())</span><br></pre></td></tr></table></figure></li><li><p>复制列表</p><ul><li>复制列表，可以创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引（<code>[:]</code>）</li></ul></li></ul><blockquote><p>理解两个例子的差异</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>]</span><br><span class="line">friend_foods = my_foods[:]</span><br><span class="line"></span><br><span class="line">my_foods.append(<span class="string">'cannoli'</span>)</span><br><span class="line">friend_foods.append(<span class="string">'ice cream'</span>)</span><br><span class="line"></span><br><span class="line">print(my_foods)</span><br><span class="line"></span><br><span class="line">print(friend_foods)</span><br></pre></td></tr></table></figure><p>输出：<br><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g51kix6u17j20r801imx7.jpg" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>]</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    本质上是将friend_foods关联到了包含在my_foods的列表，两个变量都是指向了同一个表。所以分别对两个变量操作，列表都会发生变化，且两个变量的值是相同的</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">friend_foods = my_foods</span><br><span class="line"></span><br><span class="line">my_foods.append(<span class="string">'cannoli'</span>)</span><br><span class="line">friend_foods.append(<span class="string">'ice cream'</span>)</span><br><span class="line"></span><br><span class="line">print(my_foods)</span><br><span class="line"></span><br><span class="line">print(friend_foods)</span><br></pre></td></tr></table></figure><p>输出：<br><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g51kiemhohj20r801m0st.jpg" alt></p><h5 id="4-5-元组"><a href="#4-5-元组" class="headerlink" title="4.5 元组"></a>4.5 元组</h5><blockquote><p>一系列不可修改的元素，不可变的列表被称为元组</p></blockquote><ul><li><p>定义和遍历</p><ul><li>尝试修改元组会报错<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line">print(dimensions)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    print(dimension)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改元组变量</p><ul><li>虽然不能修改元组的元素，但可以给存储元组的变量赋值（重新定义元组）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">dimensions = (<span class="number">400</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">print(dimension)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>如果需要存储一组值在程序的整个生命周期内都不变，可以使用元组。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="2019/07/16/basic-js/JavaScript%E5%9F%BA%E7%A1%80/"/>
      <url>2019/07/16/basic-js/JavaScript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h4><h5 id="一、什么是JavaScript？"><a href="#一、什么是JavaScript？" class="headerlink" title="一、什么是JavaScript？"></a>一、什么是JavaScript？</h5><ul><li>1.1 <code>JS</code><ul><li><code>JavaScript</code>是一种脚本语言</li><li><code>JavaScript</code>是一种轻量级的编程语言</li><li><code>JavaScript</code>可插入HTML编程</li><li><code>JavaScript</code>代码可由浏览器执行</li></ul></li></ul><a id="more"></a><ul><li>1.2 <code>JavaScript</code>直接写入<code>HTML</code>输出流<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML输出流<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">'&lt;h1&gt;这是一个标题&lt;/h1&gt;'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">'&lt;p&gt;这是一个段落&lt;/p&gt;'</span>);    </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>注意：如果在文档已加载后使用（比如在函数中），会覆盖整个文档。</p><ul><li>1.3 <code>JavaScript</code>对事件的反应<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>弹出事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"alert('欢迎！')"</span>&gt;</span>点我！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"eventHandle()"</span>&gt;</span>再点我！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">eventHandle</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"欢迎！"</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>注意：两个<code>Button</code>的弹出效果是一样的，写法上第二个调用了函数，是常见写法。</p><ul><li><p>1.4 <code>JavaScript</code>改变<code>HTML</code>的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>改变HTML内容<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>这里是文档内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"change()"</span>&gt;</span>点击修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        x = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);     <span class="comment">// 找到元素</span></span></span><br><span class="line"><span class="actionscript">        x.innerHTML = <span class="string">'这里是修改后的内容'</span>;     <span class="comment">// 修改内容</span></span></span><br><span class="line">&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>1.5 <code>JavaScript</code>改变<code>HTML</code>的图像</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>判断替换src<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/images/pic_bulboff.gif"</span> <span class="attr">id</span>=<span class="string">"image"</span> <span class="attr">onclick</span>=<span class="string">"changeImage()"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"180"</span> <span class="attr">alt</span>=<span class="string">"images"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">changeImage</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'image'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (element.src.match(<span class="string">'bulbon'</span>)) &#123;</span></span><br><span class="line"><span class="actionscript">            element.src=<span class="string">"/images/pic_bulboff.gif"</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            element.src=<span class="string">"/images/pic_bulbon.gif"</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>1.6 <code>JavaScript</code>改变<code>HTML</code>的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>改变HTML样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>这里是元素样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"change()"</span>&gt;</span>点击修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        x = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);     </span></span><br><span class="line"><span class="actionscript">        x.style.color = <span class="string">'#ff0000'</span>;</span></span><br><span class="line">    &#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>1.7 <code>ECMAScript</code> 版本</p></li></ul><table><thead><tr><th>年份</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>2009</td><td>ECMAScript 5</td><td>添加 “strict mode”，严格模式，添加 JSON 支持</td></tr><tr><td>2011</td><td>ECMAScript 5.1</td><td>版本变更</td></tr><tr><td>2015</td><td>ECMAScript 6</td><td>添加类和模块</td></tr><tr><td>2016</td><td>ECMAScript 7</td><td>增加指数运算符 (**)，增加 Array.prototype.includes</td></tr></tbody></table><h5 id="二、用法及输出"><a href="#二、用法及输出" class="headerlink" title="二、用法及输出"></a>二、用法及输出</h5><blockquote><p>如需在<code>HTML</code>页面中插入<code>JavaScript</code>，需使用<code>&lt;script&gt;</code>标签。脚本可被放置在<code>HTML</code> 页面的<code>&lt;body&gt;</code> 和<code>&lt;head&gt;</code> 部分中。</p></blockquote><h6 id="2-1-导入JS的三种方式"><a href="#2-1-导入JS的三种方式" class="headerlink" title="2.1 导入JS的三种方式"></a>2.1 导入<code>JS</code>的三种方式</h6><ul><li><code>&lt;body&gt;</code>中的<code>JS</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 在这里编辑你的JS代码</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;head&gt;</code>中的<code>JS</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 在这里编辑你的JS代码</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>外部的<code>JS</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 从外部导入js文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="2-2-JavaScript输出"><a href="#2-2-JavaScript输出" class="headerlink" title="2.2 JavaScript输出"></a>2.2 <code>JavaScript</code>输出</h6><ul><li>使用<code>window.alert()</code>弹出警告框<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>输出<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.alert(<span class="string">'Hello!'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>注意：<code>window</code>是<code>JS</code>的全局变量，可以省略不写。(例如<code>alert(&#39;Hello!&#39;)</code>)</p><ul><li><p>使用<code>document.write()</code>方法将内容写到<code>HTML</code>文档中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>输出<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">'Hello!'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>innerHTML</code>写入到<code>HTML</code>元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>输出<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>).innerHTML = <span class="built_in">Date</span>(); <span class="comment">// 输出当前时间</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>console.log()</code>写入到浏览器控制台输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>输出<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'Hello!'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>注意：从浏览器打开<code>html</code>文件，按<code>F12</code>打开开发者模式，在<code>console</code>控制台查看。</p><h6 id="2-3-数据类型及变量"><a href="#2-3-数据类型及变量" class="headerlink" title="2.3 数据类型及变量"></a>2.3 数据类型及变量</h6><ul><li><p>数据类型</p><ul><li><p>值类型（基本类型）</p><ul><li><p>字符串<code>String</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Akashi'</span>;</span><br></pre></td></tr></table></figure></li><li><p>数字<code>Number</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="string">'21'</span>;</span><br></pre></td></tr></table></figure></li><li><p>布尔型<code>Boolean</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li><li><p>对空<code>Null</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li><p>未定义<code>Undefined</code></p></li><li><code>Symbol</code></li></ul></li><li><p>引用数据类型</p><ul><li><p>对象<code>Object</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name = <span class="string">'Akashi'</span>,</span><br><span class="line">    age = <span class="number">21</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组<code>Array</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cars = [<span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'bmw'</span>];</span><br></pre></td></tr></table></figure><p><code>or</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cars = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'bmw'</span>);</span><br></pre></td></tr></table></figure><p><code>or</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cars2 = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">cars2[<span class="number">0</span>] = <span class="string">'audi'</span>;</span><br><span class="line">cars2[<span class="number">1</span>] = <span class="string">'toyota'</span>;</span><br><span class="line">cars2[<span class="number">2</span>] = <span class="string">'bmw'</span>;</span><br></pre></td></tr></table></figure></li><li><p>函数<code>Function</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>注意：<code>Undefined</code>和<code>Null</code>：<code>Undefined</code> 这个值表示变量不含有值。可以通过将变量的值设置为 <code>null</code> 来清空变量。</p><p>注意：<code>Symbol</code> 是 <code>ES6</code> 引入了一种新的原始数据类型，表示独一无二的值。</p><ul><li><p>创建变量</p><ul><li>使用<code>var</code>关键词声明变量<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> length = <span class="number">16</span>;        <span class="comment">// Number 通过数字字面量赋值 </span></span><br><span class="line">    <span class="keyword">var</span> points = x * <span class="number">10</span>;        <span class="comment">// Number 通过表达式字面量赋值</span></span><br><span class="line">    <span class="keyword">var</span> lastName = <span class="string">"Sai"</span>;       <span class="comment">// String 通过字符串字面量赋值</span></span><br><span class="line">    <span class="keyword">var</span> cars = [<span class="string">"Audi"</span>, <span class="string">"Toyota"</span>, <span class="string">"BMW"</span>];       <span class="comment">// Array  通过数组字面量赋值</span></span><br><span class="line">    <span class="keyword">var</span> person = &#123;<span class="attr">firstName</span>:<span class="string">"Akashi"</span>, <span class="attr">lastName</span>:<span class="string">"Sai"</span>&#125;;      <span class="comment">// Object 通过对象字面量赋值</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>声明变量类型</p><ul><li>动态类型<ul><li><code>JavaScript</code>拥有动态类型。这意味着相同的变量可用作不同的类型</li></ul></li><li>使用关键词<code>new</code>声明变量类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="keyword">new</span> <span class="built_in">String</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="keyword">new</span> <span class="built_in">Boolean</span>;</span><br><span class="line">    <span class="keyword">var</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">functionName</span><span class="params">(params)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 函数体</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>字母大小写</p><ul><li><code>JavaScript</code>对大小写敏感</li></ul></li><li><p>注释</p><ul><li>单行注释<ul><li>单行注释以 <code>//</code> 开头</li></ul></li><li>多行注释<ul><li>多行注释以 <code>/*</code>开始，以 <code>*/</code>结尾</li></ul></li></ul></li></ul><h6 id="2-4-作用域"><a href="#2-4-作用域" class="headerlink" title="2.4 作用域"></a>2.4 作用域</h6><blockquote><p>在 <code>JavaScript</code> 中, 作用域为可访问变量，对象，函数的集合。</p></blockquote><ul><li><p>局部变量</p><ul><li>变量在函数内声明，变量为局部作用域</li><li>局部变量：只能在函数内部访问</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数外不能调用name变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    name = <span class="string">'akashi'</span>;</span><br><span class="line">    <span class="comment">// 函数内可调用name变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>全局变量</p><ul><li>变量在函数外定义，即为全局变量</li><li>全局变量有 全局作用域: 网页中所有脚本和函数均可使用</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'akashi'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数外可调用name变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数内可调用name变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>生命周期</p><ul><li>JavaScript 变量生命周期在它声明时初始化</li><li>局部变量在函数执行完毕后销毁</li><li>全局变量在页面关闭后销毁</li></ul></li><li><p>函数参数</p><ul><li>函数参数只在函数内起作用，是局部变量</li></ul></li><li><p><code>HTML</code>中的全局变量</p><ul><li>在 <code>HTML</code> 中, 全局变量是 <code>window</code> 对象: 所有数据变量都属于 <code>window</code> 对象</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getName();</span><br><span class="line"><span class="comment">// 可以调用window.name</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    name = <span class="string">'akashi'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-5-事件"><a href="#2-5-事件" class="headerlink" title="2.5 事件"></a>2.5 事件</h6><blockquote><p><code>HTML</code> 事件可以是浏览器行为，也可以是用户行为。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"clickHandle()"</span>&gt;</span>现在的时间是？<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">clickHandle</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>).innerHTML = <span class="built_in">Date</span>();</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>常见的<code>HTML</code>事件表</li></ul><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td><code>onchange</code></td><td><code>HTML</code>元素改变</td></tr><tr><td><code>onclick</code></td><td>用户点击<code>HTML</code>元素</td></tr><tr><td><code>onmouseover</code></td><td>用户在一个<code>HTML</code>元素上移动鼠标</td></tr><tr><td><code>onmouseout</code></td><td>用户从一个<code>HTML</code>元素上移开鼠标</td></tr><tr><td><code>onkeydown</code></td><td>用户按下键盘按键</td></tr><tr><td><code>onload</code></td><td>浏览器已完成页面的加载</td></tr></tbody></table><blockquote><p>更多参考：<code>https://blog.csdn.net/qwer_df_b/article/details/77509859</code></p></blockquote><h6 id="2-6-字符串"><a href="#2-6-字符串" class="headerlink" title="2.6 字符串"></a>2.6 字符串</h6><blockquote><p><code>JavaScript</code>字符串可以存储一系列字符，用于存储和处理文本。</p></blockquote><ul><li>获取字符串长度</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>String<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> str = <span class="string">'qwertyuiopasdfghjklzxcvbnm'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(str.length);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>特殊字符</p><ul><li>使用转义字符（<code>\</code>），反斜杠是一个转义字符。 转义字符将特殊字符转换为字符串字符</li></ul></li></ul><table><thead><tr><th>代码</th><th>输出</th></tr></thead><tbody><tr><td>\’</td><td>单引号</td></tr><tr><td>\”</td><td>双引号</td></tr><tr><td>\</td><td>反斜杠</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>tab(制表符)</td></tr><tr><td>\b</td><td>退格符</td></tr><tr><td>\f</td><td>换页符</td></tr></tbody></table><ul><li>字符串方法</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>charAt()</code></td><td>返回指定索引位置的字符</td></tr><tr><td><code>indexOf()</code></td><td>返回字符串中检索指定字符第一次出现的位置</td></tr><tr><td><code>lastIndexOf()</code></td><td>返回字符串中检索指定字符最后一次出现的位置</td></tr><tr><td><code>match()</code></td><td>找到一个或多个正则表达式的匹配</td></tr><tr><td><code>replace()</code></td><td>替换与正则表达式匹配的子串</td></tr><tr><td><code>search()</code></td><td>检索与正则表达式相匹配的值</td></tr><tr><td><code>slice()</code></td><td>提取字符串的片断，并在新的字符串中返回被提取的部分</td></tr><tr><td><code>split()</code></td><td>把字符串分割为子字符串数组</td></tr><tr><td><code>substr()</code></td><td>从起始索引号提取字符串中指定数目的字符</td></tr><tr><td><code>substring()</code></td><td>提取字符串中两个指定的索引号之间的字符</td></tr><tr><td><code>toString()</code></td><td>返回字符串对象值</td></tr></tbody></table><h6 id="2-7-运算符"><a href="#2-7-运算符" class="headerlink" title="2.7 运算符"></a>2.7 运算符</h6><ul><li>算数运算符</li></ul><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code></td><td>加法</td></tr><tr><td><code>-</code></td><td>减法    </td></tr><tr><td><code>*</code></td><td>乘法    </td></tr><tr><td><code>/</code></td><td>除法    </td></tr><tr><td><code>%</code></td><td>取模（余数） </td></tr><tr><td><code>++</code></td><td>自增    </td></tr><tr><td><code>--</code></td><td>自减</td></tr></tbody></table><ul><li>赋值运算符</li></ul><table><thead><tr><th>运算符</th><th>例子</th><th>等同于</th><th>运算结果</th></tr></thead><tbody><tr><td><code>=</code></td><td>x=y</td><td></td><td>x=5   </td></tr><tr><td><code>+=</code></td><td>x+=y</td><td>x=x+y</td><td>x=15   </td></tr><tr><td><code>-=</code></td><td>x-=y</td><td>x=x-y</td><td>x=5   </td></tr><tr><td><code>*=</code></td><td>x*=y</td><td>x=x*y</td><td>x=50   </td></tr><tr><td><code>/=</code></td><td>x/=y</td><td>x=x/y</td><td>x=2    </td></tr><tr><td><code>%=</code></td><td>x%=y</td><td>x=x%y</td><td>x=0</td></tr></tbody></table><ul><li>字符串拼接<ul><li><code>+</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstname = <span class="string">'akashi'</span>;</span><br><span class="line"><span class="keyword">var</span> lastname = <span class="string">'sai'</span>;</span><br><span class="line"><span class="keyword">var</span> fullname = firstname + lastname;</span><br><span class="line"><span class="built_in">console</span>.log(fullname);</span><br></pre></td></tr></table></figure><h6 id="2-8-比较运算符和逻辑运算符"><a href="#2-8-比较运算符和逻辑运算符" class="headerlink" title="2.8 比较运算符和逻辑运算符"></a>2.8 比较运算符和逻辑运算符</h6><ul><li>比较运算符</li></ul><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>==</code></td><td>等于   </td></tr><tr><td><code>===</code></td><td>绝对等于 </td></tr><tr><td><code>!=</code></td><td>不等于    </td></tr><tr><td><code>!==</code></td><td>不绝对等于（值和类型有一个不相等，或两个都不相等） </td></tr><tr><td><code>&gt;</code></td><td>大于 </td></tr><tr><td><code>&lt;</code></td><td>小于       </td></tr><tr><td><code>&gt;=</code></td><td>大于或等于   </td></tr><tr><td><code>&lt;=</code></td><td>小于或等于</td></tr></tbody></table><ul><li>逻辑运算符</li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td><code>and</code></td><td>(x &lt; 10 &amp;&amp; y &gt; 1) 为 true</td></tr><tr><td><code>II</code></td><td><code>or</code></td><td>(x==5 II y==5) 为 false</td></tr><tr><td><code>!</code></td><td><code>not</code></td><td>!(x==y) 为 true</td></tr></tbody></table><p>注意：列表中的<code>II</code>为双竖线<code>||</code>。</p><ul><li>条件运算符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variablename=(condition)?value1:value2</span><br></pre></td></tr></table></figure><p><code>eg</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">voteable=(age&lt;<span class="number">18</span>)?<span class="string">"年龄太小"</span>:<span class="string">"年龄已达到"</span>;</span><br></pre></td></tr></table></figure></p><h6 id="2-9-条件语句"><a href="#2-9-条件语句" class="headerlink" title="2.9 条件语句"></a>2.9 条件语句</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (condition2) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-10-switch语句"><a href="#2-10-switch语句" class="headerlink" title="2.10 switch语句"></a>2.10 <code>switch</code>语句</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(n) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment">// 执行代码块 1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="comment">// 执行代码块 2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 与 case 1 和 case 2 不同时执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-11-for循环"><a href="#2-11-for循环" class="headerlink" title="2.11 for循环"></a>2.11 <code>for</code>循环</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (语句 <span class="number">1</span>; 语句 <span class="number">2</span>; 语句 <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 被执行的代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>for/in</code><ul><li><code>JavaScript</code> <code>for/in</code> 语句循环遍历对象的属性</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">"akashi"</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">sex</span>: <span class="string">"male"</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> list) &#123;</span><br><span class="line">    text += list[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(text);</span><br></pre></td></tr></table></figure><h6 id="2-12-while循环"><a href="#2-12-while循环" class="headerlink" title="2.12 while循环"></a>2.12 <code>while</code>循环</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 需要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 需要执行的代码</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件);</span><br></pre></td></tr></table></figure><h6 id="2-13-break和continue语句"><a href="#2-13-break和continue语句" class="headerlink" title="2.13 break和continue语句"></a>2.13 <code>break</code>和<code>continue</code>语句</h6><ul><li><p><code>break</code></p><ul><li><code>break</code> 语句可用于跳出循环</li><li><code>break</code> 语句跳出循环后，会继续执行该循环之后的代码</li></ul></li><li><p><code>continuee</code></p><ul><li><code>continue</code> 语句中断循环中的迭代</li><li>如果出现了指定的条件，然后继续循环中的下一个迭代</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 入门教程 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程 - 列表简介</title>
      <link href="2019/07/16/python_3_list/list/"/>
      <url>2019/07/16/python_3_list/list/</url>
      
        <content type="html"><![CDATA[<h4 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h4><h5 id="3-1-什么是列表"><a href="#3-1-什么是列表" class="headerlink" title="3.1 什么是列表"></a>3.1 什么是列表</h5><p>列表由一系列按特定的顺序排列的元素组成。用<code>[]</code>来表示，并用逗号来分隔其中的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'trek'</span>, <span class="string">'cannondale'</span>, <span class="string">'redine'</span>, <span class="string">'specialized'</span>]</span><br><span class="line">print(bicycles)</span><br></pre></td></tr></table></figure><a id="more"></a><p>输出：</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g45a9naj3rj20r801kglq.jpg" alt="list"></p><ul><li>访问列表元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'trek'</span>, <span class="string">'cannondale'</span>, <span class="string">'redine'</span>, <span class="string">'specialized'</span>]</span><br><span class="line">print(bicycles[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>列表是有序集合，因此要访问列表的任何元素，只需要将元素位置的索引传入即可。</p><ul><li>索引从<code>0</code>而不是<code>1</code>开始</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'trek'</span>, <span class="string">'cannondale'</span>, <span class="string">'redine'</span>, <span class="string">'specialized'</span>]</span><br><span class="line">print(bicycles[<span class="number">1</span>])</span><br><span class="line">print(bicycles[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>第一个列表元素的索引为<code>0</code>；通过将索引指定为<code>-1</code>，可以返回最后一个列表元素。</p><p>输出：</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g45ahs7wajj20r801odfp.jpg" alt="返回最后一个元素"></p><h5 id="3-2-修改、添加和删除元素"><a href="#3-2-修改、添加和删除元素" class="headerlink" title="3.2 修改、添加和删除元素"></a>3.2 修改、添加和删除元素</h5><ul><li>修改列表元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motocycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line">print(motocycles)</span><br><span class="line"></span><br><span class="line">motocycles[<span class="number">0</span>] = <span class="string">'ducati'</span></span><br><span class="line">print(motocycles)</span><br></pre></td></tr></table></figure><ul><li><p>在列表中添加元素</p><ul><li><p>在列表末尾添加元素</p><ul><li><code>append()</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">motocycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line">print(motocycles)</span><br><span class="line"></span><br><span class="line">motocycles[<span class="number">0</span>] = <span class="string">'ducati'</span></span><br><span class="line">print(motocycles)</span><br><span class="line"></span><br><span class="line">motocycles.append(<span class="string">'honda'</span>)</span><br><span class="line">print(motocycles)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在列表中插入元素</p><ul><li><code>insert()</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motocycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line">print(motocycles)</span><br><span class="line"></span><br><span class="line">motocycles.insert(<span class="number">0</span>, <span class="string">'ducati'</span>)</span><br><span class="line">print(motocycles)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>从列表中删除元素</p><ul><li><p>使用<code>del</code>语句删除元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motocycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line">print(motocycles)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> motocycles[<span class="number">0</span>]</span><br><span class="line">print(motocycles)</span><br></pre></td></tr></table></figure></li><li><p>使用方法<code>pop()</code>删除元素</p><ul><li>方法<code>pop()</code>可以删除列表末尾的元素，并且你可以接着使用它的值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">motocycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line">print(motocycles)</span><br><span class="line"></span><br><span class="line">poped_motocycles = motocycles.pop()</span><br><span class="line">print(motocycles)</span><br><span class="line">print(poped_motocycles)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>弹出列表中任何位置处的元素</p><ul><li>在括号中指定要删除的元素的索引，可以使用<code>pop()</code>来删除列表中任何位置的元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">motocycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line">print(motocycles)</span><br><span class="line"></span><br><span class="line">next_motocycles = motocycles.pop(<span class="number">1</span>)</span><br><span class="line">print(motocycles)</span><br><span class="line">print(next_motocycles)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>根据值删除元素</p><ul><li><code>remove()</code></li><li>使用<code>remove()</code>删除元素时，也可以接着使用它的值</li><li>方法<code>remove()</code>只删除第一个指定的值，如果该值在列表中出现多次，就需要使用循环判断<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mark = <span class="string">'ducati'</span></span><br><span class="line">motocycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>, <span class="string">'ducati'</span>]</span><br><span class="line">print(motocycles)</span><br><span class="line"></span><br><span class="line">motocycles.remove(mark)</span><br><span class="line">print(mark)</span><br><span class="line">print(motocycles)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h5 id="3-3-组织列表"><a href="#3-3-组织列表" class="headerlink" title="3.3 组织列表"></a>3.3 组织列表</h5><ul><li>使用方法<code>sort()</code>对列表进行永久性排序<ul><li>按字母顺序排序</li><li>方法<code>sort()</code>的修改是永久性的，无法恢复到原来的排序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.sort()</span><br><span class="line">print(cars)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">反转列表</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>使用函数<code>sorted()</code>对列表进行临时排序</p><ul><li><code>sorted()</code>可以按特定的顺序显示列表元素，同时不影响它们在列表中原始排列顺序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Here is the original list: "</span>)</span><br><span class="line">print(cars)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\nHere is the sorted list: "</span>)</span><br><span class="line">print(sorted(cars))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\nHere is the original list: "</span>)</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>倒序打印列表</p><ul><li><code>reverse()</code>永久性的修改了排列的列表元素，但可以随时恢复，只需再次调用<code>reverse()</code>即可<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line"></span><br><span class="line">cars.reverse()</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>确定列表的长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line"></span><br><span class="line">print(len(car))</span><br></pre></td></tr></table></figure></li><li><p>避免索引错误</p><ul><li>当发生索引错误找不到解决办法时，可以尝试将列表或其长度打印出来</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程 - 数据类型</title>
      <link href="2019/07/15/python_2_data_type/data_type/"/>
      <url>2019/07/15/python_2_data_type/data_type/</url>
      
        <content type="html"><![CDATA[<h4 id="二、变量和简单数据类型"><a href="#二、变量和简单数据类型" class="headerlink" title="二、变量和简单数据类型"></a>二、变量和简单数据类型</h4><h5 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1 变量"></a>2.1 变量</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">"Hello Python World!"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><a id="more"></a><p>这里我们添加了一个<code>message</code>的变量，变量存储了一个值为文本 <code>&quot;Hello Python World!&quot;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">"Hello Python World!"</span></span><br><span class="line"></span><br><span class="line">message = <span class="string">"Hello!"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p>我们可以修改覆盖变量的值，<code>Python</code>将始终记录变量的最新值。这里的输出为<code>&quot;Hello!&quot;</code></p><h5 id="2-2-变量的命名和使用"><a href="#2-2-变量的命名和使用" class="headerlink" title="2.2 变量的命名和使用"></a>2.2 变量的命名和使用</h5><ul><li>命名规则：</li></ul><ol><li>变量只能包含<code>字母</code>、<code>数字</code>和<code>下划线</code>。变量名可以以字母或下划线开头，但不能以数字开头。</li><li>变量名<code>不能包含空格</code>，可以使用下划线来分隔单词。</li><li>不要将<code>Python`</code>关键字<code>和</code>函数名`用作变量名。</li><li>变量名应既<code>简短</code>又具有<code>描述性</code>。</li><li>慎用小写字母<code>l</code>和大写字母<code>O</code>，因为容易和数字<code>1</code>和<code>0</code>混淆。</li></ol><h5 id="2-3-字符串"><a href="#2-3-字符串" class="headerlink" title="2.3 字符串"></a>2.3 字符串</h5><blockquote><p>字符串就是一系列字符，在<code>Python</code>中用引号括起来的都是字符串，其中引号可以使<code>单引号</code>也可以是<code>双引号</code>。</p></blockquote><ul><li>使用方法修改字符串的大小写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"akashi"</span></span><br><span class="line">print(name.title())</span><br></pre></td></tr></table></figure><p>方法是<code>Python</code>可对数据执行的操作，在<code>name.title()</code>中通过点（<code>.</code>）来执行<code>title()</code>方法的操作。<code>title()</code>以首字母大写的方式显示每个单词。</p><ol><li>首字母大写<ul><li><code>title()</code></li></ul></li><li>全部大写<ul><li><code>upper()</code></li></ul></li><li>全部小写<ul><li><code>lower()</code></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"akashi"</span></span><br><span class="line"></span><br><span class="line">print(name.title())</span><br><span class="line">print(name.upper())</span><br><span class="line">print(name.lower())</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Akashi</span><br><span class="line">AKASHI</span><br><span class="line">akashi</span><br></pre></td></tr></table></figure></p><ul><li>合并（拼接）字符串</li></ul><p><code>Python</code>中使用（<code>+</code>）来合并字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">"akashi"</span></span><br><span class="line">last_name = <span class="string">"sai"</span></span><br><span class="line">full_name = first_name + last_name</span><br><span class="line"></span><br><span class="line">message = <span class="string">"Hello, "</span> + full_name.title() + <span class="string">"!"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p>输出：<br><code>Hello Akashisai!</code></p><ul><li>使用制表符或换行符添加空白</li></ul><p>字符串<code>\n\t</code>让<code>Python</code>换到下一行，并在下一行添加一个制表符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Languages:\n\tPython\n\tC++\n\tJavaScript"</span>)</span><br></pre></td></tr></table></figure><p>输出：<br><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g4568ijal0j20r804ywew.jpg" alt="制表符\换行符"></p><ul><li>删除空白</li></ul><ol><li>剔除字符串末尾空白<ul><li><code>rstrip()</code></li></ul></li><li>剔除字符串开头空白<ul><li><code>lstrip()</code></li></ul></li><li>剔除字符串两端的空白<ul><li><code>strip()</code></li></ul></li></ol><h5 id="2-4-数字"><a href="#2-4-数字" class="headerlink" title="2.4 数字"></a>2.4 数字</h5><ul><li>整数</li></ul><p>加减乘除运算</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g456vmfn3wj20r80acq3s.jpg" alt="运算"></p><p>乘方</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g456x2qgm7j20r8046dfr.jpg" alt="乘方"></p><p><code>Python</code>使用两个乘号表示乘方运算。</p><ul><li>浮点数</li></ul><p><code>Python</code>将带小数点的数字都称作浮点数。在进行浮点运算时，<code>Python</code>通常会按照你期望的方式处理它。</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g457en1pqzj20r807aaa7.jpg" alt="浮点运算"></p><p>但需要注意的是，结果包含的小数位数可能不确定。但其实所有的语言都存在这种问题。浮点数计算得到的是一个近似的值。</p><ul><li>使用函数str()避免类型错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">21</span></span><br><span class="line">message = <span class="string">"Happy "</span> + age + <span class="string">"rd Birthday!"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p>你可能认为，上面的代码会打印一条生日祝福语，但其实它会引发一个错误：</p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g457ntxjwjj20r80403z2.jpg" alt="类型错误"></p><p>这是一个类型错误，这意味着<code>Python</code>无法识别你使用的信息，为此，可调用函数<code>str()</code>将非字符串转换为字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">21</span></span><br><span class="line">message = <span class="string">"Happy "</span> + str(age) + <span class="string">"rd Birthday!"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><h5 id="2-5-注释"><a href="#2-5-注释" class="headerlink" title="2.5 注释"></a>2.5 注释</h5><ul><li>单行注释<ul><li>使用<code>#</code>进行单行注释</li></ul></li><li>多行注释<ul><li>使用<code>&quot;&quot;&quot;</code>包含进行多行注释</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 这是一个单行注释</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">这是</span><br><span class="line">一个</span><br><span class="line">多行注释</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h5 id="2-6-Python之禅"><a href="#2-6-Python之禅" class="headerlink" title="2.6 Python之禅"></a>2.6 <code>Python</code>之禅</h5><ul><li><code>import this</code><ul><li>避繁就简</li><li>漂亮而优雅</li><li>简单易懂</li><li>……</li></ul></li></ul><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g50kq81ddoj20qw0hw16s.jpg" alt="import this"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程 - 起步</title>
      <link href="2019/07/14/python_1_start/start/"/>
      <url>2019/07/14/python_1_start/start/</url>
      
        <content type="html"><![CDATA[<!--### 第一部分--><!-------><h4 id="一、起步"><a href="#一、起步" class="headerlink" title="一、起步"></a>一、起步</h4><h5 id="1-1-检查Python版本"><a href="#1-1-检查Python版本" class="headerlink" title="1.1 检查Python版本"></a>1.1 检查Python版本</h5><p>在终端<code>Terminal</code>输入：</p><p><code>python</code></p><a id="more"></a><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g421hw1pmmj20r8046myl.jpg" alt="python"></p><p>打印以上信息，说明系统安装了<code>python</code>环境。</p><p><code>python3</code></p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g421j0eul4j20r8046q3p.jpg" alt></p><p>打印以上信息，说明系统安装了<code>python3</code>环境。</p><p>使用<code>exit()</code>命令退出编程环境。</p><h5 id="1-2-Hello-World"><a href="#1-2-Hello-World" class="headerlink" title="1.2 Hello World"></a>1.2 <code>Hello World</code></h5><p><code>print(&quot;Hello World!&quot;)</code></p><p><img src="http://ww1.sinaimg.cn/large/9c62a0cfly1g421p44m2jj20r802omxa.jpg" alt="hello"></p><h5 id="1-3-从终端运行Python程序"><a href="#1-3-从终端运行Python程序" class="headerlink" title="1.3 从终端运行Python程序"></a>1.3 从终端运行<code>Python</code>程序</h5><ul><li>在<code>Linux</code>和<code>OS X</code>系统中从终端运行<code>Python</code>程序<ul><li>使用<code>cd</code>（表示切换目录，<code>change directory</code>）在文件系统中导航</li><li><code>ls</code>（<code>list的简写</code>）显示当前目录中所未隐藏的文件</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd Source/Python</span><br><span class="line">$ ls</span><br><span class="line">$ python hello_world.py</span><br></pre></td></tr></table></figure><ul><li>在<code>Windows</code>系统中从终端运行<code>Python</code>程序<ul><li>使用终端命令<code>cd</code>（表示切换目录，<code>change directory</code>）在文件系统中导航</li><li><code>dir</code>（表示目录，<code>directory</code>）列出当前目录中的所有文件</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd Source/Python</span><br><span class="line">$ dir</span><br><span class="line">$ python hello_world.py</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JetBrains IDE全家桶破解教程</title>
      <link href="2019/04/29/JetBrains-IDE/JetBrains_IDE_%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/"/>
      <url>2019/04/29/JetBrains-IDE/JetBrains_IDE_%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>通过本教程，你可以优雅的破解使用<code>JetBrains</code>旗下的一系列<code>IDE</code>，包括<code>WebStorm</code>、<code>PyCharm</code>、<code>PhpsStorm</code>、<code>IntelliJ IDEA</code>等。</p><a id="more"></a><h3 id="JetBrains-IDE全家桶破解"><a href="#JetBrains-IDE全家桶破解" class="headerlink" title="JetBrains IDE全家桶破解"></a><code>JetBrains IDE</code>全家桶破解</h3><hr><h4 id="方法一：修改hosts"><a href="#方法一：修改hosts" class="headerlink" title="方法一：修改hosts"></a>方法一：修改<code>hosts</code></h4><ul><li><code>IDE</code>下载以后，先运行一次，然后关闭进行破解。</li></ul><h5 id="找到hosts文件"><a href="#找到hosts文件" class="headerlink" title="找到hosts文件"></a>找到<code>hosts</code>文件</h5><ul><li><code>Windows</code><ul><li><code>win+R</code>调出运行窗口输入<code>c:\windows\system32\drivers\etc</code></li><li>找到<code>hosts</code>文件用记事本打开修改</li><li>在最后面添加以下两项并保存退出<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.0.0.0 account.jetbrains.com</span><br><span class="line">0.0.0.0 www.jetbrains.com</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>注意：</strong> 如果没有编辑权限可以先复制一份到桌面，便可以编辑。编辑之后粘贴回<code>etc</code>目录与原文件进行替换即可。</p><ul><li><code>Mac</code><ul><li>在桌面使用快捷键<code>Shift+Command+G</code>，并输入<code>hosts</code>文件所在的路径：<code>/etc/hosts</code><br><img src="http://ws1.sinaimg.cn/large/9c62a0cfly1g2j82566hkj216s0o8tmz.jpg" alt="etc/hosts"></li><li>同样添加修改项并保存<br><img src="http://ws1.sinaimg.cn/large/9c62a0cfly1g2j852yixcj20zk0b0q3y.jpg" alt="修改"></li></ul></li></ul><p><strong>注意：</strong> 同样的，没有权限可以拷贝<code>hosts</code>文件到桌面，修改后替换<code>/etc/hosts</code>。</p><h5 id="注册码填写"><a href="#注册码填写" class="headerlink" title="注册码填写"></a>注册码填写</h5><ul><li><p>复制以下注册码（目测可用到2099年）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4RULSIH54N-eyJsaWNlbnNlSWQiOiI0UlVMU0lINTROIiwibGljZW5zZWVOYW1lIjoiMjA5OSAxODExIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTktMTEtMjcifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAxOS0xMS0yNyJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAxOS0xMS0yNyJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE5LTExLTI3In0seyJjb2RlIjoiR08iLCJwYWlkVXBUbyI6IjIwMTktMTEtMjcifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOS0xMS0yNyJ9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDE5LTExLTI3In0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE5LTExLTI3In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTktMTEtMjcifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjAxOS0xMS0yNyJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE5LTExLTI3In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTktMTEtMjcifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOS0xMS0yNyJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE5LTExLTI3In0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTktMTEtMjcifSx7ImNvZGUiOiJSU1UiLCJwYWlkVXBUbyI6IjIwMTktMTEtMjcifV0sImhhc2giOiIxMTA3MzgwNy8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-rlH9JbPzbld/Oak51Co3HlhD6xgE7CsvbrLl6RCySuv2sw37KBfDPY1PT2lAEkW0MJkUtGtmSHVp/jk8F4RuHGvouJFMdCtnsKdnebdjaPsKpjgxoreWlOu8VCnrGh+3mmuswzGKouw52ffxbmsvGFa5ybvWv7mj9gqSY0V20OcgCmIT3dlj4f9xc0iA9o7z1pvedVzcOrxVKvLmmqRp+4zMfNuMQB5sraznW9BxslR1sWN0pUOu9/J+k7IH6Wld/oGv5dtHYFqk5RinSBMTjYlZ+X4AV5f83Z4SkzbHqy2fGC6S3NoifaVFxRSP5TQDe6hsg7Fzic6k1iWAup89pg==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</span><br></pre></td></tr></table></figure></li><li><p>重启<code>IDE</code>，在弹出的激活对话框中选择<code>Activation Code</code>，若没有弹出激活框，可在<code>Help</code>下点击<code>Register</code>，选择<code>Activation Code</code>并粘贴注册码。</p></li></ul><p><img src="http://ws1.sinaimg.cn/large/9c62a0cfly1g2j8fz56chj20te0tk7mj.jpg" alt="Register"></p><ul><li>OK确认激活</li></ul><p><img src="http://ws1.sinaimg.cn/large/9c62a0cfly1g2j8dyi4pvj20r80p8myq.jpg" alt="注册码激活"></p><p><code>以上，完成破解</code></p><p><code>持续更新……</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础</title>
      <link href="2019/03/29/basic-css/CSS%E5%9F%BA%E7%A1%80/"/>
      <url>2019/03/29/basic-css/CSS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是CSS？"><a href="#一、什么是CSS？" class="headerlink" title="一、什么是CSS？"></a>一、什么是CSS？</h3><hr><blockquote><p>CSS 指层叠样式表 (Cascading Style Sheets)， 用于控制网页的样式和布局。</p></blockquote><a id="more"></a><h4 id="1-1-CSS基本语法"><a href="#1-1-CSS基本语法" class="headerlink" title="1.1 CSS基本语法"></a>1.1 CSS基本语法</h4><p>选择器 {<br>    属性: 值;<br>    属性: 值;<br>}</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-CSS的三种引入方式"><a href="#1-2-CSS的三种引入方式" class="headerlink" title="1.2 CSS的三种引入方式"></a>1.2 CSS的三种引入方式</h4><ul><li>外部样式表(External style sheet)<ul><li>即<code>link</code>中的<code>href</code>属性，引用外部<code>css</code>文件</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./app.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>内部样式表(Internal style sheet)<ul><li>在<code>head</code>中的<code>style</code>标签中引用</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>内联样式(Inline style)<ul><li>在标签中直接使用<code>style</code>属性</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:red;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-3-三种基础选择器"><a href="#1-3-三种基础选择器" class="headerlink" title="1.3 三种基础选择器"></a>1.3 三种基础选择器</h5><ul><li>标签选择器<ul><li>直接接标签名</li></ul></li><li><code>class</code>选择器<ul><li>以<code>.</code>开头，接<code>class</code>名</li></ul></li><li><code>id</code>选择器<ul><li>以<code>#</code>开头，接<code>id</code>名</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body&#123;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">        margin: 10px;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: white;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#con</span>&#123;</span></span><br><span class="line">        width: 50px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        background-color: yellow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"con"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、常见属性"><a href="#二、常见属性" class="headerlink" title="二、常见属性"></a>二、常见属性</h3><hr><h4 id="2-1-background"><a href="#2-1-background" class="headerlink" title="2.1 background"></a>2.1 <code>background</code></h4><blockquote><p>CSS 背景属性用于定义HTML元素的背景。</p></blockquote><ul><li><code>background-color</code><ul><li>背景颜色</li></ul></li><li><code>background-image</code><ul><li>背景图片</li></ul></li><li><code>background-repeat</code><ul><li>背景图像水平或垂直平铺</li></ul></li><li><code>background-position</code><ul><li>设置定位</li></ul></li><li>简写<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#ffffff</span> <span class="built_in">url</span>(<span class="string">'img_tree.png'</span>) no-repeat right top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2-文本"><a href="#2-2-文本" class="headerlink" title="2.2 文本"></a>2.2 <code>文本</code></h4><ul><li><code>color</code><ul><li>设置文字颜色</li><li>十六进制值 如: <code>＃FF0000</code></li><li>一个RGB值 如: <code>RGB(255,0,0)</code></li><li>颜色的名称 如: <code>red</code></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>text-align</code><ul><li>设置对齐方式</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>text-decoration</code><ul><li>设置文本装饰</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-字体"><a href="#2-3-字体" class="headerlink" title="2.3 字体"></a>2.3 <code>字体</code></h4><ul><li><code>font-size</code><ul><li>设置文本的字体大小</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>font-family</code><ul><li>设置文本的字体系列</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">"Times New Roman"</span>, Times, serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-链接"><a href="#2-4-链接" class="headerlink" title="2.4 链接"></a>2.4 <code>链接</code></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>:<span class="number">#000000</span>;  <span class="comment">/* 未访问链接*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>:<span class="number">#00FF00</span>;  <span class="comment">/* 已访问链接 */</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>:<span class="number">#FF00FF</span>;  <span class="comment">/* 鼠标移动到链接上 */</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>:<span class="number">#0000FF</span>;  <span class="comment">/* 鼠标点击时 */</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-列表"><a href="#2-5-列表" class="headerlink" title="2.5 列表"></a>2.5 <code>列表</code></h4><ul><li><code>list-style</code><ul><li>设置列表样式</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-盒子模型"><a href="#2-6-盒子模型" class="headerlink" title="2.6 盒子模型"></a>2.6 <code>盒子模型</code></h4><blockquote><p>所有的HTML元素可以看作是一个盒子，CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p></blockquote><p><img src="http://ws1.sinaimg.cn/large/9c62a0cfgy1g1lur8b9lyj20mq0clgm0.jpg" alt="盒子模型"></p><ul><li><code>Margin(外边距)</code><ul><li>清除边框外的区域，外边距是透明的。</li></ul></li><li><code>Border(边框)</code><ul><li>围绕在内边距和内容外的边框。</li></ul></li><li><code>Padding(内边距)</code> <ul><li>清除内容周围的区域，内边距是透明的。</li></ul></li><li><code>Content(内容)</code><ul><li>盒子的内容，显示文本和图像。</li></ul></li></ul><h4 id="2-7-边框"><a href="#2-7-边框" class="headerlink" title="2.7 边框"></a>2.7 <code>边框</code></h4><blockquote><p>CSS边框属性允许你指定一个元素边框的样式和颜色。</p></blockquote><p><img src="http://ws1.sinaimg.cn/large/9c62a0cfgy1g1luw7j1f6j20yq0bimx8.jpg" alt="边框属性"></p><ul><li>属性<ul><li><code>border-width</code></li><li><code>border-style</code> (required)</li><li><code>border-color</code></li></ul></li><li>简写</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">5px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-8-margin-外边距"><a href="#2-8-margin-外边距" class="headerlink" title="2.8 margin 外边距"></a>2.8 <code>margin 外边距</code></h4><blockquote><p>CSS margin(外边距)属性定义元素周围的空间。margin 清除周围的（外边框）元素区域。margin 没有背景颜色，是完全透明的。</p></blockquote><p><img src="http://ws1.sinaimg.cn/large/9c62a0cfgy1g1lv3goxnrj20p30cnwf0.jpg" alt="margin"></p><ul><li>属性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>简写</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-9-padding-填充"><a href="#2-9-padding-填充" class="headerlink" title="2.9 padding 填充"></a>2.9 <code>padding 填充</code></h4><blockquote><p>CSS padding 定义元素边框与元素内容之间的空间，即上下左右的内边距。当元素的 padding（填充）内边距被清除时，所释放的区域将会受到元素背景颜色的填充。</p></blockquote><p><img src="http://ws1.sinaimg.cn/large/9c62a0cfgy1g1lv3goxnrj20p30cnwf0.jpg" alt="padding"></p><ul><li>属性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>:<span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>:<span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>:<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>简写</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">25px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-10-position-定位"><a href="#2-10-position-定位" class="headerlink" title="2.10 position 定位"></a>2.10 <code>position 定位</code></h4><blockquote><p>position 属性指定了元素的定位类型。</p></blockquote><ul><li>属性<ul><li><code>static</code><ul><li>HTML 元素的默认值，即没有定位，遵循正常的文档流对象。</li><li>静态定位的元素不会受到 <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>的影响。</li></ul></li><li><code>relative</code><ul><li>相对定位元素是相对自己本身所在的位置进行定位的。</li></ul></li><li><code>fixed</code><ul><li>元素的位置相对于浏览器窗口是固定位置。</li><li>即使窗口是滚动的它也不会移动。</li></ul></li><li><code>absolute</code><ul><li>绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<code>&lt;html&gt;</code>。</li></ul></li><li><code>sticky</code><ul><li>基于用户的滚动位置来定位。</li></ul></li></ul></li><li>重叠元素<ul><li>元素的定位与文档流无关，所以它们可以覆盖页面上的其它元素</li><li><code>z-index</code>属性指定了一个元素的堆叠顺序（哪个元素应该放在前面，或后面）</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>:-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-11-overflow-溢出"><a href="#2-11-overflow-溢出" class="headerlink" title="2.11 overflow 溢出"></a>2.11 <code>overflow 溢出</code></h4><blockquote><p>CSS overflow 属性用于控制内容溢出元素框时显示的方式。</p></blockquote><ul><li>属性<ul><li><code>visible</code><ul><li>默认值。内容不会被修剪，会呈现在元素框之外。</li></ul></li><li><code>hidden</code><ul><li>内容会被修剪，并且其余内容是不可见的。</li></ul></li><li><code>scroll</code><ul><li>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</li></ul></li><li><code>auto</code><ul><li>如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</li></ul></li><li><code>inherit</code><ul><li>规定应该从父元素继承 overflow 属性的值。</li></ul></li></ul></li></ul><h4 id="2-12-float-浮动"><a href="#2-12-float-浮动" class="headerlink" title="2.12 float 浮动"></a>2.12 <code>float 浮动</code></h4><blockquote><p>CSS 的 Float（浮动），会使元素向左或向右移动，其周围的元素也会重新排列。</p></blockquote><p><strong>注意：</strong> 一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。</p><ul><li><code>eg</code>.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>清除浮动</li></ul><blockquote><p>元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用 clear 属性。clear 属性指定元素两侧不能出现浮动元素。</p></blockquote><ul><li><code>eg</code>.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text_line</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-13-组合"><a href="#2-13-组合" class="headerlink" title="2.13 组合"></a>2.13 <code>组合</code></h4><blockquote><pre><code>组合选择符说明了两个选择器直接的关系。CSS组合选择符包括各种简单选择符的组合方式。</code></pre></blockquote><ul><li><p>组合方式</p><ul><li>后代选择器(以空格分隔)</li><li>子元素选择器(以大于号分隔）</li><li>相邻兄弟选择器（以加号分隔）<br>-普通兄弟选择器（以破折号分隔）</li></ul></li><li><p>后代选择器</p><ul><li>后代选择器用于选取某元素的后代元素。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 实例选取了所有<code>&lt;div&gt;</code>中的<code>&lt;p&gt;</code>元素</p><ul><li>子元素选择器<ul><li>与后代选择器相比，子元素选择器<code>（Child selectors）</code>只能选择作为某元素子元素的元素。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 实例选择了<code>&lt;div&gt;</code>元素中所有直接子元素 <code>&lt;p&gt;</code></p><ul><li>相邻兄弟选择器<ul><li>相邻兄弟选择器<code>（Adjacent sibling selector）</code>可选择紧接在另一元素后的元素，且二者有相同父元素。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>+<span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 实例选取了所有位于 <code>&lt;div&gt;</code> 元素后的第一个 <code>&lt;p&gt;</code> 元素</p><ul><li>后续兄弟选择器<ul><li>后续兄弟选择器选取所有指定元素之后的相邻兄弟元素。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>~<span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 实例选取了所有 <code>&lt;div&gt;</code> 元素之后的所有相邻兄弟元素 <code>&lt;p&gt;</code></p><h4 id="2-14-伪类"><a href="#2-14-伪类" class="headerlink" title="2.14 伪类"></a>2.14 <code>伪类</code></h4><ul><li><p>例如<code>:hover</code>, <code>:link</code>, <code>:first-child</code>被称作伪类</p></li><li><p><code>:hover</code></p><ul><li>当鼠标悬停时，显示样式</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#FF704D</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>:first-child</code><ul><li>选择父元素的第一个子元素</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fin</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 入门教程 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础</title>
      <link href="2019/03/28/basic-html/HTML%E5%9F%BA%E7%A1%80/"/>
      <url>2019/03/28/basic-html/HTML%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><hr><h4 id="1-1-开发工具的选择"><a href="#1-1-开发工具的选择" class="headerlink" title="1.1 开发工具的选择"></a>1.1 开发工具的选择</h4><blockquote><p>一款好用的编辑器可以让你在撸代码的过程中事半功倍。</p></blockquote><ul><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener"><code>VS Code</code></a></li><li><a href="https://www.sublimetext.com/" target="_blank" rel="noopener"><code>Sublime text</code></a></li></ul><a id="more"></a><p>==<strong>注意：</strong> 配合<code>Emmet</code>自动补全使用，效果更佳。==</p><h4 id="1-2-浏览器的选择"><a href="#1-2-浏览器的选择" class="headerlink" title="1.2 浏览器的选择"></a>1.2 浏览器的选择</h4><blockquote><p>推荐开发者常用的开发与测试浏览器。</p></blockquote><ul><li><code>Chrome</code></li><li><code>Firefox</code></li></ul><h4 id="1-3-HTML实例"><a href="#1-3-HTML实例" class="headerlink" title="1.3 HTML实例"></a>1.3 HTML实例</h4><ul><li>什么是HTML？</li></ul><blockquote><p><code>HTML</code> 指的是<code>超文本标记语言</code>: <code>HyperText Markup Language</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> <span class="comment">&lt;!-- 声明这是一个html文档 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是一个文章标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>解析<ul><li><code>&lt;!DOCTYPE html&gt;</code> 声明为 <code>HTML5</code> 文档</li><li><code>&lt;html&gt;</code> 是 <code>HTML</code> 页面的根元素</li><li><code>&lt;head&gt;</code> 包含了文档的元<code>（meta）</code>数据，如 <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code> 定义网页编码格式为 <code>utf-8</code>。</li><li><code>&lt;title&gt;</code> 描述了文档的标题</li><li><code>&lt;body&gt;</code> 包含了可见的页面内容</li><li><code>&lt;h1&gt;</code> 定义一个大标题</li><li><code>&lt;p&gt;</code> 定义一个段落</li></ul></li></ul><h3 id="二、HTML基础"><a href="#二、HTML基础" class="headerlink" title="二、HTML基础"></a>二、HTML基础</h3><hr><h4 id="2-1-标签（元素）"><a href="#2-1-标签（元素）" class="headerlink" title="2.1 标签（元素）"></a>2.1 标签（元素）</h4><blockquote><p>像<code>&lt;body&gt;&lt;/body&gt;</code>这些叫做标签，也称作元素。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是一个文章标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-属性"><a href="#2-2-属性" class="headerlink" title="2.2 属性"></a>2.2 属性</h4><ul><li>实例<ul><li><code>HTML</code> 链接由 <code>&lt;a&gt;</code> 标签定义。链接的地址在 <code>href</code> 属性中指定</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://akashi_sai.gitee.io/"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>eg.</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"idname"</span> <span class="attr">class</span>=<span class="string">"classname"</span> <span class="attr">name</span>=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-3-常用标签"><a href="#2-3-常用标签" class="headerlink" title="2.3 常用标签"></a>2.3 常用标签</h4><h5 id="2-3-1-div"><a href="#2-3-1-div" class="headerlink" title="2.3.1 div"></a>2.3.1 <code>div</code></h5><ul><li>块级元素，独占一行，用于组合其他<code>HTML</code>元素的容器。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是一个容器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-2-span"><a href="#2-3-2-span" class="headerlink" title="2.3.2 span"></a>2.3.2 <code>span</code></h5><ul><li>内联元素，从左到右排列，可用于文本的容器。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>文本的容器<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-3-h1-h6"><a href="#2-3-3-h1-h6" class="headerlink" title="2.3.3 h1~h6"></a>2.3.3 <code>h1~h6</code></h5><ul><li>标题，<code>&lt;h1&gt;</code>定义最大标题，<code>&lt;h6&gt;</code>定义最小标题。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注释，以<code>&lt;!--</code>开始，以<code>--&gt;</code>结束。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里是注释内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==<strong>注意：</strong> 良好的注释习惯，可以提高代码的可读性。==</p><h5 id="2-3-4-p"><a href="#2-3-4-p" class="headerlink" title="2.3.4 p"></a>2.3.4 <code>p</code></h5><ul><li>段落，可以将文档分割成若干段落。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是另一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-5-a"><a href="#2-3-5-a" class="headerlink" title="2.3.5 a"></a>2.3.5 <code>a</code></h5><ul><li>链接，可以用来设置超文本链接。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://akashi_sai.gitee.io/"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-6-img"><a href="#2-3-6-img" class="headerlink" title="2.3.6 img"></a>2.3.6 <code>img</code></h5><ul><li>图像，<code>src</code> 指 <code>&quot;source&quot;</code>。源属性的值是图像的 <code>URL</code> 地址。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../logo.png"</span> <span class="attr">alt</span>=<span class="string">"这是一张logo图片"</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-7-列表"><a href="#2-3-7-列表" class="headerlink" title="2.3.7 列表"></a>2.3.7 列表</h5><ul><li>无序列表，<code>ul</code> &gt; <code>li</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>有序列表，<code>ol</code> &gt; <code>li</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-8-表格-table"><a href="#2-3-8-表格-table" class="headerlink" title="2.3.8 表格 table"></a>2.3.8 表格 <code>table</code></h5><ul><li>表格由 <code>&lt;table&gt;</code> 标签来定义。每个表格均有<code>若干行</code>（由 <code>&lt;tr&gt;</code> 标签定义），每行被分割为<code>若干单元格</code>（由 <code>&lt;td&gt;</code> 标签定义）。字母 <code>td</code> 指表格数据<code>（table data）</code>，即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第一行第一列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第一行第二列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第二行第一列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第二行第二列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-9-表单-form"><a href="#2-3-9-表单-form" class="headerlink" title="2.3.9 表单 form"></a>2.3.9 表单 <code>form</code></h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    value: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>input</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"这里是一个输入框"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>button</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>这是一个提交按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>textarea</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">cols</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line">    这里是一个文本框</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-10-头部"><a href="#2-3-10-头部" class="headerlink" title="2.3.10 头部"></a>2.3.10 头部</h5><ul><li><code>&lt;head&gt;</code><blockquote><p><code>&lt;head&gt;</code> 元素包含了所有的头部标签元素。在 <code>&lt;head&gt;</code>元素中你可以插入脚本<code>（scripts）</code>, 样式文件（CSS），及各种meta信息。可以添加在头部区域的元素标签为: <code>&lt;title&gt;</code>, <code>&lt;style&gt;</code>, <code>&lt;meta&gt;</code>, <code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>.</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;title&gt;</code></li></ul><blockquote><p>定义了不同文档的标题.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><ul><li><code>&lt;link&gt;</code></li></ul><blockquote><p>定义了文档与外部资源之间的关系。通常用于链接到样式表.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"mystyle.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;style&gt;</code></li></ul><blockquote><p>定义了HTML文档的样式文件引用地址。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>:yellow&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:blue&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><ul><li><code>&lt;meta&gt;</code></li></ul><blockquote><p>描述了一些基本的元数据。元数据也不显示在页面上，但会被浏览器解析。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p><code>fin</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 入门教程 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="2019/03/28/hello-world/hello-world/"/>
      <url>2019/03/28/hello-world/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
